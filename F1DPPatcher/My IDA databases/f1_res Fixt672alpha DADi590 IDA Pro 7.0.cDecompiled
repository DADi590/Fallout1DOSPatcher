/* This file has been generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2017 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

#define __thiscall __cdecl // Test compile in C mode

char __cdecl sub_10001000(_DWORD *a1, _DWORD *a2);
FARPROC sub_100010B0();
BOOL sub_10001130();
unsigned int __cdecl sub_100011A0(_DWORD *a1);
UINT __cdecl F_GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
BOOL __cdecl sub_100012C0(LPCSTR lpAppName, LPCSTR lpKeyName, int a3);
BOOL __cdecl sub_10001300(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct);
UINT __cdecl F_GetPrivateProfileIntA_3(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault);
void __cdecl writeSettings2(LPCSTR lpText);
void sub_10002250();
DWORD __cdecl F_GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize);
BOOL __cdecl sub_10002540(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct);
int __cdecl sub_100025E0(char *a1);
unsigned int __cdecl sub_10002600(unsigned __int16 a1);
// unsigned int __cdecl _byteswap_ulong(unsigned int Long);
char *__cdecl sub_10002640(int a1);
char __cdecl sub_10002670(_BYTE *a1, _BYTE *a2, _BYTE *a3);
int __cdecl sub_100026B0(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3);
int __cdecl sub_10002700(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3);
unsigned int __cdecl sub_10002760(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3);
unsigned int __cdecl sub_100027C0(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3);
int __cdecl sub_10002820(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11);
int __cdecl sub_100028A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11);
int __cdecl sub_10002920(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11);
int __cdecl sub_100029A0(_BYTE *a1, int a2, int a3);
int __cdecl sub_10002A30(int a1, char a2, char a3, char a4);
// int __usercall sub_10002A90@<eax>(int a1@<eax>, char a2@<dl>);
// int __usercall sub_10002AB0@<eax>(_BYTE *a1@<eax>, int a2@<edx>);
// int __usercall sub_10002AD0@<eax>(_BYTE *a1@<eax>);
signed int __stdcall sub_10002AF0(int a1, unsigned int a2, unsigned int a3, int a4);
char __cdecl sub_10002B30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
BOOL sub_10002E90();
signed int sub_10003030();
BOOL sub_100031A0();
int __thiscall sub_10003260(struct IDirectDraw *this);
IUnknown *sub_100033E0();
IUnknown *sub_10003470();
// IUnknown *__usercall sub_10003480@<eax>(int a1@<esi>);
IUnknown *__thiscall sub_100034E0(struct IDirectDraw *this);
int __stdcall sub_10003580(_DWORD *a1, int a2, int a3);
void F_initFunc11();
_DWORD __cdecl sub_100037B0(_DWORD, _DWORD);
char __thiscall sub_100038F0(_DWORD *this);
int __stdcall sub_10003BA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11);
int __stdcall sub_10003C20(int a1, int a2, int a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9, int a10, unsigned int a11);
// char __usercall sub_10003CD0@<al>(_DWORD *a1@<ecx>, int a2@<esi>);
int __thiscall sub_10003EB0(void *this);
int __thiscall sub_10003EE0(void *this);
char __cdecl sub_10003F00(int *a1, int a2);
int __cdecl sub_10003F90(int a1, _DWORD *a2);
// int __usercall sub_10004020@<eax>(_DWORD *a1@<eax>);
int __cdecl sub_10004080(char *a1, int a2, int a3);
// int __usercall sub_10004180@<eax>(int a1@<esi>, int a2, char a3, char a4, char a5);
// int __usercall sub_10004260@<eax>(int a1@<eax>, char a2@<dl>, int a3@<esi>);
// int __usercall sub_10004280@<eax>(char *a1@<eax>, int a2@<edx>);
// int __usercall sub_100042A0@<eax>(char *a1@<eax>);
signed int __stdcall sub_100042C0(int a1, int a2, int a3, _DWORD *a4);
// int __usercall sub_10004360@<eax>(int a1@<ebx>, int a2@<esi>);
int __stdcall sub_10004640(_DWORD *a1, int a2, int a3);
int __stdcall sub_100046C0(_DWORD *a1, int a2, int a3);
int __stdcall sub_10004740(int a1, int a2, _DWORD *a3, int a4, int a5);
int __stdcall sub_100047A0(int a1, int a2, _DWORD *a3, int a4, int a5);
void *sub_100047D0();
_DWORD *__thiscall sub_100047F0(_DWORD *this, int a2, int a3, int a4, unsigned int a5, unsigned int a6);
int sub_100049A0(); // weak
// signed int __usercall sub_10004A30@<eax>(int a1@<esi>);
// int __usercall sub_10004BB0@<eax>(int a1@<ebx>, int a2@<esi>);
// int __usercall sub_10004CC0@<eax>(int a1@<ebx>, int a2@<esi>);
// char __userpurge sub_10004DA0@<al>(_DWORD *a1@<ecx>, int a2@<ebx>, int a3, int a4, int a5, int a6, int a7, unsigned int a8, int a9, unsigned int a10, unsigned int a11);
// char __usercall sub_10005100@<al>(int a1@<ebx>, int a2@<esi>);
// int __usercall sub_10005180@<eax>(int *a1@<eax>, int a2@<edx>, int a3@<ebx>, int a4@<esi>);
// char __usercall sub_100051A0@<al>(int a1@<ebx>, int a2, int a3, int a4, int a5, int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10);
void F_initFunc12();
void __thiscall sub_10005570(void **this);
void __thiscall sub_10005660(void *); // idb
void __thiscall sub_10005680(void *); // idb
char *__thiscall sub_10005690(char *this);
int __cdecl sub_10005710(signed int a1);
bool __cdecl sub_10005780(int a1, int a2);
bool __cdecl sub_10005830(int a1, int a2);
char *__cdecl sub_100058D0(int a1, int a2, int a3, int a4);
int __thiscall sub_10005A80(_DWORD *this, int a2, int a3, int a4);
int __thiscall sub_10005B40(_DWORD *this, char *a2, int a3);
char *__thiscall sub_10005BE0(_DWORD *this, int a2, int a3, int a4, int a5, char *a6, int a7, int *a8);
int __cdecl sub_10005C60(int a1, int a2, int a3, int a4, int a5);
int sub_10005C90();
int __cdecl sub_10005CD0(int a1, int a2);
int __cdecl sub_10005CF0(int a1, int a2);
int __cdecl sub_10005D10(int a1, int a2);
int __cdecl sub_10005D30(int a1, int a2);
int F_initFunc2();
char *__cdecl sub_10005DF0(int a1, unsigned int a2);
char *__thiscall sub_10006080(_DWORD *this, char *a2, unsigned int a3, int *a4);
void __thiscall sub_100060F0(_DWORD *this, void *a2, int a3);
int __thiscall sub_10006180(_DWORD *this, char *a2, int a3);
void *__thiscall sub_100061D0(void *this, char a2);
int __thiscall sub_10006220(_DWORD *this, int a2);
int __thiscall sub_10006230(_DWORD *this, int a2);
int __thiscall sub_10006240(_DWORD *this, int a2);
int __thiscall sub_10006250(_DWORD *this);
int __thiscall sub_10006260(_DWORD *this);
int __thiscall sub_10006270(_DWORD *this);
int __thiscall sub_10006280(_DWORD *this);
int __thiscall sub_10006290(_DWORD *this);
int __thiscall sub_100062A0(_DWORD *this);
int __thiscall sub_100062B0(_DWORD *this);
int __thiscall sub_100062C0(_DWORD *this);
int __thiscall sub_100062D0(_DWORD *this);
int __thiscall sub_100062E0(_DWORD *this);
void *__thiscall sub_100062F0(void *this, char a2);
_DWORD *__cdecl sub_10006330(int a1);
_DWORD *__cdecl sub_10006380(int a1);
// void __usercall __spoils<ecx> sub_100063B0(int a1@<eax>);
int __cdecl sub_100063C0(int a1);
// void __usercall __spoils<ecx> sub_100063F0(int a1@<eax>);
int __cdecl sub_10006400(int a1, int a2, int a3, int a4, _BYTE *a5);
int __thiscall sub_10006550(_DWORD *this, int a2);
int __thiscall sub_10006590(_DWORD *this);
int __thiscall sub_100065C0(_DWORD *this);
int *__thiscall sub_100065F0(_DWORD *this);
int __cdecl sub_100067C0(int a1);
// void __usercall __spoils<ecx> sub_10006890(int a1@<eax>);
int __cdecl sub_100068D0(int a1);
// void __usercall __spoils<ecx> sub_10006920(int a1@<eax>);
int __cdecl sub_10006960(int a1);
// void __usercall __spoils<ecx> sub_100069B0(int a1@<eax>);
_DWORD *__thiscall sub_100069C0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12);
int __thiscall sub_10006D80(_DWORD *this, int a2);
int __thiscall sub_10006DC0(_DWORD *this);
int __thiscall sub_10006E00(_DWORD *this);
int __cdecl sub_10006E40(int a1);
// void __usercall __spoils<ecx> sub_10006E70(int a1@<eax>);
int __thiscall sub_10006E80(_DWORD *this, int a2, unsigned int a3, unsigned int a4);
_DWORD *__thiscall sub_10006FE0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
int __thiscall sub_10007270(_DWORD *this);
int __cdecl sub_10007460(int a1);
// void __usercall __spoils<ecx> sub_100074A0(int a1@<eax>);
int __cdecl sub_100074E0(int a1);
// void __usercall __spoils<ecx> sub_10007550(int a1@<eax>);
int __thiscall sub_10007560(_DWORD *this);
int __thiscall sub_10007630(_DWORD *this);
void __thiscall sub_100076D0(void *this, const void *a2);
char __thiscall sub_10007750(int this);
char __cdecl sub_10007990(int a1);
// void __usercall __spoils<ecx> sub_100079D0(int a1@<eax>);
int __thiscall sub_100079E0(_DWORD *this, int a2, int a3);
int __thiscall sub_10007B30(_DWORD *this, int a2);
int __thiscall sub_10007BD0(_DWORD *this);
int __thiscall sub_10007C60(_DWORD *this);
_DWORD *__thiscall sub_10007CF0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, const void *a8, int a9, int a10, int a11);
int __thiscall sub_10007F90(_DWORD *this);
char *__cdecl sub_10007FD0(int a1);
// void __usercall __spoils<ecx> sub_10008010(int a1@<eax>);
int __thiscall sub_10008020(_DWORD *this);
char *__cdecl sub_10008060(int a1);
// void __usercall __spoils<ecx> sub_100080A0(int a1@<eax>);
_DWORD *__thiscall sub_100080B0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12);
int __thiscall sub_10008380(_DWORD *this);
int *__thiscall sub_100086B0(_DWORD *this);
int __thiscall sub_10008790(int this, int a2);
int __cdecl sub_10008910(int a1);
// void __usercall __spoils<ecx> sub_10008A10(int a1@<eax>);
_DWORD *__thiscall sub_10008A20(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11);
int __thiscall sub_10008C90(_DWORD *this);
int __thiscall sub_10008E10(int *this, int a2);
_DWORD *__thiscall sub_10008E20(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10);
int __thiscall sub_10008FD0(_DWORD *this);
_DWORD *__thiscall sub_10009070(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9);
void *__thiscall sub_10009510(void *this, char a2);
void __thiscall sub_10009530(_DWORD *this);
void *__thiscall sub_10009560(void *this, char a2);
// _DWORD __thiscall std::ios_base::~ios_base(std::ios_base *__hidden this); idb
void *__thiscall sub_10009630(void *this, char a2);
void __thiscall sub_10009650(_DWORD *this);
void *__thiscall sub_100097A0(void *this, char a2);
void __thiscall sub_100097C0(_DWORD *this);
void *__thiscall sub_100097F0(void *this, char a2);
// _DWORD __thiscall std::ios_base::~ios_base(std::ios_base *__hidden this); idb
void *__thiscall sub_100098E0(void *this, char a2);
void __thiscall sub_10009900(_DWORD *this);
int __cdecl sub_100099E0(int a1, int a2);
int __cdecl sub_10009A00(int a1, int a2);
int __cdecl sub_10009A60(int a1, int a2, int a3, int a4);
int __cdecl sub_10009A90(int a1, int a2, int a3, int a4);
int __cdecl sub_10009AC0(int a1, int a2, int a3, int a4);
int __cdecl sub_10009AF0(int a1, int a2);
int __thiscall sub_10009B20(void *this);
int __cdecl sub_10009B40(int a1, int a2);
int __cdecl sub_10009B60(int a1, int a2);
int __cdecl sub_10009B80(int a1, int a2);
int __cdecl sub_10009BA0(int a1, int a2);
int __cdecl sub_10009BC0(int a1, int a2);
int __cdecl sub_10009BE0(int a1, int a2);
int __cdecl sub_10009C00(int a1, int a2, int a3);
int __cdecl sub_10009C30(int a1, int a2);
int F_initFunc3();
unsigned int *__thiscall sub_10009DB0(unsigned int *this, unsigned int a2);
int __thiscall sub_10009DF0(_DWORD *this, unsigned int a2);
int __thiscall sub_10009E20(_DWORD *this, unsigned int a2);
int __cdecl sub_10009E90(char a1, int a2);
int __cdecl sub_10009F40(int a1, int a2);
int sub_10009F70();
int __cdecl sub_1000A310(int a1, int a2, int a3);
int __cdecl sub_1000A430(int a1, int a2);
int __cdecl sub_1000A4D0(int *a1, _DWORD *a2);
int __cdecl sub_1000A650(_DWORD *a1, _DWORD *a2);
int __cdecl sub_1000A6A0(int *a1, int a2, int a3);
signed int sub_1000A880();
void __cdecl sub_1000A980(void *a1);
char __cdecl sub_1000A9C0(int a1);
char __cdecl sub_1000ABA0(int a1, int a2);
int __cdecl sub_1000AD70(int a1);
char __cdecl sub_1000AD90(int a1);
char __cdecl sub_1000AE90(int a1);
signed int __cdecl sub_1000AF50(int a1);
int __cdecl sub_1000B020(int a1, int a2);
char *__cdecl sub_1000B1D0(int a1, unsigned int a2, char *a3, int a4, char *a5);
signed int __cdecl sub_1000B2E0(_DWORD *a1, int *a2, _DWORD *a3);
char __cdecl sub_1000B360(_DWORD *a1);
signed int __cdecl sub_1000B4F0(_DWORD *a1, int *a2, _DWORD *a3);
int __cdecl sub_1000B620(int a1, int a2, int a3, int *a4, int *a5);
signed int __cdecl sub_1000B6F0(int a1, _DWORD *a2, _DWORD *a3);
int __cdecl sub_1000B7E0(int a1, int a2, int a3);
int __cdecl sub_1000B840(int a1, int a2, int a3);
char __cdecl sub_1000B8C0(int a1);
char __cdecl sub_1000B9A0(int a1, int a2);
char __cdecl sub_1000C1E0(int a1, int a2);
signed int __cdecl sub_1000C2D0(int a1);
char __cdecl sub_1000C450(int a1);
int __cdecl sub_1000C4D0(int a1, int a2, int a3, int a4, int *a5);
int __cdecl sub_1000C610(int a1, int a2, int a3);
int __cdecl sub_1000C750(int a1, int a2);
signed int F_chkEnableFOWAndOthers();
int (__fastcall *F_initFunc9())(_DWORD, _DWORD, _DWORD);
char __cdecl sub_1000D100(int a1);
int __thiscall sub_1000D320(void *this);
signed int __cdecl sub_1000D380(int a1, int a2);
signed int __cdecl sub_1000D5D0(signed int a1, int a2, signed int a3);
int __cdecl sub_1000D690(int *a1, int a2);
int __cdecl sub_1000D870(int *a1, int a2);
char sub_1000DA50();
int __cdecl FOW_sub_1000DCD0(int *a1, int a2);
int __thiscall sub_1000E060(void *this);
int __cdecl sub_1000E0A0(int a1, int a2);
int __cdecl sub_1000E0C0(int *a1, unsigned int a2);
const char *__cdecl sub_1000E120(int *a1, unsigned int a2, int a3);
int F_initFunc5();
int __cdecl sub_1000E220(int a1, int a2);
int sub_1000E280();
int __cdecl sub_1000E2B0(int a1, int a2, int a3, int a4);
int __cdecl sub_1000E2F0(int a1, int a2);
int __cdecl sub_1000E330(int a1, int a2);
int F_initFunc7();
int __cdecl sub_1000E420(int a1, int a2);
int __cdecl sub_1000E460(int a1, int a2);
int F_initFunc8();
int sub_1000E5E0();
int sub_1000E5F0();
int __cdecl sub_1000E600(int a1, int a2, int a3, int a4, unsigned __int8 a5);
int __cdecl sub_1000E630(int a1, int a2, int a3, int a4, int a5, int a6, unsigned __int8 a7);
int __thiscall sub_1000E670(void *this);
int sub_1000E690();
int sub_1000E730();
int F_initFunc4();
int __cdecl sub_1000E7F0(_BYTE *a1, int a2);
int __cdecl sub_1000E930(_BYTE *a1, int a2);
int __cdecl sub_1000EA90(int a1, int a2, int a3, int a4, int a5, unsigned __int8 a6);
int __cdecl sub_1000EB70(int a1, int a2);
int sub_1000EBA0();
bool sub_1000EBB0();
int sub_1000EBC0();
int sub_1000EBD0(); // weak
int __cdecl sub_1000EC30(int a1, int a2);
int sub_1000ECB0();
int __cdecl sub_1000ECC0(int a1, _DWORD *a2);
void __cdecl sub_1000ED10(int a1, int a2, int a3, int a4, char a5);
char __cdecl sub_1000ED60(int a1);
int __thiscall sub_1000EE60(void *this);
int sub_1000EE80();
int sub_1000EE90();
bool sub_1000EEA0();
int sub_1000EEB0();
int __cdecl sub_1000EEC0(int a1, int a2);
int __cdecl sub_1000EEE0(int a1, int a2, int a3, int a4);
int __thiscall sub_1000EF10(void *this);
int __cdecl sub_1000EF30(int a1, int a2, int a3, int a4, int a5, int a6);
int sub_1000EF60();
int __thiscall sub_1000EF70(void *this);
// int __usercall sub_1000EFA0@<eax>(int result@<eax>);
int sub_1000EFC0();
int sub_1000EFD0();
int __cdecl sub_1000EFE0(int a1, int a2, int a3, int a4, int a5, int a6);
int __cdecl sub_1000F000(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13);
int __cdecl sub_1000F040(int a1, int a2, int a3, int a4, int a5);
int __cdecl sub_1000F070(int a1, int a2);
int __thiscall sub_1000F090(void *this);
int __cdecl sub_1000F0B0(int a1, int a2);
int __thiscall sub_1000F0D0(void *this);
int __thiscall sub_1000F110(void *this);
int sub_1000F170();
int __cdecl sub_1000F190(int a1, int a2);
// int __usercall sub_1000F1C0@<eax>(int a1@<ebx>, int a2, int a3);
int F_initFunc6_fadeTimeMod2();
char __cdecl sub_1000F920(unsigned int a1, unsigned int a2, _DWORD *a3, _DWORD *a4);
int __cdecl sub_1000F9D0(int a1, _DWORD *a2);
bool __cdecl sub_1000FA50(int *a1);
int __cdecl sub_1000FAA0(_DWORD *a1, _DWORD *a2);
// int __usercall sub_1000FAE0@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edx>);
int __cdecl sub_1000FB50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39, int a40, int a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50, int a51, int a52, int a53, int a54, int a55, int a56, int a57, int a58, int a59, int a60, int a61, int a62, int a63);
int __cdecl sub_1000FB90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39, int a40, int a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50, int a51, int a52, int a53, int a54, int a55, int a56, int a57, int a58, int a59, int a60, int a61, int a62, int a63);
int F_initFunc17();
int __stdcall sub_1000FCA0(int, int); // weak
char *__cdecl sub_1000FCE0(int a1, unsigned int a2, int a3, int a4);
char *__cdecl sub_1000FD30(int a1, unsigned int a2, int a3, int a4);
int sub_1000FD70(); // weak
int sub_1000FDA0();
int sub_1000FDE0(); // weak
// char *__usercall sub_1000FE00@<eax>(int a1@<ebx>, char *a2, char a3, unsigned int a4);
// char *__usercall sub_1000FE40@<eax>(char *a1@<eax>, char a2@<dl>);
void *__cdecl sub_1000FE70(void *a1, const void *a2);
// void *__usercall sub_1000FEA0@<eax>(void *a1@<eax>, const void *a2@<edx>);
void sub_1000FEC0();
int sub_1000FED0(); // weak
void __thiscall sub_1000FF00(void *this);
int F_initFunc18();
char *__cdecl sub_10010470(char *a1, int a2, int a3, int a4, int a5);
int __cdecl sub_10010550(int a1, int a2);
// int __usercall sub_10010590@<eax>(int a1@<eax>, int a2@<ecx>);
int __stdcall sub_100105A0(int, int); // weak
int sub_100105D0(); // weak
_DWORD *__thiscall sub_100105F0(void *this);
int F_initFunc22_resStuf4();
signed int __cdecl sub_10010790(signed int a1);
void sub_10010980();
int __cdecl sub_10010A00(int a1, int a2, int a3, int a4, _DWORD *a5);
signed int __cdecl sub_10010A40(int a1, signed int *a2);
// int __usercall sub_10010CF0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>);
// int __usercall sub_10010D10@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>);
int __cdecl sub_10010D30(int a1, int a2, unsigned int a3, signed int a4, int a5, int a6, int a7);
// int __userpurge sub_10010E30@<eax>(int a1@<eax>, int a2@<edx>, signed int a3@<ecx>, unsigned int a4@<ebx>, int a5, int a6);
int sub_10010E50(); // weak
void sub_10010F10();
void sub_10010F20();
int sub_100110A0(); // weak
int sub_100110E0(); // weak
_DWORD *__fastcall sub_10011100(void *a1);
void __cdecl sub_10011300(char *a1, unsigned int a2, char *a3, int a4, char *a5, int a6);
UINT F_initFunc185_gameFixes();
// char *__usercall sub_10011CB0@<eax>(int a1@<ebx>, char *a2, int a3, int a4, int a5, char *a6);
char *__cdecl sub_10011D80(char *a1, unsigned int a2, int a3, int a4, int a5);
// __int16 __usercall sub_10011E50@<ax>(int a1@<ebx>, int a2);
// __int16 __usercall sub_10011EB0@<ax>(int a1@<eax>, int a2@<ebx>);
// int __usercall sub_10011ED0@<eax>(int a1@<ebx>, char *a2, int a3);
// int __usercall sub_10011FD0@<eax>(int a1@<eax>, int a2@<ebx>, char *a3@<edi>);
int __cdecl sub_10011FF0(int a1, int a2);
// int __usercall sub_10012030@<eax>(int a1@<eax>, int a2@<edx>);
int __stdcall sub_10012040(int, int); // weak
// int __usercall sub_10012080@<eax>(void *a1@<ecx>, int a2@<ebx>);
void sub_10012130();
void sub_10012140();
int F_initFunc20();
int __stdcall sub_100124F0(int, int); // weak
int sub_10012560();
int sub_100125F0(); // weak
char sub_10012620();
int sub_100126E0(); // weak
int sub_10012700(); // weak
int F_initFunc14();
int __stdcall sub_10012AB0(int, int); // weak
char *__cdecl sub_10012B10(char *a1, int a2, int a3, int a4, int a5);
int __cdecl sub_10012BD0(int a1, int a2);
// int __usercall sub_10012C10@<eax>(int a1@<eax>, int a2@<ecx>);
int sub_10012C20(); // weak
_DWORD *__thiscall sub_10012C50(void *this);
int sub_10012D60(); // weak
int F_initFunc28();
int sub_10012DF0();
int sub_10012F10(); // weak
int __cdecl sub_10012F30(char *); // idb
int sub_10013090(); // weak
int sub_100130A0();
int sub_10013100(); // weak
int sub_10013110(); // weak
int sub_10013120(); // weak
int __thiscall sub_10013130(void *this);
int __thiscall sub_10013140(void *this);
int sub_10013150();
int sub_10013180();
char __cdecl sub_100131B0(int a1, char a2);
signed int sub_100132A0();
signed int sub_10013500();
int __cdecl sub_10013520(_DWORD *a1, int a2, int a3);
// int __usercall sub_10013560@<eax>(int a1@<eax>, int a2@<edx>, int a3, int a4, int a5, int a6, int a7, int a8, int a9, ...);
char __cdecl sub_10013580(signed int a1, _BYTE *a2, _BYTE *a3);
int __cdecl sub_10013620(int a1, signed int a2);
int __cdecl sub_10013790(int a1, signed int a2);
// int __usercall sub_10013860@<eax>(int a1@<eax>, signed int a2@<edx>);
char *__cdecl sub_10013880(int a1, unsigned int a2, char *a3, int a4, char *a5, int a6);
char *__cdecl sub_100138B0(char *a1, unsigned int a2, char *a3, int a4, int a5);
char *__cdecl sub_100138E0(char *a1, unsigned int a2, char *a3, int a4, int a5);
int __cdecl sub_10013910(_BYTE *a1, int a2, int a3, int a4, int a5);
char *__cdecl sub_10013940(char *a1, unsigned int a2, char *a3, int a4, char *a5);
int __thiscall sub_10013960(void *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14);
int sub_100139C0(); // weak
int sub_100139E0();
int sub_10013A20();
int sub_10013A60();
int sub_10013AB0(); // weak
int sub_10013AC0(); // weak
int sub_10013AD0(); // weak
int sub_10013BA0(); // weak
void __cdecl sub_10013C00(char *a1, unsigned int a2, unsigned int a3, int a4, char *a5, int a6);
void sub_10013D90();
void __cdecl sub_10013FE0(int a1);
int __stdcall sub_10014010(int, int); // weak
// char __usercall sub_10014140@<al>(void *a1@<ecx>, int a2@<ebx>);
int F_initFunc26_resStuf1();
int __fastcall sub_10014FC0(int a1, int a2);
int __thiscall sub_10015010(void *this, int a2, int a3, int a4, int a5);
int F_initFunc24();
bool sub_10015100();
int sub_10015120();
int sub_10015130();
int sub_10015160();
int sub_100151D0(); // weak
int __cdecl sub_100151F0(int a1, char *a2, int a3, int a4, int a5, unsigned __int8 a6);
_DWORD __cdecl sub_10015420(_DWORD, _DWORD, _DWORD); // weak
void __stdcall sub_10015460(int a1);
// void __usercall sub_100154B0(int a1@<eax>);
signed int __thiscall sub_100154C0(void *this);
signed int __thiscall sub_10015D50(void *this);
int F_initFunc25_resStuf2();
// int __usercall sub_10015FD0@<eax>(int a1@<eax>, int a2@<edx>);
// int __usercall sub_10015FF0@<eax>(int a1@<eax>, int a2@<edx>);
// int __usercall sub_10016010@<eax>(int a1@<eax>, int a2@<edx>);
// int __usercall sub_10016040@<eax>(int a1@<eax>, int a2@<edx>);
// int __usercall sub_10016060@<eax>(int a1@<eax>, int a2@<edx>);
// int __usercall sub_10016090@<eax>(void *a1@<ecx>, int a2@<ebx>);
// int __usercall sub_100160C0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ebx>);
// signed int __usercall sub_100160F0@<eax>(int a1@<eax>, int a2@<edx>);
int __cdecl sub_10016110(int a1);
// int __usercall sub_10016130@<eax>(int a1@<eax>);
signed int __cdecl sub_10016150(_DWORD *a1, int *a2, _DWORD *a3);
// signed int __usercall sub_100161D0@<eax>(_DWORD *a1@<eax>, int *a2@<edx>);
signed int __cdecl sub_100161F0(_DWORD *a1, int *a2, _DWORD *a3);
// signed int __usercall sub_10016260@<eax>(_DWORD *a1@<eax>, int *a2@<edx>);
// signed int __usercall sub_10016280@<eax>(_DWORD *a1@<eax>, int *a2@<edx>);
// signed int __usercall FOW_sub_100162A0@<eax>(signed int a1@<eax>, int a2@<edx>, signed int a3@<ebp>);
// int __usercall sub_100162C0@<eax>(int *a1@<eax>, int a2@<edx>);
// int __userpurge sub_100162E0@<eax>(int a1@<edx>, int a2@<edi>, int a3@<esi>, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12);
// int __userpurge sub_10016300@<eax>(int a1@<edx>, int a2, int a3, int a4);
int __thiscall sub_10016330(void *this);
int __thiscall sub_10016360(void *this);
// int __usercall FOW_sub_10016380@<eax>(int *a1@<eax>, int a2@<edx>);
// int __userpurge sub_100163A0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, int *a5);
int sub_100163C0();
BOOL sub_10016730();
int F_initFunc15_enableFOWAndOthers();
signed int __cdecl sub_10016B80(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
// signed int __userpurge sub_10016BF0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, int a5, int a6);
int sub_10016C10(); // weak
int sub_10016C40();
void __spoils<ecx> sub_10016EE0();
int sub_10016EF0();
void sub_10016F00();
UINT sub_10016F10();
int F_initFunc23_resStuf3();
int sub_100171C0();
// _DWORD *__usercall sub_100171F0@<eax>(int a1@<eax>, int a2@<edx>);
int F_initFunc19();
// int __usercall sub_10017270@<eax>(int a1@<eax>);
UINT F_initFunc30_doubleClickRun();
int sub_10017300(); // weak
int __thiscall sub_10017320(void *this);
int sub_10017350();
int (*F_initFunc29())(void);
// _DWORD *__usercall sub_100173E0@<eax>(int a1@<eax>, int a2@<edx>);
int F_initFunc27();
char __cdecl sub_10017440(_DWORD *a1, int a2);
char __cdecl sub_10017520(unsigned int *a1, int a2);
int __cdecl sub_100177B0(FILE *, int); // idb
signed int __cdecl sub_100177F0(unsigned int a1, unsigned int a2, int a3, int a4);
// signed int __usercall sub_10017E30@<eax>(unsigned int a1@<eax>, unsigned int a2@<edx>);
int sub_10017E50();
int sub_10017E80(); // weak
int sub_10017EA0();
int sub_100181B0(); // weak
int F_initFunc16_resStuff5();
int __cdecl sub_10018290(double); // idb
int __cdecl sub_100182A0(int a1, int a2);
int __stdcall sub_100182D0(int, int); // weak
int __stdcall sub_10018300(int, int); // weak
int __stdcall sub_10018330(int, int); // weak
int sub_10018360(); // weak
int sub_10018390(); // weak
int sub_100183C0(); // weak
// __int16 __usercall sub_100183F0@<ax>(int a1@<ebx>, char *a2, char a3);
// __int16 __userpurge sub_10018430@<ax>(char *a1@<eax>, int a2@<ebx>, char a3);
__int16 __fastcall sub_10018450(void *a1);
signed int sub_100185A0();
signed int sub_100185B0();
void __thiscall sub_100185C0(void *this);
int F_initFunc13_fadeTimeMod();
int __cdecl sub_10018980(unsigned int a1, unsigned int a2, int a3, int a4);
// int __userpurge sub_100189E0@<eax>(unsigned int a1@<ecx>, unsigned int a2@<ebx>, int a3, int a4);
void __spoils<ecx> sub_10018A00();
int __cdecl sub_10018A40(LONG *a1, LONG *a2);
// int __usercall sub_10018B50@<eax>(LONG *a1@<eax>, LONG *a2@<edx>);
int F_initFunc21();
char __thiscall sub_10018C50(_DWORD *this);
bool __thiscall sub_10018CF0(_DWORD *this, int a2, int a3, int a4, int a5);
char __thiscall sub_10018D70(_DWORD *this, char a2);
char __thiscall sub_10018EA0(unsigned int *this, char a2);
char __thiscall sub_10018F20(DWORD *this, DWORD a2, DWORD a3, DWORD a4, DWORD a5, char a6);
char __thiscall sub_100190B0(void **this, int a2, int a3, DWORD a4);
UINT __cdecl sub_10019200(int a1);
int __cdecl sub_100193B0(int a1);
// void __usercall __spoils<ecx> sub_100193D0(int a1@<eax>);
int __cdecl sub_100193E0(int a1);
// void __usercall __spoils<ecx> sub_10019400(int a1@<eax>);
int __cdecl sub_10019410(int a1);
int __cdecl sub_10019450(int a1);
int __cdecl sub_10019490(int a1);
// void __usercall __spoils<ecx> sub_100194C0(int a1@<eax>);
// void __usercall __spoils<ecx> sub_100194D0(int a1@<eax>);
// void __usercall __spoils<ecx> sub_100194E0(int a1@<eax>);
int sub_100194F0(); // weak
int __cdecl sub_10019510(int a1, int a2, int a3, int a4, int a5, int a6, int a7);
int __cdecl sub_10019570(int a1, int a2, int *a3);
char __cdecl writeSettings1(int a1);
void __cdecl sub_1001A270(int a1, DWORD *a2, _DWORD *a3);
int __cdecl sub_1001A380(int *a1, int a2, int a3);
void __cdecl sub_1001A4A0(_DWORD *a1, int a2, void *a3, void *a4, unsigned int a5);
int __cdecl sub_1001A550(int a1, char a2);
int __cdecl sub_1001A650(int a1);
// void __usercall __spoils<ecx> sub_1001A6B0(int a1@<eax>);
int __cdecl sub_1001A6C0(int a1);
signed int sub_1001A940();
// char __usercall sub_1001ADE0@<al>(int a1@<edi>);
int __thiscall sub_1001BE90(char *this);
void Initialize();
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
int __thiscall sub_1001C000(_DWORD *this);
signed int __fastcall sub_1001C030(int a1);
void __thiscall sub_1001C070(_DWORD *this);
// _DWORD __thiscall std::locale::~locale(std::locale *__hidden this); idb
void *__thiscall sub_1001C0A0(void *this, char a2);
char sub_1001C0C0();
signed int sub_1001C0D0();
_DWORD *__thiscall sub_1001C0E0(_DWORD **this, _DWORD *a2);
void *__thiscall sub_1001C120(void *this, char a2);
int __cdecl F_ptrCorrection_(int addr);
int sub_1001C1A0();
int sub_1001C950();
int sub_1001CFD0();
BOOL __cdecl sub_1001D170(DWORD flOldProtect, char a2);
char *__cdecl sub_1001D1B0(char *a1, unsigned int a2, char *a3, int a4, char *a5, int a6);
int __cdecl sub_1001D200(_BYTE *a1, int a2, int a3, int a4, int a5, int a6);
int __cdecl sub_1001D260(int, int, int, int, int, int, int, float, char); // idb
signed int F_initFunc1_TeamChecker();
_DWORD *__cdecl sub_1001D4D0(const void *a1, int a2, int a3, int a4);
int __cdecl F_writeMem32(DWORD addr, int old32, int new32);
int __cdecl F_writeMem24(DWORD addr, int old24, int new24);
int __cdecl F_writeMemUnk(DWORD addr, int oldBytes, int newBytes);
int __cdecl func_writeMem16(int addr, WORD old16, __int16 new16);
int __cdecl F_writeMem8(int addr, DWORD old8, char new8);
void F_initFunc31_end_err_chk();
int __thiscall sub_1001DD90(std::ios_base *this);
int __thiscall sub_1001DDB0(_DWORD *this);
void *__thiscall sub_1001DDF0(void *this, char a2);
_DWORD *__thiscall sub_1001DE10(_DWORD **this, _DWORD *a2);
_DWORD *__cdecl sub_1001DE70(_DWORD *a1, _DWORD *a2, _DWORD *a3);
_DWORD *__cdecl sub_1001DEB0(_DWORD *a1, _DWORD *a2, _DWORD *a3);
_DWORD *__thiscall sub_1001DEF0(_DWORD *this, int a2, char a3, int a4);
int __thiscall sub_1001DFD0(int this, unsigned __int8 a2);
_BYTE *__thiscall sub_1001DFF0(char *this, _BYTE *a2, _BYTE *a3);
int __thiscall sub_1001E020(int this, unsigned __int8 a2);
_BYTE *__thiscall sub_1001E040(char *this, _BYTE *a2, _BYTE *a3);
int __stdcall sub_1001E080(const void *a1, int a2, void *a3);
int __stdcall sub_1001E0C0(const void *a1, int a2, int a3, void *a4);
signed int __cdecl sub_1001E0F0(_DWORD *a1);
void *__thiscall sub_1001E160(void *this, char a2);
void __thiscall sub_1001E180(void *this);
int __thiscall sub_1001E1C0(_DWORD *this);
signed int __stdcall sub_1001E230(int a1);
signed int sub_1001E240();
void *__thiscall sub_1001E250(void *this, int a2, int a3);
int sub_1001E260();
int __thiscall sub_1001E2B0(_DWORD **this, _BYTE *a2, int a3);
int __thiscall sub_1001E350(_DWORD **this, unsigned __int8 *a2, signed int a3);
_DWORD *__stdcall sub_1001E400(_DWORD *a1, int a2, int a3, int a4);
_DWORD *__stdcall sub_1001E430(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8);
char *__thiscall sub_1001E460(std::ios_base *this, char a2);
char *__thiscall sub_1001E490(std::ios_base *this, char a2);
void *__thiscall sub_1001E4C0(void *this, char a2);
_DWORD *__thiscall sub_1001E4E0(std::ios_base *this, char a2);
_DWORD *__thiscall sub_1001E510(_DWORD *this);
std::locale::facet *__cdecl sub_1001E570(std::locale *a1);
_DWORD *__thiscall sub_1001E680(_DWORD *this, int a2);
_DWORD *__thiscall sub_1001E700(_DWORD *this, int a2);
signed int __stdcall sub_1001E770(int a1, int a2, int a3, _DWORD *a4, int a5, int a6, _DWORD *a7);
signed int __stdcall sub_1001E790(int a1, int a2, int a3, int a4);
int __stdcall sub_1001E7A0(int a1, int a2, int a3, unsigned int a4);
void *__thiscall sub_1001E7C0(void *this, char a2);
_DWORD *__cdecl sub_1001E7E0(_DWORD *a1, _DWORD *a2, _DWORD *a3);
char *__thiscall sub_1001E820(char *this);
std::_String_base *__thiscall sub_1001E880(std::_String_base *this, unsigned int a2, unsigned int a3);
void __thiscall sub_1001E900(_DWORD *this, char a2, unsigned int a3);
_DWORD *__thiscall sub_1001E960(_DWORD *this, int a2);
int __thiscall sub_1001E9F0(int this);
_DWORD *__thiscall sub_1001EA10(_DWORD *this);
_BYTE *__thiscall sub_1001EA80(_DWORD *this, unsigned int a2, unsigned int a3);
int __thiscall sub_1001EBC0(_DWORD **this, int a2);
signed int __cdecl sub_1001EC70(_DWORD *a1);
signed int __cdecl sub_1001ECE0(_DWORD *a1);
_DWORD *__cdecl sub_1001ED50(_DWORD *a1, _DWORD *a2, _DWORD *a3);
int __thiscall sub_1001ED90(int this);
int __thiscall sub_1001EDC0(_DWORD *this, char *a2, size_t a3);
signed int __thiscall sub_1001EE10(_DWORD *this);
signed int __thiscall sub_1001EE40(int this, int a2);
// int __thiscall std::basic_streambuf<char,std::char_traits<char>>::_Gndec(_DWORD); weak
int __thiscall sub_1001EEF0(_DWORD *this);
_DWORD *__thiscall sub_1001EF40(_DWORD *this, int a2);
void __thiscall sub_1001EFB0(char **this);
int __cdecl sub_1001F020(int a1, const char *a2);
std::locale::facet *__cdecl sub_1001F230(std::locale *a1);
std::locale::facet *__cdecl sub_1001F340(std::locale *a1);
void *__thiscall sub_1001F460(void *this, char a2);
_BYTE *__thiscall sub_1001F480(_BYTE *this, int a2);
_BYTE *__thiscall sub_1001F5F0(_BYTE *this, int a2);
char *__thiscall sub_1001F760(char *this, unsigned __int8 a2);
_DWORD *__thiscall sub_1001F880(_DWORD *this, std::locale *a2);
// std::_String_base *__userpurge sub_1001F8A0@<eax>(std::_String_base *this@<ecx>, int a2@<ebx>, unsigned int a3, char a4);
std::_String_base *__thiscall sub_1001F970(std::_String_base *this, std::_String_base *a2, unsigned int a3, unsigned int a4);
int __stdcall sub_1001FA60(_DWORD *a1, _DWORD *a2, _DWORD *a3);
_DWORD *__thiscall sub_1001FA90(_DWORD *this, char *a2, int a3, int a4);
std::_String_base *__fastcall sub_1001FBC0(std::_String_base *this, int a2, char *a3, unsigned int a4);
int __thiscall sub_1001FCB0(int this, std::_String_base *a2);
int __thiscall sub_1001FCE0(_DWORD *this);
std::_String_base *__thiscall sub_1001FEA0(std::_String_base *this, char *a2);
_DWORD *__thiscall sub_1001FED0(_DWORD *this, int a2, int a3);
char __thiscall sub_1001FFB0(_DWORD *this);
_DWORD *__thiscall sub_10020100(void *this, _DWORD *a2, int a3, int a4, int a5, int a6, unsigned __int8 a7);
_BYTE *__thiscall sub_10020330(_DWORD *this, unsigned __int8 a2);
_DWORD *__cdecl sub_10020390(int a1, _DWORD *a2, int a3, _DWORD *a4, unsigned __int8 a5, int a6);
int __thiscall sub_10020400(void *this, int a2);
int __thiscall sub_10020420(void *this, int a2);
std::locale::facet *__cdecl sub_10020440(std::locale *a1);
signed int __cdecl sub_10020550(_DWORD *a1);
char __thiscall sub_10020600(_BYTE *this);
char __thiscall sub_10020610(_BYTE *this);
void *__thiscall sub_10020620(void *this, char a2);
void __thiscall sub_10020640(void **this);
void __thiscall sub_10020690(void **this);
_BYTE *__thiscall sub_100206C0(_DWORD *this, int a2);
_BYTE *__cdecl sub_100207A0(const char *a1);
int __thiscall sub_100207E0(int this, char *a2);
_DWORD *__thiscall sub_10020820(_DWORD *this, std::_String_base *a2);
void __thiscall sub_10020880(void **this);
signed int __thiscall sub_100208C0(_DWORD **this, signed int a2);
_DWORD *__thiscall sub_10020B30(_DWORD *this, _DWORD *a2, int a3, int a4, int a5);
_DWORD *__thiscall sub_10020C70(_DWORD *this, _DWORD *a2, int a3, int a4, fpos_t a5, int a6, int a7, int a8);
_DWORD *__thiscall sub_10020D80(_DWORD *this);
int __thiscall sub_10020DE0(void *this, int a2, int a3, int a4, int a5, int a6, int a7);
_BYTE *__cdecl sub_10020E40(int a1, _BYTE *a2, _BYTE *a3, __int16 a4);
int __cdecl sub_10020ED0(int, int, int, int, int, int, void *, size_t); // idb
int __cdecl sub_10021160(int, int, int, int, void *, size_t, int); // idb
int __thiscall sub_10021230(void *this, int a2);
int __thiscall sub_10021250(int, int, int, int, int, int, int); // idb
int __thiscall sub_100212B0(int, int, int, int, int, int, int, int); // idb
int __thiscall sub_10021320(int, int, int, int, int, int, int, int); // idb
int __thiscall sub_10021390(void *this, int a2, int a3, int a4, int a5, int a6, double a7);
_BYTE *__cdecl sub_100214F0(int a1, _BYTE *a2, char a3, __int16 a4);
int __cdecl sub_10021550(int, int, int, int, int, int, void *, int, int, int, size_t); // idb
std::_String_base *__thiscall sub_10021B00(std::_String_base *this, unsigned int a2, unsigned int a3, char a4);
std::_String_base *__fastcall sub_10021C20(std::_String_base *this, int a2, char *a3, unsigned int a4);
std::_String_base *__thiscall sub_10021D30(std::_String_base *this, _DWORD *a2, unsigned int a3, unsigned int a4);
int __thiscall sub_10021E20(void *this, int a2, int a3, int a4, int a5, int a6, double a7);
int __thiscall sub_10021FC0(int, int, int, int, int, int, int); // idb
void __fastcall __noreturn sub_10022010(int a1, int a2);
exception *__thiscall sub_10022080(exception *this, struct exception *a2);
int __thiscall sub_100220F0(_DWORD *this, int a2);
int __thiscall sub_10022140(_DWORD *this, int a2);
int __thiscall sub_10022190(_DWORD *this, int a2);
exception *__thiscall sub_100221E0(exception *this, struct exception *a2);
// _DWORD __thiscall std::locale::_Locimp::~_Locimp(std::locale::_Locimp *__hidden this); idb
// int __stdcall sub_100222B0(int, int, void *); idb
_DWORD *__thiscall sub_10022520(_DWORD *this, char *a2, int a3, int a4, int a5);
int __thiscall sub_10022620(_DWORD *this);
_DWORD *__thiscall sub_100226D0(_DWORD *this, void *a2);
_DWORD *__thiscall sub_10022740(std::ios_base *this, char a2);
BOOL sub_10022790();
char __cdecl sub_10022880(int a1);
LRESULT __cdecl sub_10022940(HWND hWnd, int a2);
char sub_10022A40();
void __spoils<ecx> sub_10022AA0();
int sub_10022AB0();
int sub_10022CB0();
int sub_10022D40(); // weak
int __fastcall sub_10022D50(int a1, int a2);
int __fastcall sub_10022D60(int a1, int a2);
int sub_10022D70();
int __fastcall sub_10022DE0(int a1, int a2);
BOOL __cdecl sub_10022DF0(HWND hwnd, WINDOWPLACEMENT *lpwndpl);
signed int sub_10022FE0();
signed int sub_10023220();
BOOL sub_10023260();
int sub_10023310();
int sub_10023400(); // weak
int __cdecl sub_10023410(int a1, int a2);
int __cdecl sub_10023490(_DWORD *a1, _DWORD *a2);
// int __usercall sub_100234C0@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edx>);
int sub_100234E0();
int sub_10023510(); // weak
int sub_10023520();
char __cdecl sub_10023590(int a1, int a2);
// char __usercall sub_100236B0@<al>(int a1@<eax>, int a2@<edx>);
signed int __cdecl sub_100236D0(int a1);
// signed int __usercall sub_10023710@<eax>(int a1@<eax>);
int __cdecl sub_10023730(_DWORD *a1);
int __stdcall sub_100237F0(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam); // idb
int __stdcall sub_10023FF0(int nCode, WPARAM wParam, LPARAM lParam); // idb
signed int sub_10024140();
// int __usercall sub_10024560@<eax>(void *a1@<ecx>, int a2@<edi>);
// int __usercall sub_100245F0@<eax>(void *a1@<ecx>, int a2@<edi>);
int F_initFunc10_gameFixes2();
// HRESULT __stdcall DirectDrawCreate(GUID *lpGUID, LPDIRECTDRAW *lplpDD, IUnknown *pUnkOuter);
// IDirect3D9 *__stdcall Direct3DCreate9(UINT SDKVersion);
// int __stdcall D3DXMatrixMultiply(_DWORD, _DWORD, _DWORD); weak
// int __stdcall D3DXMatrixTranslation(_DWORD, _DWORD, _DWORD, _DWORD); weak
// int __stdcall D3DXMatrixOrthoOffCenterLH(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// int __cdecl tolower(int);
// char *__cdecl strncat(char *, const char *, size_t);
void __cdecl j__free(void *);
// void *__cdecl operator new(unsigned int); idb
// int sprintf(char *, const char *, ...);
// int __cdecl __CxxFrameHandler(struct EHExceptionRecord *, struct EHRegistrationNode *, struct _CONTEXT *, void *); idb
// void __stdcall `eh vector destructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *)); idb
// void __stdcall `eh vector constructor iterator'(void *, unsigned int, int, void (__thiscall *)(void *), void (__thiscall *)(void *)); idb
// int __cdecl isdigit(int);
// int __cdecl isprint(int);
int __cdecl j__atol(const char *);
// char *__cdecl strncpy(char *, const char *, size_t);
// void *__cdecl malloc(size_t);
// void __cdecl free(void *);
// char *__cdecl strchr(const char *, int);
// int __cdecl strncmp(const char *, const char *, size_t);
// int __cdecl fputc(int, FILE *);
// int __cdecl fclose(FILE *);
// FILE *__cdecl fopen(const char *, const char *);
// void *__cdecl realloc(void *, size_t);
// void *__cdecl memcpy(void *, const void *, size_t);
void __cdecl j_j__free(void *);
void *__cdecl operator new(unsigned int); // idb
_DWORD *__thiscall sub_100260C7(_DWORD *this);
// _DWORD __thiscall exception::exception(exception *this, const char *const *); idb
// _DWORD __thiscall exception::exception(exception *this, const struct exception *); idb
void __thiscall sub_1002615F(void *this);
exception *__thiscall sub_10026182(exception *this, char *a2);
exception *__thiscall sub_1002619B(exception *this, struct exception *a2);
void __thiscall sub_100261B3(void *this);
void *__thiscall sub_100261BE(void *this, char a2);
void *__thiscall sub_100261DA(void *this, char a2);
// void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD); weak
// int __cdecl setvbuf(FILE *, char *, int, size_t);
// _DWORD __cdecl flsall(_DWORD); weak
// int __cdecl fflush(FILE *);
int sub_1002651E();
// int __cdecl ungetc_0(int, FILE *);
// int __cdecl fgetc(FILE *);
// size_t __cdecl fwrite(const void *, size_t, size_t, FILE *);
size_t __cdecl sub_1002672F(void *a1, size_t a2, size_t a3, FILE *a4);
void **sub_1002677B();
// int __cdecl fgetpos(FILE *, fpos_t *);
// int __cdecl fseek(FILE *, int, int);
// int __cdecl fsetpos(FILE *, const fpos_t *);
// void *__cdecl memchr(const void *, int, size_t);
// size_t __cdecl strcspn(const char *, const char *);
// int __cdecl atexit(void (__cdecl *)());
int sub_10027153();
void *sub_10027159();
int sub_100272F0();
// int __cdecl _flsbuf(int, FILE *);
// int __cdecl _output(FILE *, int, int); idb
// void __cdecl __noreturn terminate(); idb
void __noreturn sub_10029675();
// _DWORD __cdecl _lock_file(_DWORD); weak
// _DWORD __cdecl _unlock_file(_DWORD); weak
// LONG __stdcall __CxxUnhandledExceptionFilter(struct _EXCEPTION_POINTERS *ExceptionInfo); idb
int sub_1002B1A6();
LPTOP_LEVEL_EXCEPTION_FILTER sub_1002B1B9();
void sub_1002C475();
void __cdecl sub_1002C4B9(); // idb
wchar_t *sub_1002CD79();
// _DWORD __cdecl _ld12cvt(_DWORD, _DWORD, _DWORD); weak
int __cdecl sub_1002ED9D(int a1, int a2);
int __cdecl sub_1002EDB3(int a1, int a2);
int __cdecl sub_1002EDC9(int a1, int a2);
int __cdecl sub_1002EE06(int a1, int a2);
// void __cdecl __noreturn abort();
// _DWORD __cdecl __strgtold12(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); weak
// _Ctypevec *__cdecl _Getctype(_Ctypevec *__return_ptr __struct_ptr retstr);
// int __cdecl _Tolower(int, const _Ctypevec *);
// _Cvtvec __cdecl _Getcvt();
// _DWORD __thiscall std::_Init_locks::_Init_locks(std::_Init_locks *__hidden this); idb
// _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *this, int); idb
// _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this); idb
// int tidy_global(); weak
int __cdecl sub_10031A33(int a1);
// const struct std::locale::facet *__thiscall std::locale::_Getfacet(std::locale *this, unsigned int); idb
// void __thiscall std::locale::facet::_Register(std::locale::facet *__hidden this); idb
// _DWORD __thiscall std::_Locinfo::~_Locinfo(std::_Locinfo *this); idb
// _DWORD __thiscall std::_Locinfo::_Locinfo(std::_Locinfo *this, const char *); idb
// _DWORD __thiscall std::locale::locale(std::locale *__hidden this); idb
// _DWORD __thiscall std::ios_base::~ios_base(std::ios_base *this); idb
void __thiscall sub_10031E3D(_DWORD *this);
void *__thiscall sub_10031E68(void *this, char a2);
_DWORD *__thiscall sub_10031E84(_DWORD *this, std::_String_base *a2);
void *__thiscall sub_10031EC0(void *this, char a2);
void __thiscall sub_10031EDC(_DWORD *this);
// void __thiscall std::ios_base::clear(std::ios_base *this, int, bool); idb
exception *__thiscall sub_10031FAD(exception *this, struct exception *a2);
exception *__thiscall sub_10031FF0(exception *this, struct exception *a2);
// void __thiscall std::ios_base::_Init(std::ios_base *this); idb
// _DWORD __thiscall std::_Mutex::_Mutex(std::_Mutex *__hidden this); idb
// _DWORD __thiscall std::_Mutex::~_Mutex(std::_Mutex *__hidden this); idb
void __thiscall sub_1003207B(LPCRITICAL_SECTION *this);
void __thiscall sub_10032084(LPCRITICAL_SECTION *this);
// int __cdecl _Toupper(int, const _Ctypevec *);
void *__thiscall sub_10032219(void *this, char a2);
void __thiscall sub_10032235(void **this);
// void __thiscall std::_String_base::_Xran(std::_String_base *__hidden this); idb
exception *__thiscall sub_10032280(exception *this, struct exception *a2);
// void __thiscall std::_String_base::_Xlen(std::_String_base *__hidden this); idb
bool __cdecl __uncaught_exception(); // idb
// struct _iobuf *__cdecl std::_Fiopen(const char *, int, int); idb
void __cdecl sub_1003238A(LPCRITICAL_SECTION lpCriticalSection);
void __cdecl sub_10032395(LPCRITICAL_SECTION lpCriticalSection);
void __cdecl sub_100323A0(LPCRITICAL_SECTION lpCriticalSection);
int __cdecl __noreturn sub_100323AB(int a1);
// _DWORD __thiscall _Init_atexit::~_Init_atexit(_Init_atexit *__hidden this); idb
int __cdecl SEH_10004A30(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10005DF0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_100069C0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10006FE0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10007CF0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_100080B0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
// void __usercall sub_100324C6(int a1@<ebp>);
int __cdecl sub_100324D1(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10008A20(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10008E20(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10009070(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10009580(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001ADE0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001DEF0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001ECE0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10020440(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001E700(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001EFB0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001EA10(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001EA80(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001F020(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001F480(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001F5F0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001F760(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001FA90(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001FED0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10020100(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10020550(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10020640(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_100206C0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001FFB0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10021550(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10022010(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10020820(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10022200(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_100222B0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10022520(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_10022620(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
int __cdecl SEH_1001D840(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4);
_DWORD *sub_10032A90();
int sub_10032AD0();
int sub_10032ADC();
int sub_10032AF2();
int sub_10032AFE();
int sub_10032B14();
void __cdecl sub_10032B20(); // idb
void __cdecl sub_10032B51(); // idb
void __cdecl sub_10032B5B(); // idb
void __cdecl sub_10032B65(); // idb
void __cdecl sub_10032B6F(); // idb
// LONG __stdcall InterlockedDecrement(volatile LONG *lpAddend);
// FARPROC __stdcall GetProcAddress(HMODULE hModule, LPCSTR lpProcName);
// HMODULE __stdcall LoadLibraryA(LPCSTR lpLibFileName);
// DWORD __stdcall GetCurrentDirectoryA(DWORD nBufferLength, LPSTR lpBuffer);
// BOOL __stdcall WritePrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpString, LPCSTR lpFileName);
// UINT __stdcall GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault, LPCSTR lpFileName);
// BOOL __stdcall WritePrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
// DWORD __stdcall GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize, LPCSTR lpFileName);
// DWORD __stdcall GetFileAttributesA(LPCSTR lpFileName);
// BOOL __stdcall GetPrivateProfileStructA(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct, UINT uSizeStruct, LPCSTR szFile);
// BOOL __stdcall CreateDirectoryA(LPCSTR lpPathName, LPSECURITY_ATTRIBUTES lpSecurityAttributes);
// DWORD __stdcall GetTickCount();
// BOOL __stdcall VirtualProtect(LPVOID lpAddress, SIZE_T dwSize, DWORD flNewProtect, PDWORD lpflOldProtect);
// void __stdcall DeleteCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// void __stdcall LeaveCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// void __stdcall EnterCriticalSection(LPCRITICAL_SECTION lpCriticalSection);
// LPTOP_LEVEL_EXCEPTION_FILTER __stdcall SetUnhandledExceptionFilter(LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);
// HRESULT __stdcall HashData(LPBYTE pbData, DWORD cbData, LPBYTE pbHash, DWORD cbHash);
// BOOL __stdcall GetClientRect(HWND hWnd, LPRECT lpRect);
// BOOL __stdcall GetCursorPos(LPPOINT lpPoint);
// LONG __stdcall ChangeDisplaySettingsA(DEVMODEA *lpDevMode, DWORD dwFlags);
// BOOL __stdcall EnumDisplaySettingsA(LPCSTR lpszDeviceName, DWORD iModeNum, DEVMODEA *lpDevMode);
// BOOL __stdcall ClipCursor(const RECT *lpRect);
// BOOL __stdcall ClientToScreen(HWND hWnd, LPPOINT lpPoint);
// HWND __stdcall CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
// LRESULT __stdcall CallNextHookEx(HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
// SHORT __stdcall GetAsyncKeyState(int vKey);
// BOOL __stdcall IsIconic(HWND hWnd);
// BOOL __stdcall SetForegroundWindow(HWND hWnd);
// LONG __stdcall GetWindowLongA(HWND hWnd, int nIndex);
// HCURSOR __stdcall LoadCursorA(HINSTANCE hInstance, LPCSTR lpCursorName);
// HCURSOR __stdcall SetCursor(HCURSOR hCursor);
// int __stdcall ShowCursor(BOOL bShow);
// BOOL __stdcall GetUpdateRect(HWND hWnd, LPRECT lpRect, BOOL bErase);
// LRESULT __stdcall DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
// BOOL __stdcall SetCursorPos(int X, int Y);
// BOOL __stdcall UpdateWindow(HWND hWnd);
// HWND __stdcall SetFocus(HWND hWnd);
// int __stdcall MessageBoxA(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);
// LONG __stdcall SetWindowLongA(HWND hWnd, int nIndex, LONG dwNewLong);
// BOOL __stdcall SetWindowPos(HWND hWnd, HWND hWndInsertAfter, int X, int Y, int cx, int cy, UINT uFlags);
// BOOL __stdcall ShowWindow(HWND hWnd, int nCmdShow);
// BOOL __stdcall GetWindowInfo(HWND hwnd, PWINDOWINFO pwi);
// BOOL __stdcall CopyRect(LPRECT lprcDst, const RECT *lprcSrc);
// BOOL __stdcall AdjustWindowRectEx(LPRECT lpRect, DWORD dwStyle, BOOL bMenu, DWORD dwExStyle);
// int __stdcall GetSystemMetrics(int nIndex);
// BOOL __stdcall SetWindowPlacement(HWND hWnd, const WINDOWPLACEMENT *lpwndpl);
// DWORD __stdcall MsgWaitForMultipleObjectsEx(DWORD nCount, const HANDLE *pHandles, DWORD dwMilliseconds, DWORD dwWakeMask, DWORD dwFlags);
// BOOL __stdcall PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);
// BOOL __stdcall TranslateMessage(const MSG *lpMsg);
// LRESULT __stdcall DispatchMessageA(const MSG *lpMsg);
// BOOL __stdcall GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
// BOOL __stdcall GetWindowPlacement(HWND hWnd, WINDOWPLACEMENT *lpwndpl);
// LRESULT __stdcall SendMessageA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);

//-------------------------------------------------------------------------
// Data declarations

int dword_10004770[12] =
{
  611647286,
  1962882580,
  4281734180,
  907289716,
  337933567,
  611647286,
  4289914900,
  3230007295,
  3422557378,
  3435973836,
  3435973836,
  3435973836
}; // weak
int dword_1000FB30[8] =
{
  611647286,
  1962882568,
  1397819428,
  3186118738,
  2214592511,
  146938052,
  3435973632,
  3435973836
}; // weak
int dword_100109E0[8] =
{
  609520438,
  1381064736,
  4289914967,
  3296985087,
  3435356428,
  3435973836,
  3435973836,
  3435973836
}; // weak
int dword_10010EA0[8] =
{
  611647286,
  1962882568,
  1397819428,
  3186118738,
  2214592511,
  146938052,
  3435973632,
  3435973836
}; // weak
int dword_10010EC0[6] = { 611647286, 1962882568, 1397819428, 2649247826, 2214592511, 227219652 }; // weak
int dword_10011080[8] =
{
  611647286,
  1962882568,
  1397819428,
  2649247826,
  2214592510,
  146938052,
  3435973632,
  3435973836
}; // weak
int dword_10012150[2] = { 613714742, 160 }; // weak
int dword_10012480[11] =
{
  604275510,
  1448433201,
  4287817813,
  3296985087,
  2338217224,
  868234184,
  16352210,
  1623392628,
  1508398422,
  2214592455,
  361433284
}; // weak
int dword_10013B20[8] =
{
  611647286,
  1962882568,
  1397819428,
  2917683282,
  2214592511,
  146938052,
  3435973632,
  3435973836
}; // weak
int dword_10013B80[8] =
{
  611647286,
  1962882568,
  1397819428,
  2917683282,
  2214592511,
  146938052,
  3435973632,
  3435973836
}; // weak
int dword_10014FA0[8] =
{
  611647286,
  1962882568,
  1397819428,
  4294938600,
  281314303,
  3422554306,
  3435973836,
  3435973836
}; // weak
int dword_10014FF0[8] =
{
  611647286,
  1962882568,
  1397819428,
  3454554194,
  2214592511,
  146938052,
  3435973632,
  3435973836
}; // weak
int dword_100172E0[5] = { 611647286, 1962882568, 1397819428, 1196008, 281314048 }; // weak
int dword_10018580[8] =
{
  611647286,
  1962882568,
  1397819428,
  4294942696,
  281314303,
  3422554306,
  3435973836,
  3435973836
}; // weak
int (__thiscall *off_10034CB0)(void *, char) = &sub_100062F0; // weak
int (__thiscall *off_10034CF8)(void *, char) = &sub_10009510; // weak
int (__thiscall *off_10034D40)(void *, char) = &sub_10009560; // weak
int (__thiscall *off_10034D88)(void *, char) = &sub_10009630; // weak
int (__thiscall *off_10034DD0)(void *, char) = &sub_100098E0; // weak
int (__thiscall *off_10034E68)(void *, char) = &sub_100098E0; // weak
int (__thiscall *off_10034EB0)(void *, char) = &sub_100097A0; // weak
int (__thiscall *off_10034EF8)(void *, char) = &sub_100097F0; // weak
int (__stdcall *off_100360FC)(char) = &sub_1001E460; // weak
int (__thiscall *off_10036100)(void *, char) = &sub_1001DDF0; // weak
int (__stdcall *off_10036104[2])(char) = { &sub_1001E490, &sub_1001E4E0 }; // weak
int (__stdcall *off_10036108)(char) = &sub_1001E4E0; // weak
int (__thiscall *off_1003610C)(void *, char) = &sub_1001E160; // weak
int (__thiscall *off_10036134)(void *, char) = &sub_1001E4C0; // weak
int (__thiscall *off_10036174)(void *, char) = &sub_1001E7C0; // weak
int (__thiscall *off_10036198)(void *, char) = &sub_1001E7C0; // weak
int (__thiscall *off_100361B8)(void *, char) = &sub_10022290; // weak
_UNKNOWN unk_100361EC; // weak
_UNKNOWN unk_100361F4; // weak
int (__thiscall *off_100361FC)(void *, char) = &sub_10020620; // weak
_UNKNOWN unk_10036258; // weak
_UNKNOWN unk_1003625C; // weak
int (__stdcall *off_10036278)(char) = &sub_10022740; // weak
_UNKNOWN unk_1003627C; // weak
_UNKNOWN unk_10036284; // weak
_UNKNOWN unk_100362B9; // weak
_UNKNOWN unk_10036460; // weak
_UNKNOWN unk_10036461; // weak
_UNKNOWN unk_10036462; // weak
_UNKNOWN unk_10036463; // weak
_UNKNOWN unk_10036464; // weak
_UNKNOWN unk_10036500; // weak
void *exception::`vftable' = &sub_100261BE; // weak
void *bad_cast::`vftable' = &sub_100261DA; // weak
void *std::locale::facet::`vftable' = &sub_1001C0A0; // weak
void *std::runtime_error::`vftable' = &sub_10031E68; // weak
void *std::ios_base::failure::`vftable' = &sub_10031EC0; // weak
void *std::logic_error::`vftable' = &sub_1001F460; // weak
void *std::length_error::`vftable' = &sub_1001F460; // weak
void *std::out_of_range::`vftable' = &sub_10032219; // weak
_UNKNOWN unk_10038CD4; // weak
_UNKNOWN unk_10038CDC; // weak
int _TI2_AVbad_cast__ = 0; // weak
int _TI3_AVlength_error_std__ = 0; // weak
char byte_1003B060 = '\x01'; // weak
int FOWLightLevel = 4096; // weak
int dword_1003B06C = 480; // weak
int dword_1003B070 = 400; // weak
int dword_1003B078[] = { 0 }; // weak
int dword_1003B080[15] =
{
  4294967295,
  1,
  0,
  4294967295,
  1,
  1,
  0,
  1,
  0,
  1,
  0,
  4294967295,
  1,
  4294967295,
  4294967295
}; // idb
int dword_1003B0C0[] = { 0 }; // weak
int dword_1003B0C4 = 4294967096; // weak
int dword_1003B0C8[] = { 4294967295 }; // weak
int dword_1003B0CC = 200; // weak
int dword_1003B0D8 = 200; // weak
int dword_1003B0DC = 200; // weak
int dword_1003B0E4 = 200; // weak
int dword_1003B0F4 = 4294967096; // weak
int dword_1003B0FC = 4294967096; // weak
int dword_1003B100 = 4294967096; // weak
int dword_1003B108 = 4294967295; // weak
int dword_1003B10C = 4294967295; // weak
int dword_1003B110 = 639; // weak
int dword_1003B114 = 4294967295; // weak
int dword_1003B118 = 4294967295; // weak
int dword_1003B11C = 4294967295; // weak
int iface_bar_width = 640; // weak
int iface_bar_width_1 = 640; // weak
int dword_1003B128 = 256; // weak
int dword_1003B12C = 100; // weak
char alternate_ammo_light = 'Ä'; // weak
char alternate_ammo_dark = 'K'; // weak
int dword_1003B134 = 4294967295; // weak
_UNKNOWN unk_1003B138; // weak
_UNKNOWN unk_1003B150; // weak
int dword_1003B168 = 2000; // idb
int dword_1003B16C = 4294967295; // weak
int dword_1003B170 = 4294967295; // weak
_DWORD dword_1003B174[3] = { 4294967295, 4294967295, 4294967295 }; // idb
int dword_1003B180 = 4294967295; // weak
char byte_1003B1F8 = '\x01'; // weak
int scr_width = 640; // idb
int newBytes = 480; // idb
int colour_bits = 8; // idb
float flt_1003B208 =  1.0; // weak
float flt_1003B20C =  1.0; // weak
CHAR WindowName[] = "Fallout"; // idb
int dword_1003B218 = 98; // weak
CHAR ClassName[] = "GNW95 Class"; // idb
int dword_1003B228 = 13565952; // weak
DWORD dwStyle = 13565952u; // idb
_UNKNOWN unk_1003B230; // weak
char byte_1003B238 = '\x01'; // weak
void **off_1003B2C0 = &off_1003B290; // weak
int (*off_1003B4E4)(void) = &terminate; // weak
wchar_t *off_1003BC10 = L"         (((((                  H"; // weak
_UNKNOWN unk_1003BD30; // weak
_UNKNOWN unk_1003BD48; // weak
volatile LONG Addend = 4294967295; // idb
int dword_1003C260 = 10; // weak
LPCSTR lpText = NULL; // idb
LPCSTR lpFileName = NULL; // idb
HMODULE hModule = NULL; // idb
HMODULE dword_1003C2EC = NULL; // idb
int (__cdecl *dword_1003C2F0)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int dword_1003C2F8[256] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
}; // idb
int IDA__GNW95_DDObject = 0; // weak
int IDA__GNW95_DDPrimarySurface = 0; // weak
int IDA__GNW95_DDRestoreSurface = 0; // weak
int IDA__GNW95_DDPrimaryPalette = 0; // weak
IUnknown *pUnkOuter = NULL; // idb
int dword_1003C70C = 0; // weak
int dword_1003C710 = 0; // weak
int dword_1003C714 = 0; // weak
int (__cdecl *dword_1003C718)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD) = NULL; // weak
int dword_1003C720 = 0; // weak
int dword_1003C728 = 0; // weak
int dword_1003C72C = 0; // weak
int dword_1003C730 = 0; // weak
void *dword_1003C744 = NULL; // idb
int dword_1003C774 = 0; // weak
int dword_1003C790 = 0; // weak
int dword_1003C798 = 0; // weak
int dword_1003C79C = 0; // weak
int dword_1003C7A0 = 0; // weak
void *dword_1003C7B4 = NULL; // idb
int dword_1003C7E4 = 0; // weak
int dword_1003C7FC = 0; // weak
int dword_1003C800 = 0; // weak
int dword_1003C804 = 0; // weak
int dword_1003C808 = 0; // weak
int dword_1003C80C = 0; // weak
int IDA__GNW95_DDObject__1 = 0; // weak
int IDA__GNW95_DDPrimarySurface__1 = 0; // weak
int IDA__GNW95_DDRestoreSurface__1 = 0; // weak
int IDA__GNW95_DDPrimaryPalette__1 = 0; // weak
char byte_1003C820 = '\0'; // weak
int dword_1003C824 = 0; // weak
char byte_1003C828 = '\0'; // weak
int dword_1003C82C = 0; // weak
int IDA__doing_refresh_all = 0; // weak
void *dword_1003C83C = NULL; // idb
int dword_1003C848 = 0; // weak
int IDA__art__plus4 = 0; // weak
int (__fastcall *IDA_art_frame_data_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_art_frame_length_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_art_frame_width_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_art_ptr_lock_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int IDA_art_ptr_lock_data_ = 0; // weak
int (*IDA_art_ptr_unlock_)(void) = NULL; // weak
int (__fastcall *IDA_art_id_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int IDA__art = 0; // weak
int IDA_art_exists_ = 0; // weak
void *dword_1003C874 = NULL; // idb
char *dword_1003C878 = NULL; // idb
int (__fastcall *IDA_config_set_value_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_freadShortCount_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_freadByteCount_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_config_get_value_)(_DWORD, _DWORD) = NULL; // weak
int IDA_db_init_ = 0; // weak
int (__fastcall *IDA_db_freadIntCount_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_fread_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_fopen_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_config_get_string_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_freadInt_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_fseek_)(_DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_freadByte_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__fastcall *IDA_db_freadShort_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int (__cdecl *IDA_db_fclose_)(_DWORD) = NULL; // weak
int (__fastcall *IDA_MapDirErase_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int IDA_db_fwriteByte_ = 0; // weak
int IDA_db_fwriteShort_ = 0; // weak
int (__fastcall *IDA_db_fwriteInt_)(_DWORD, _DWORD, _DWORD) = NULL; // weak
int IDA__game_config = 0; // weak
int IDA__gconfig_file_name = 0; // weak
int IDA_db_get_file_list_ = 0; // weak
int IDA_db_free_file_list_ = 0; // weak
int IDA__map_elevation = 0; // weak
int IDA__tile_y = 0; // weak
int IDA__tile_mask = 0; // weak
int FOW_dword_1003C908[500] =
{
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  
}; // idb
int IDA__scroll_limiting_o; // weak
_DWORD IDA__grid_size; // idb
int IDA__square_offx; // weak
int IDA__tile_x; // weak
int IDA__tile_center_tile; // weak
int IDA__gmouse_current_cursor; // weak
int IDA__square_x; // weak
int IDA__grid_width; // weak
int IDA__square_size; // weak
int IDA__square_y; // weak
int IDA__square_offy; // weak
_UNKNOWN unk_1003D108; // weak
int dword_1003D130; // weak
int dword_1003D134; // weak
int dword_1003D138; // weak
int dword_1003D13C; // weak
int dword_1003D140; // weak
int dword_1003D144; // weak
int dword_1003D148; // weak
int dword_1003D14C; // weak
int dword_1003D150; // weak
int dword_1003D154; // weak
int dword_1003D158; // weak
int FOW_dword_1003D160[40000]; // idb
int IDA__grid_length; // weak
int dword_10064264; // weak
int dword_10064268; // weak
int dword_1006426C; // weak
int dword_10064270; // weak
_UNKNOWN unk_10064278; // weak
_UNKNOWN unk_100642A8; // weak
_UNKNOWN unk_100642C8; // weak
int dword_10064374; // weak
int IDA__scroll_blocking_on; // weak
int IDA__tile_offx; // weak
int IDA__tile_offy; // weak
int IDA__art_mapper_blank_tile; // weak
int IDA__refresh_enabled; // weak
int IDA__show_roof; // weak
int IDA__show_grid; // weak
int IDA_tile_num_; // weak
int IDA_grid_render_; // weak
int IDA_main_init_system_; // weak
int IDA_map_init_; // weak
int IDA_game_handle_input_; // weak
int IDA_map_new_map_; // weak
int IDA_map_load_dialog_; // weak
int IDA_map_load_; // weak
int IDA_map_save_as_; // weak
int IDA_intface_hide_; // weak
int IDA_gmouse_set_mapper_mode_; // weak
int IDA_intface_init_; // weak
int IDA_op_sub__3rdCall; // weak
int (__fastcall *IDA_light_get_tile_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_obj_render_object_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_obj_intersects_with_)(_DWORD, _DWORD); // weak
int IDA_obj_connect_to_tile_; // weak
int IDA_obj_bound_; // weak
int (__fastcall *IDA_floor_draw_)(_DWORD, _DWORD); // weak
int IDA__tile_refresh; // weak
int IDA_map_set_elevation_; // weak
int IDA_pick_hex_; // weak
int IDA_obj_blocking_at_; // weak
int (__cdecl *IDA_map_save_file_)(_DWORD); // weak
int (__fastcall *IDA_copy_file_)(_DWORD, _DWORD, _DWORD); // weak
int FOWEnable; // weak
void *dword_100643FC; // idb
char byte_10064400; // weak
bool edge_clipping_on;
int IDA__square_length; // weak
int IDA__square_width; // weak
int IDA__ambient_light; // weak
int IDA__tile_intensity; // weak
int IDA__objectTable; // weak
int FOW_dword_10064418; // weak
int IDA__squares; // weak
int IDA__display_buf; // weak
int IDA__map_display_rect; // weak
int IDA__buf; // weak
int IDA__buf_width_2; // weak
int IDA__buf_length_2; // weak
int IDA__buf_full_2; // weak
int IDA__buf_rect_2; // weak
int IDA__display_buffer; // weak
int IDA__display_width; // weak
int IDA__display_height; // weak
int IDA__back_buf; // weak
int IDA__buf_width; // weak
int IDA__buf_length; // weak
int IDA__buf_full; // weak
int IDA__buf_rect; // weak
int IDA__buf_size; // weak
int IDA__obj_dude; // weak
int IDA__main_ctd; // weak
int IDA__dialog_target; // weak
int IDA__obj_egg; // weak
char byte_10064470; // weak
int dword_10064474; // weak
int dword_10064478; // weak
int dword_1006447C; // weak
int dword_10064480; // weak
char byte_10064484; // weak
int IDA__map_name; // weak
int dword_1006448C; // weak
int dword_10064490; // weak
int dword_10064494; // weak
int (__cdecl *IDA_message_exit_)(_DWORD); // weak
int IDA_message_save_; // weak
int (__fastcall *IDA_message_load_)(_DWORD, _DWORD, _DWORD); // weak
int IDA__proto_msg_files; // weak
int IDA__protolists__plus12; // weak
int IDA__obj_mouse; // weak
int IDA__obj_mouse_flat; // weak
int IDA_proto_max_id_; // weak
int (__fastcall *IDA_proto_ptr_)(_DWORD, _DWORD, _DWORD); // weak
int IDA_object_under_mouse_; // weak
int (__cdecl *IDA_register_clear_)(_DWORD); // weak
int (__fastcall *IDA_obj_new_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_obj_move_to_tile_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_obj_erase_object_)(_DWORD, _DWORD, _DWORD); // weak
int IDA_obj_change_fid_; // weak
int IDA_scr_set_dude_script_; // weak
int IDA_scr_clear_dude_script_; // weak
int IDA_scr_init_; // weak
int IDA_scr_reset_; // weak
int IDA_scr_exit_; // weak
int IDA_scr_game_init_; // weak
int IDA_scr_game_reset_; // weak
int IDA_scr_game_exit_; // weak
int IDA_scr_message_free_; // weak
int (__fastcall *IDA_scr_ptr_)(_DWORD, _DWORD, _DWORD); // weak
int (__fastcall *IDA_obj_sid_)(_DWORD, _DWORD, _DWORD); // weak
int (*IDA_text_font_)(void); // weak
int IDA__curr_font_num; // weak
int IDA__text_to_buf; // weak
int IDA__text_height; // weak
int IDA__text_width; // weak
int IDA__text_char_width; // weak
int IDA__text_mono_width; // weak
int IDA__text_spacing; // weak
int IDA__text_size; // weak
int IDA__text_max; // weak
int (*IDA_win_draw_)(void); // weak
int (__cdecl *IDA_gmouse_set_cursor_)(_DWORD); // weak
int IDA__mouse_buttons; // weak
int (__fastcall *IDA_win_register_button_func_)(_DWORD, _DWORD, _DWORD); // weak
int (*IDA_win_hide_)(void); // weak
int IDA__num_windows; // weak
int IDA_gmouse_3d_toggle_mode_; // weak
int IDA_win_get_top_win_; // weak
int (__cdecl *IDA_loadColorTable_)(_DWORD); // weak
int IDA_gmouse_get_cursor_; // weak
int (*IDA_mouse_show_)(void); // weak
int (__fastcall *IDA_win_print_)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int IDA_mouse_get_rect_; // weak
int (__fastcall *IDA_GNW_win_refresh_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_win_register_button_)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD); // weak
int IDA__gCurrentFont; // weak
int IDA_refresh_game_; // weak
int (__fastcall *IDA_GNW_find_button_)(_DWORD, _DWORD, _DWORD); // weak
int (__cdecl *IDA_gsound_play_sfx_file_)(_DWORD); // weak
int (__fastcall *IDA_mouse_get_position_)(_DWORD, _DWORD); // weak
int (*IDA_palette_fade_to_)(void); // weak
int IDA_dialog_out_; // weak
int (__cdecl *IDA_win_refresh_all_)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
int (*IDA_win_show_)(void); // weak
int (*IDA_win_delete_)(void); // weak
int IDA__GNWWin; // weak
int (*IDA_mouse_hide_)(void); // weak
int (__cdecl *IDA_GNW_find_)(_DWORD); // weak
int (*IDA_palette_set_to_)(void); // weak
int (__cdecl *IDA_get_input_)(_DWORD); // weak
int IDA__window; // weak
int (__fastcall *IDA_win_register_button_sound_func_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_win_add_)(_DWORD, _DWORD, _DWORD, _DWORD); // weak
_DWORD IDA__screen_buffer; // idb
int IDA__edit_win; // weak
int IDA__select_window_id; // weak
int IDA__dialogueBackWindow; // weak
int IDA__gReplyWin; // weak
int IDA__gOptionWin; // weak
int IDA__dialogueWindow; // weak
int IDA__i_wid; // weak
int IDA__endgame_window; // weak
int IDA__interfaceWindow; // weak
int IDA__bar_window; // weak
int IDA__skldxwin; // weak
int IDA__lsgwin; // weak
int IDA__main_window; // weak
int IDA__prfwin; // weak
int IDA__pip_win; // weak
int IDA__display_win; // weak
int IDA__world_win; // weak
int IDA__mouse_is_hidden; // weak
int (__fastcall *IDA_mouse_click_in_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_mouse_set_position_)(_DWORD, _DWORD); // weak
int IDA_gmouse_3d_set_fid_; // weak
int (__cdecl *IDA_mem_malloc_)(_DWORD); // weak
int (__fastcall *IDA_mem_realloc_)(_DWORD, _DWORD); // weak
int IDA_mem_free_; // weak
int IDA__black_palette; // weak
int IDA__cmap; // weak
int IDA__systemCmap; // weak
int IDA_palette_init_; // weak
int (*IDA_palette_init__3rdCall)(void); // weak
char byte_10064624; // weak
bool fade_time_recalculate_on_fade;
int IDA__game_user_wants_to_quit; // weak
int (*IDA_GNW_add_input_buffer_)(void); // weak
int IDA_mouse_set_shape_; // weak
int dword_10064634; // weak
int dword_10064638; // weak
int dword_1006463C; // weak
int dword_10064640; // weak
int dword_10064644; // weak
int death_scrn_size; // weak
int dword_1006464C; // idb
int dword_10064650; // idb
int dword_10064654[]; // weak
int dword_10064660; // weak
int dword_10064664; // weak
int dword_10064668; // weak
int dword_1006466C; // weak
int dword_10064674; // weak
int dialog_scrn_background; // weak
int IDA__i_wid_max_x; // weak
int IDA__i_wid_max_y; // weak
char byte_10064684; // weak
int IDA__inven_cur_disp; // weak
int IDA_inven_pickup___someMov1; // weak
int IDA_inven_pickup___someMov2; // weak
int IDA_inven_pickup___someMov3; // weak
int IDA_inven_pickup___someMov7; // weak
int IDA_inven_pickup___someMov8; // weak
int IDA_inven_pickup___someMov9; // weak
int IDA_inven_pickup___someMov4; // weak
int IDA_inven_pickup___someMov5; // weak
int IDA_inven_pickup___someMov6; // weak
int IDA_inven_pickup___someMov13; // weak
int IDA_inven_pickup___someMov14; // weak
int IDA_inven_pickup___someMov15; // weak
int IDA_inven_pickup___someMov10; // weak
int IDA_inven_pickup___someMov11; // weak
int IDA_inven_pickup___someMov12; // weak
int IDA_inven_pickup___someMov19; // weak
int IDA_inven_pickup___someMov20; // weak
int IDA_inven_pickup___someMov21; // weak
int IDA_inven_pickup___someMov16; // weak
int IDA_inven_pickup___someMov17; // weak
int IDA_inven_pickup___someMov18; // weak
_DWORD IDA__stack_offset; // idb
int IDA__pud; // weak
int IDA__curr_stack; // weak
int (__fastcall *IDA_display_inventory_)(_DWORD, _DWORD); // weak
float end_slide_size; // idb
int dword_100646F4; // idb
int dword_100646F8; // idb
char byte_100646FC; // weak
int IDA__endgame_window_buffer; // weak
int dword_10064704; // weak
int dword_10064708; // weak
int dword_1006470C; // weak
int dword_10064710; // weak
int dword_10064714; // weak
int dword_10064718; // weak
int help_scrn_size; // weak
int dword_10064720; // idb
int dword_10064724; // idb
_UNKNOWN unk_10064728; // weak
int (*IDA_intface_update_ammo_lights_)(void); // weak
int iface_bar_mode; // weak
int iface_bar_side_art; // weak
float iface_bar_sides_ori; // idb
int IDA__endWindowRect; // weak
int IDA__disp_rect; // weak
int IDA__movePointRect; // weak
int IDA__itemButtonRect; // weak
int IDA__dn_bid; // weak
int IDA_display_redraw___someCall1; // weak
int alternate_ammo_metre; // weak
int IDA__disp_start; // weak
int IDA__disp_curr; // weak
int IDA__max_disp; // weak
int IDA__lastTime; // weak
int IDA__bk_process_time; // weak
int IDA__disp_buf; // weak
int dword_1006AB6C; // weak
int IDA__disp_init; // weak
int IDA__combat_state; // weak
int IDA__up_bid; // weak
int dword_1006AB7C; // weak
int dword_1006AB80; // weak
int dword_1006AB84; // weak
int dword_1006AB88; // weak
int dword_1006AB8C; // weak
int dword_1006AB90; // weak
int IDA__inventoryButton; // weak
int IDA__optionsButton; // weak
int IDA__skilldexButton; // weak
int IDA__automapButton; // weak
int IDA__pipboyButton; // weak
int IDA__characterButton; // weak
int IDA__itemButton; // weak
int IDA__toggleButton; // weak
int IDA__endTurnButton; // weak
int IDA__endCombatButton; // weak
int (*IDA_intface_update_hit_points_)(void); // weak
int (*IDA_intface_update_ac_)(void); // weak
int (*IDA_intface_update_move_points_)(void); // weak
int IDA_intface_update_ammo_lights___1; // weak
int IDA__interfaceBuffer; // weak
int dword_1006ABD0; // weak
_UNKNOWN unk_1006ABD4; // weak
int (*IDA_main_menu_create_)(void); // weak
int (*IDA_main_menu_destroy_)(void); // weak
int main_menu_size; // weak
int use_hires_images; // weak
int scale_buttons_and_text_menu; // weak
int IDA__misc_message_file; // weak
int IDA_main_menu_create___someMov1; // weak
int IDA_main_menu_create___someMov2; // weak
int IDA_main_menu_create___someMov3; // weak
int IDA__main_menu_created; // weak
int IDA__main_menu_is_hidden; // weak
int (*IDA_main_menu_show_)(void); // weak
int (*IDA_main_menu_hide_)(void); // weak
int (*IDA_getverstr_)(void); // weak
int IDA_main_menu_create___someCall1; // weak
void *dword_1006AC28; // idb
int dword_1006AC2C; // weak
int dword_1006AC30; // weak
void *dword_1006AC34; // idb
void *dword_1006AC38; // idb
int dword_1006AC3C; // weak
int movie_size; // weak
int dword_1006AC44; // weak
int IDA__subtitles; // weak
int IDA_dword_6B2A8B; // weak
int IDA_dword_6B2A8F; // weak
int IDA_dword_6B276C; // weak
int IDA_dword_6B2A9F; // weak
int IDA__movieX; // weak
int IDA__movieY; // idb
int IDA__movieW; // weak
int IDA__movieH; // idb
int IDA__winRect; // weak
int IDA__movieRect; // weak
int IDA__subtitleW; // weak
int IDA__subtitleH; // weak
int IDA_gmovie_play___someMov1; // weak
int (*IDA_do_prefscreen_)(void); // weak
int IDA__optn_msgfl; // weak
int (*IDA_dude_run_)(void); // weak
int dword_1006AC8C; // weak
int (*IDA_ShadeScreen_)(void); // weak
int splash_scrn_size; // weak
int splash_scrn_time; // weak
int IDA_dbl_4FB49C; // weak
void *dword_1006ACA0; // idb
char *dword_1006ACA4; // idb
char *dword_1006ACA8; // idb
int dword_1006ACAC; // weak
int dword_1006ACB4; // weak
int dword_1006ACB8; // weak
int dword_1006ACBC; // weak
int dword_1006ACC0; // weak
int find_out_for_sub_1001C140_dword_1006ACC4; // weak
_UNKNOWN unk_1006ACC8; // weak
void *dword_1006ACCC; // idb
int dword_1006ACD0; // weak
int dword_1006ACD4; // weak
int dword_1006ACD8; // weak
int dword_1006ACDC; // weak
int dword_1006ACE0; // weak
int dword_1006ACE4; // weak
int dword_1006ACE8; // weak
int dword_1006ACEC; // weak
unsigned int dword_1006ACF0; // idb
unsigned int dword_1006ACF4; // idb
unsigned int dword_1006ACF8; // idb
int (*IDA_game_quit_with_confirm_)(void); // weak
int IDA__scr_size; // weak
int dword_1006AD04; // weak
int dword_1006AD08; // weak
__int16 word_1006AD0C; // weak
int scale_2x; // weak
int refresh_rate; // weak
int IDA__xres; // weak
int IDA__yres; // weak
INT graphics_mode; // idb
char byte_1006AD28; // weak
int IDA__GNW95_hwnd; // weak
HWND hWnd; // idb
int IDA__GNW95_hInstance; // weak
int IDA__screendump_key; // weak
int IDA__GNW95_isActive; // weak
int (*IDA_exit_)(void); // weak
int (*IDA_GNW95_hook_input_)(void); // weak
int (__fastcall *IDA_process_bk_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_gmouse_bk_process_)(_DWORD, _DWORD); // weak
int (__fastcall *IDA_setSystemPalette_)(_DWORD, _DWORD); // weak
char byte_1006AD54; // weak
char windowed; // weak
char alt_mouse_input; // weak
char byte_1006AD57; // weak
char is_gray_scale; // weak
int IDA__mouse_x_; // weak
int IDA__mouse_y_; // weak
int IDA__mouse_hotx; // weak
int IDA__mouse_hoty; // weak
int IDA__mouse_sensitivity; // weak
int IDA__raw_x; // weak
int IDA__raw_y; // weak
int IDA__mouse_width; // weak
int IDA__mouse_length; // weak
int (*dword_1006AD80)(void); // weak
int IDA__lpDirectInputMouse; // weak
char byte_1006AD88; // weak
LPTOP_LEVEL_EXCEPTION_FILTER lpfn; // idb
struct _RTL_CRITICAL_SECTION CriticalSection; // idb
_UNKNOWN unk_1006B2B0; // weak
bool dword_1006B2B8; // idb
int dword_1006B2C0; // weak
int dword_1006B2C4; // weak
unsigned int dword_1006B2C8; // idb
char byte_1006B2DC; // weak
int dword_1006B2E0; // weak
int dword_1006B2E4; // weak
int dword_1006B340[10]; // idb
_UNKNOWN unk_1006B368; // weak
_UNKNOWN unk_1006B369; // weak
int dword_1006C708; // weak
_UNKNOWN unk_1006C70C; // weak


//----- (10001000) --------------------------------------------------------
char __cdecl sub_10001000(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return 1;
}

//----- (100010B0) --------------------------------------------------------
FARPROC sub_100010B0()
{
  HMODULE v0; // eax
  FARPROC result; // eax

  v0 = hModule;
  if ( hModule || (v0 = LoadLibraryA("Shell32.dll"), (hModule = v0) != 0) )
    result = GetProcAddress(v0, "SHGetFolderPathA");
  else
    result = 0;
  return result;
}

//----- (10001130) --------------------------------------------------------
BOOL sub_10001130()
{
  HMODULE v0; // eax
  FARPROC v1; // eax
  int v3; // [esp+8h] [ebp-98h]
  unsigned int v4; // [esp+Ch] [ebp-94h]

  memset(&v3, 0, 0x94u);
  v0 = dword_1003C2EC;
  v3 = 148;
  if ( !dword_1003C2EC )
  {
    v0 = LoadLibraryA("Kernel32.dll");
    dword_1003C2EC = v0;
    if ( !v0 )
      return 0;
  }
  v1 = GetProcAddress(v0, "GetVersionExA");
  if ( !v1 )
    return 0;
  ((void (__stdcall *)(int *))v1)(&v3);
  return v4 >= 6;
}

//----- (100011A0) --------------------------------------------------------
unsigned int __cdecl sub_100011A0(_DWORD *a1)
{
  unsigned int result; // eax
  unsigned int v2; // esi
  void *v3; // ebx

  if ( !a1 )
    return 0;
  v2 = GetCurrentDirectoryA(0, 0) + 12;
  v3 = operator new(v2);
  memset(v3, 0, v2);
  if ( GetCurrentDirectoryA(v2, (LPSTR)v3) )
  {
    strncat((char *)v3, "\\f1_res.ini", 0xBu);
    result = v2;
    *a1 = v3;
  }
  else
  {
    j__free(v3);
    *a1 = 0;
    result = 0;
  }
  return result;
}

//----- (10001290) --------------------------------------------------------
UINT __cdecl F_GetPrivateProfileIntA(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault)
{
  sub_10002250();
  return GetPrivateProfileIntA(lpAppName, lpKeyName, nDefault, lpText);
}

//----- (100012C0) --------------------------------------------------------
BOOL __cdecl sub_100012C0(LPCSTR lpAppName, LPCSTR lpKeyName, int a3)
{
  CHAR String; // [esp+0h] [ebp-40h]

  sub_10002250();
  sprintf(&String, "%d", a3);
  return WritePrivateProfileStringA(lpAppName, lpKeyName, &String, lpText);
}

//----- (10001300) --------------------------------------------------------
BOOL __cdecl sub_10001300(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct)
{
  sub_10002250();
  WritePrivateProfileStructA(lpszSection, lpszKey, lpStruct, 0x2Cu, lpText);
  return WritePrivateProfileStructA(0, 0, 0, 0, lpText);
}

//----- (10001340) --------------------------------------------------------
UINT __cdecl F_GetPrivateProfileIntA_3(LPCSTR lpAppName, LPCSTR lpKeyName, INT nDefault)
{
  if ( !lpFileName )
  {
    lpFileName = (LPCSTR)operator new(0x104u);
    GetCurrentDirectoryA(0x104u, (LPSTR)lpFileName);
    strncat((char *)lpFileName, "\\ddraw.ini", 0xCu);
  }
  return GetPrivateProfileIntA(lpAppName, lpKeyName, nDefault, lpFileName);
}

//----- (10001420) --------------------------------------------------------
void __cdecl writeSettings2(LPCSTR lpText)
{
  const CHAR *v1; // esi
  unsigned int v2; // ebp
  void *v3; // esi
  UINT v4; // ebp
  UINT v5; // ebp
  UINT v6; // ebp
  UINT v7; // ebp
  UINT v8; // ebp
  UINT v9; // ebp
  UINT v10; // ebp
  UINT v11; // ebp
  UINT v12; // ebp
  UINT v13; // ebp
  UINT v14; // ebp
  UINT v15; // ebp
  UINT v16; // ebp
  UINT v17; // ebp
  UINT v18; // ebp
  UINT v19; // ebp
  UINT v20; // ebp
  UINT v21; // ebp
  UINT v22; // ebp
  UINT v23; // ebp
  UINT v24; // ebp
  UINT v25; // ebp
  UINT v26; // ebp
  UINT v27; // ebp
  UINT v28; // ebp
  UINT v29; // ebp
  UINT v30; // ebp
  UINT v31; // ebp
  UINT v32; // ebp
  UINT v33; // ebp
  UINT v34; // ebp
  UINT v35; // ebp
  UINT v36; // ebp
  UINT v37; // ebp
  UINT v38; // ebp
  UINT v39; // ebp
  UINT v40; // ebp
  UINT v41; // ebp
  UINT v42; // ebp
  UINT v43; // ebp
  UINT v44; // ebp
  UINT v45; // ebp
  UINT v46; // ebp
  UINT v47; // ebp
  UINT v48; // ebp
  UINT v49; // ebp
  UINT v50; // ebp
  UINT v51; // esi
  CHAR String; // [esp+10h] [ebp-170h]
  LPCSTR lpFileName; // [esp+50h] [ebp-130h]
  int Struct; // [esp+54h] [ebp-12Ch]
  CHAR ReturnedString; // [esp+80h] [ebp-100h]

  v1 = lpText;
  lpFileName = 0;
  if ( lpText )
  {
    if ( GetFileAttributesA(lpText) == -1 )
    {
      MessageBoxA(0, lpText, "Hi-Res patch Config - Invalid Path", 0x10u);
      return;
    }
  }
  else
  {
    v2 = GetCurrentDirectoryA(0, 0);
    v3 = operator new(v2);
    memset(v3, 0, v2);
    GetCurrentDirectoryA(v2, (LPSTR)v3);
    sub_10002250();
    WritePrivateProfileStringA("LOCATION", "path", (LPCSTR)v3, ::lpText);
    j__free(v3);
    lpFileName = 0;
    sub_100011A0(&lpFileName);
    v1 = lpFileName;
  }
  v4 = GetPrivateProfileIntA("MAIN", "GRAPHICS_MODE", 2, v1);
  sub_10002250();
  sprintf(&String, "%d", v4);
  WritePrivateProfileStringA("MAIN", "GRAPHICS_MODE", &String, ::lpText);
  v5 = GetPrivateProfileIntA("MAIN", "SCALE_2X", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v5);
  WritePrivateProfileStringA("MAIN", "SCALE_2X", &String, ::lpText);
  v6 = GetPrivateProfileIntA("MAIN", "SCR_WIDTH", 1024, v1);
  sub_10002250();
  sprintf(&String, "%d", v6);
  WritePrivateProfileStringA("MAIN", "SCR_WIDTH", &String, ::lpText);
  v7 = GetPrivateProfileIntA("MAIN", "SCR_HEIGHT", 768, v1);
  sub_10002250();
  sprintf(&String, "%d", v7);
  WritePrivateProfileStringA("MAIN", "SCR_HEIGHT", &String, ::lpText);
  v8 = GetPrivateProfileIntA("MAIN", "COLOUR_BITS", 32, v1);
  sub_10002250();
  sprintf(&String, "%d", v8);
  WritePrivateProfileStringA("MAIN", "COLOUR_BITS", &String, ::lpText);
  v9 = GetPrivateProfileIntA("MAIN", "REFRESH_RATE", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v9);
  WritePrivateProfileStringA("MAIN", "REFRESH_RATE", &String, ::lpText);
  v10 = GetPrivateProfileIntA("MAIN", "WINDOWED", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v10);
  WritePrivateProfileStringA("MAIN", "WINDOWED", &String, ::lpText);
  v11 = GetPrivateProfileIntA("MAIN", "WINDOWED_FULLSCREEN", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v11);
  WritePrivateProfileStringA("MAIN", "WINDOWED_FULLSCREEN", &String, ::lpText);
  Struct = 44;
  if ( GetPrivateProfileStructA("MAIN", "WIN_DATA", &Struct, 0x2Cu, v1) )
  {
    sub_10002250();
    WritePrivateProfileStructA("MAIN", "WIN_DATA", &Struct, 0x2Cu, ::lpText);
    WritePrivateProfileStructA(0, 0, 0, 0, ::lpText);
  }
  else
  {
    sub_10002250();
    sprintf(&String, "%d", 0);
    WritePrivateProfileStringA("MAIN", "WIN_DATA", &String, ::lpText);
  }
  sub_10002250();
  v12 = GetPrivateProfileIntA("MAIN", "ALT_MOUSE_INPUT", -1, ::lpText);
  if ( v12 == -1 )
  {
    v13 = GetPrivateProfileIntA("INPUT", "ALT_MOUSE_INPUT", 0, v1);
    sub_10002250();
    sprintf(&String, "%d", v13);
    WritePrivateProfileStringA("INPUT", "ALT_MOUSE_INPUT", &String, ::lpText);
  }
  else
  {
    sub_10002250();
    WritePrivateProfileStringA("MAIN", "ALT_MOUSE_INPUT", 0, ::lpText);
    sub_10002250();
    sprintf(&String, "%d", v12);
    WritePrivateProfileStringA("INPUT", "ALT_MOUSE_INPUT", &String, ::lpText);
  }
  v14 = GetPrivateProfileIntA("INPUT", "EXTRA_WIN_MSG_CHECKS", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v14);
  WritePrivateProfileStringA("INPUT", "EXTRA_WIN_MSG_CHECKS", &String, ::lpText);
  v15 = GetPrivateProfileIntA("INPUT", "SCROLLWHEEL_FOCUS_PRIMARY_MENU", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v15);
  WritePrivateProfileStringA("INPUT", "SCROLLWHEEL_FOCUS_PRIMARY_MENU", &String, ::lpText);
  v16 = GetPrivateProfileIntA("EFFECTS", "IS_GRAY_SCALE", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v16);
  WritePrivateProfileStringA("EFFECTS", "IS_GRAY_SCALE", &String, ::lpText);
  v17 = GetPrivateProfileIntA("HI_RES_PANEL", "DISPLAY_LIST_DESCENDING", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v17);
  WritePrivateProfileStringA("HI_RES_PANEL", "DISPLAY_LIST_DESCENDING", &String, ::lpText);
  v18 = GetPrivateProfileIntA("MOVIES", "MOVIE_SIZE", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v18);
  WritePrivateProfileStringA("MOVIES", "MOVIE_SIZE", &String, ::lpText);
  v19 = GetPrivateProfileIntA("MAPS", "EDGE_CLIPPING_ON", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v19);
  WritePrivateProfileStringA("MAPS", "EDGE_CLIPPING_ON", &String, ::lpText);
  v20 = GetPrivateProfileIntA("MAPS", "IGNORE_MAP_EDGES", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v20);
  WritePrivateProfileStringA("MAPS", "IGNORE_MAP_EDGES", &String, ::lpText);
  v21 = GetPrivateProfileIntA("MAPS", "IGNORE_PLAYER_SCROLL_LIMITS", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v21);
  WritePrivateProfileStringA("MAPS", "IGNORE_PLAYER_SCROLL_LIMITS", &String, ::lpText);
  GetPrivateProfileStringA("MAPS", "SCROLL_DIST_X", "HALF_SCRN", &ReturnedString, 0x100u, v1);
  sub_10002250();
  WritePrivateProfileStringA("MAPS", "SCROLL_DIST_X", &ReturnedString, ::lpText);
  GetPrivateProfileStringA("MAPS", "SCROLL_DIST_Y", "HALF_SCRN", &ReturnedString, 0x100u, v1);
  sub_10002250();
  WritePrivateProfileStringA("MAPS", "SCROLL_DIST_Y", &ReturnedString, ::lpText);
  v22 = GetPrivateProfileIntA("MAPS", "NumPathNodes", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v22);
  WritePrivateProfileStringA("MAPS", "NumPathNodes", &String, ::lpText);
  v23 = GetPrivateProfileIntA("MAPS", "FOG_OF_WAR", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v23);
  WritePrivateProfileStringA("MAPS", "FOG_OF_WAR", &String, ::lpText);
  v24 = GetPrivateProfileIntA("MAPS", "FOG_LIGHT_LEVEL", 4, v1);
  sub_10002250();
  sprintf(&String, "%d", v24);
  WritePrivateProfileStringA("MAPS", "FOG_LIGHT_LEVEL", &String, ::lpText);
  v25 = GetPrivateProfileIntA("MAPS", "ZOOM_LEVEL", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v25);
  WritePrivateProfileStringA("MAPS", "ZOOM_LEVEL", &String, ::lpText);
  v26 = GetPrivateProfileIntA("MAPS", "IS_ZOOM_BOUND_BY_EDGES", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v26);
  WritePrivateProfileStringA("MAPS", "IS_ZOOM_BOUND_BY_EDGES", &String, ::lpText);
  v27 = GetPrivateProfileIntA("IFACE", "IFACE_BAR_MODE", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v27);
  WritePrivateProfileStringA("IFACE", "IFACE_BAR_MODE", &String, ::lpText);
  v28 = GetPrivateProfileIntA("IFACE", "IFACE_BAR_SIDE_ART", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v28);
  WritePrivateProfileStringA("IFACE", "IFACE_BAR_SIDE_ART", &String, ::lpText);
  v29 = GetPrivateProfileIntA("IFACE", "IFACE_BAR_SIDES_ORI", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v29);
  WritePrivateProfileStringA("IFACE", "IFACE_BAR_SIDES_ORI", &String, ::lpText);
  v30 = GetPrivateProfileIntA("IFACE", "IFACE_BAR_WIDTH", 800, v1);
  sub_10002250();
  sprintf(&String, "%d", v30);
  WritePrivateProfileStringA("IFACE", "IFACE_BAR_WIDTH", &String, ::lpText);
  v31 = GetPrivateProfileIntA("IFACE", "ALTERNATE_AMMO_METRE", 2, v1);
  sub_10002250();
  sprintf(&String, "%d", v31);
  WritePrivateProfileStringA("IFACE", "ALTERNATE_AMMO_METRE", &String, ::lpText);
  v32 = GetPrivateProfileIntA("IFACE", "ALTERNATE_AMMO_LIGHT", 196, v1);
  sub_10002250();
  sprintf(&String, "%d", v32);
  WritePrivateProfileStringA("IFACE", "ALTERNATE_AMMO_LIGHT", &String, ::lpText);
  v33 = GetPrivateProfileIntA("IFACE", "ALTERNATE_AMMO_DARK", 75, v1);
  sub_10002250();
  sprintf(&String, "%d", v33);
  WritePrivateProfileStringA("IFACE", "ALTERNATE_AMMO_DARK", &String, ::lpText);
  v34 = GetPrivateProfileIntA("MAINMENU", "MAIN_MENU_SIZE", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v34);
  WritePrivateProfileStringA("MAINMENU", "MAIN_MENU_SIZE", &String, ::lpText);
  v35 = GetPrivateProfileIntA("MAINMENU", "USE_HIRES_IMAGES", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v35);
  WritePrivateProfileStringA("MAINMENU", "USE_HIRES_IMAGES", &String, ::lpText);
  v36 = GetPrivateProfileIntA("MAINMENU", "SCALE_BUTTONS_AND_TEXT_MENU", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v36);
  WritePrivateProfileStringA("MAINMENU", "SCALE_BUTTONS_AND_TEXT_MENU", &String, ::lpText);
  v37 = GetPrivateProfileIntA("MAINMENU", "MENU_BG_OFFSET_X", -24, v1);
  sub_10002250();
  sprintf(&String, "%d", v37);
  WritePrivateProfileStringA("MAINMENU", "MENU_BG_OFFSET_X", &String, ::lpText);
  v38 = GetPrivateProfileIntA("MAINMENU", "MENU_BG_OFFSET_Y", -24, v1);
  sub_10002250();
  sprintf(&String, "%d", v38);
  WritePrivateProfileStringA("MAINMENU", "MENU_BG_OFFSET_Y", &String, ::lpText);
  v39 = GetPrivateProfileIntA("STATIC_SCREENS", "DEATH_SCRN_SIZE", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v39);
  WritePrivateProfileStringA("STATIC_SCREENS", "DEATH_SCRN_SIZE", &String, ::lpText);
  v40 = GetPrivateProfileIntA("STATIC_SCREENS", "END_SLIDE_SIZE", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v40);
  WritePrivateProfileStringA("STATIC_SCREENS", "END_SLIDE_SIZE", &String, ::lpText);
  v41 = GetPrivateProfileIntA("STATIC_SCREENS", "HELP_SCRN_SIZE", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v41);
  WritePrivateProfileStringA("STATIC_SCREENS", "HELP_SCRN_SIZE", &String, ::lpText);
  v42 = GetPrivateProfileIntA("STATIC_SCREENS", "SPLASH_SCRN_SIZE", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v42);
  WritePrivateProfileStringA("STATIC_SCREENS", "SPLASH_SCRN_SIZE", &String, ::lpText);
  v43 = GetPrivateProfileIntA("OTHER_SETTINGS", "DIALOG_SCRN_BACKGROUND", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v43);
  WritePrivateProfileStringA("OTHER_SETTINGS", "DIALOG_SCRN_BACKGROUND", &String, ::lpText);
  v44 = GetPrivateProfileIntA("OTHER_SETTINGS", "DIALOG_SCRN_ART_FIX", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v44);
  WritePrivateProfileStringA("OTHER_SETTINGS", "DIALOG_SCRN_ART_FIX", &String, ::lpText);
  v45 = GetPrivateProfileIntA("OTHER_SETTINGS", "SPLASH_SCRN_TIME", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v45);
  WritePrivateProfileStringA("OTHER_SETTINGS", "SPLASH_SCRN_TIME", &String, ::lpText);
  v46 = GetPrivateProfileIntA("OTHER_SETTINGS", "DOUBLE_CLICK_RUNNING", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v46);
  WritePrivateProfileStringA("OTHER_SETTINGS", "DOUBLE_CLICK_RUNNING", &String, ::lpText);
  v47 = GetPrivateProfileIntA("OTHER_SETTINGS", "INV_ADD_ITEMS_AT_TOP", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v47);
  WritePrivateProfileStringA("OTHER_SETTINGS", "INV_ADD_ITEMS_AT_TOP", &String, ::lpText);
  v48 = GetPrivateProfileIntA("OTHER_SETTINGS", "CPU_USAGE_FIX", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v48);
  WritePrivateProfileStringA("OTHER_SETTINGS", "CPU_USAGE_FIX", &String, ::lpText);
  v49 = GetPrivateProfileIntA("OTHER_SETTINGS", "BARTER_PC_INV_DROP_FIX", 1, v1);
  sub_10002250();
  sprintf(&String, "%d", v49);
  WritePrivateProfileStringA("OTHER_SETTINGS", "BARTER_PC_INV_DROP_FIX", &String, ::lpText);
  v50 = GetPrivateProfileIntA("OTHER_SETTINGS", "FADE_TIME_MODIFIER", 60, v1);
  sub_10002250();
  sprintf(&String, "%d", v50);
  WritePrivateProfileStringA("OTHER_SETTINGS", "FADE_TIME_MODIFIER", &String, ::lpText);
  v51 = GetPrivateProfileIntA("OTHER_SETTINGS", "FADE_TIME_RECALCULATE_ON_FADE", 0, v1);
  sub_10002250();
  sprintf(&String, "%d", v51);
  WritePrivateProfileStringA("OTHER_SETTINGS", "FADE_TIME_RECALCULATE_ON_FADE", &String, ::lpText);
  if ( lpFileName )
    j__free((void *)lpFileName);
}

//----- (10002250) --------------------------------------------------------
void sub_10002250()
{
  FARPROC v0; // eax
  size_t v1; // eax
  char v2; // cl
  unsigned int v3; // esi
  _BYTE *v4; // ebx
  _BYTE *v5; // eax
  char v6; // cl
  signed int v7; // esi
  char *v8; // edi
  DWORD (__stdcall *v9)(LPCSTR); // esi
  size_t v10; // [esp+14h] [ebp-13Ch]
  char pbHash[16]; // [esp+18h] [ebp-138h]
  char v12; // [esp+28h] [ebp-128h]
  char v13; // [esp+4Ch] [ebp-104h]
  char v14[259]; // [esp+4Dh] [ebp-103h]

  if ( lpText )
  {
    if ( *lpText )
      return;
    j__free((void *)lpText);
    lpText = 0;
  }
  sub_100011A0(&lpText);
  sub_10002250();
  if ( GetPrivateProfileIntA("MAIN", "UAC_AWARE", 1, lpText) && sub_10001130() )
  {
    v0 = sub_100010B0();
    if ( v0 )
      ((void (__stdcall *)(_DWORD, signed int, _DWORD, _DWORD, char *))v0)(0, 26, 0, 0, &v13);
    v1 = 0;
    v10 = 0;
    if ( v13 )
    {
      do
        v2 = v14[v1++];
      while ( v2 );
      v10 = v1;
    }
    v3 = GetCurrentDirectoryA(0, 0);
    v4 = operator new(v3);
    memset(v4, 0, v3);
    GetCurrentDirectoryA(v3, v4);
    if ( *v4 )
    {
      v5 = v4;
      do
      {
        if ( *v5 == 58 || *v5 == 92 )
          *v5 = 95;
        v6 = (v5++)[1];
      }
      while ( v6 );
    }
    HashData(v4, v3, (LPBYTE)pbHash, 0x10u);
    v7 = 0;
    v8 = &v12;
    do
    {
      sprintf(v8, "%02x", (unsigned __int8)pbHash[v7++]);
      v8 += 2;
    }
    while ( v7 < 16 );
    if ( lpText )
    {
      j__free((void *)lpText);
      lpText = 0;
    }
    lpText = (LPCSTR)operator new(v10 + 58);
    memset((void *)lpText, 0, v10 + 58);
    strncat((char *)lpText, "\\\\?\\", v10);
    strncat((char *)lpText, &v13, v10);
    strncat((char *)lpText, "\\Fallout", 8u);
    v9 = GetFileAttributesA;
    if ( GetFileAttributesA(lpText) == -1 && !CreateDirectoryA(lpText, 0) )
    {
      j__free((void *)lpText);
      lpText = 0;
      sub_100011A0(&lpText);
      return;
    }
    strncat((char *)lpText, "\\", 1u);
    strncat((char *)lpText, &v12, 0x21u);
    j__free(v4);
    if ( GetFileAttributesA(lpText) == -1 )
      CreateDirectoryA(lpText, 0);
    strncat((char *)lpText, "\\f1_res.ini", 0xBu);
  }
  else
  {
    v9 = GetFileAttributesA;
  }
  if ( v9(lpText) == -1 )
    writeSettings2(0);
  else
    writeSettings2(lpText);
}
// 10002250: using guessed type char var_103[259];
// 10002250: using guessed type BYTE pbHash[16];

//----- (10002510) --------------------------------------------------------
DWORD __cdecl F_GetPrivateProfileStringA(LPCSTR lpAppName, LPCSTR lpKeyName, LPCSTR lpDefault, LPSTR lpReturnedString, DWORD nSize)
{
  sub_10002250();
  return GetPrivateProfileStringA(lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpText);
}

//----- (10002540) --------------------------------------------------------
BOOL __cdecl sub_10002540(LPCSTR lpszSection, LPCSTR lpszKey, LPVOID lpStruct)
{
  sub_10002250();
  *(_DWORD *)lpStruct = 44;
  return GetPrivateProfileStructA(lpszSection, lpszKey, lpStruct, 0x2Cu, lpText);
}

//----- (100025E0) --------------------------------------------------------
int __cdecl sub_100025E0(char *a1)
{
  _BYTE *v1; // edx
  int v2; // ecx
  int result; // eax

  v1 = a1;
  v2 = *a1;
  for ( result = 0; *v1; v2 = (char)*v1 )
  {
    ++v1;
    result = v2 ^ 33 * result;
  }
  return result;
}

//----- (10002600) --------------------------------------------------------
unsigned int __cdecl sub_10002600(unsigned __int16 a1)
{
  return (a1 << 8) | ((unsigned int)a1 >> 8);
}

//----- (10002640) --------------------------------------------------------
char *__cdecl sub_10002640(int a1)
{
  char *result; // eax

  result = (char *)operator new(5u);
  *(_WORD *)result = a1;
  result[2] = BYTE2(a1);
  *(_WORD *)(result + 3) = HIBYTE(a1);
  return result;
}

//----- (10002670) --------------------------------------------------------
char __cdecl sub_10002670(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  int v3; // eax

  LOBYTE(v3) = is_gray_scale;
  if ( is_gray_scale )
  {
    v3 = 2 * ((unsigned __int8)*a3 + 3 * (unsigned __int8)*a1 + 4 * (unsigned __int8)*a2) >> 4;
    *a1 = v3;
    *a2 = v3;
    *a3 = *a1;
  }
  return v3;
}
// 1006AD58: using guessed type char is_gray_scale;

//----- (100026B0) --------------------------------------------------------
int __cdecl sub_100026B0(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  int v3; // ecx
  unsigned __int8 v4; // dl
  unsigned __int8 v5; // al

  if ( is_gray_scale )
  {
    v3 = 2 * (a3 + 3 * a1 + 4 * a2) >> 4;
    v4 = v3;
    v5 = v3;
  }
  else
  {
    v5 = a3;
    v4 = a2;
    LOBYTE(v3) = a1;
  }
  return (unsigned __int8)v3 | ((v4 | ((v5 | 0x400) << 8)) << 8);
}
// 1006AD58: using guessed type char is_gray_scale;

//----- (10002700) --------------------------------------------------------
int __cdecl sub_10002700(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  unsigned __int16 v3; // bx
  int result; // eax
  unsigned __int16 v5; // bx

  if ( is_gray_scale )
  {
    HIBYTE(v3) = 2 * (a3 + 3 * a1 + 4 * a2) >> 4;
    LOBYTE(v3) = 2 * (a3 + 3 * a1 + 4 * a2) >> 4;
    result = (v3 << 8) | HIBYTE(v3);
  }
  else
  {
    HIBYTE(v5) = a1;
    LOBYTE(v5) = a2;
    result = (v5 << 8) | a3;
  }
  return result;
}
// 1006AD58: using guessed type char is_gray_scale;

//----- (10002760) --------------------------------------------------------
unsigned int __cdecl sub_10002760(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  int v3; // eax
  unsigned __int8 v4; // dl
  unsigned __int8 v5; // cl

  if ( is_gray_scale )
  {
    v3 = 2 * (a3 + 3 * a1 + 4 * a2) >> 4;
    v4 = v3;
    v5 = v3;
  }
  else
  {
    v5 = a3;
    v4 = a2;
    LOBYTE(v3) = a1;
  }
  return ((unsigned int)v5 >> 3) | 32 * (((unsigned int)v4 >> 2) | ((unsigned int)(unsigned __int8)v3 >> 3 << 6));
}
// 1006AD58: using guessed type char is_gray_scale;

//----- (100027C0) --------------------------------------------------------
unsigned int __cdecl sub_100027C0(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  int v3; // eax
  unsigned __int8 v4; // dl
  unsigned __int8 v5; // cl

  if ( is_gray_scale )
  {
    v3 = 2 * (a3 + 3 * a1 + 4 * a2) >> 4;
    v4 = v3;
    v5 = v3;
  }
  else
  {
    v5 = a3;
    v4 = a2;
    LOBYTE(v3) = a1;
  }
  return ((unsigned int)v5 >> 3) | 32 * (((unsigned int)v4 >> 3) | 32 * ((unsigned int)(unsigned __int8)v3 >> 3));
}
// 1006AD58: using guessed type char is_gray_scale;

//----- (10002820) --------------------------------------------------------
int __cdecl sub_10002820(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  int v11; // esi
  int result; // eax
  int v13; // ebp
  _BYTE *v14; // eax
  int v15; // edi
  int v16; // [esp+34h] [ebp+28h]

  v11 = a9 + a11 * a10 + a8;
  result = a7;
  v13 = a4 + a5 * a2 + a1;
  if ( a7 > 0 )
  {
    v16 = a7;
    do
    {
      if ( a6 > 0 )
      {
        v14 = (_BYTE *)v11;
        v15 = a6;
        do
        {
          *v14 = v14[v13 - v11];
          ++v14;
          --v15;
        }
        while ( v15 );
      }
      v11 += a11;
      v13 += a2;
      result = v16-- - 1;
    }
    while ( v16 );
  }
  return result;
}

//----- (100028A0) --------------------------------------------------------
int __cdecl sub_100028A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  int result; // eax
  int v12; // ecx
  int v13; // edx
  int v14; // ebx
  int v15; // [esp+34h] [ebp+2Ch]

  result = a11 >> 1;
  v12 = a8 + 2 * (a9 + (a11 >> 1) * a10);
  v13 = a4 + a5 * a2 + a1;
  if ( a7 > 0 )
  {
    v14 = a7;
    v15 = 2 * result;
    do
    {
      for ( result = 0; result < a6; ++result )
        *(_WORD *)(v12 + 2 * result) = dword_1003C2F8[*(unsigned __int8 *)(result + v13)];
      v12 += v15;
      v13 += a2;
      --v14;
    }
    while ( v14 );
  }
  return result;
}

//----- (10002920) --------------------------------------------------------
int __cdecl sub_10002920(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  int result; // eax
  int v12; // ecx
  int v13; // edx
  int v14; // ebx
  int v15; // [esp+34h] [ebp+2Ch]

  result = a11 >> 2;
  v12 = a8 + 4 * (a9 + (a11 >> 2) * a10);
  v13 = a4 + a5 * a2 + a1;
  if ( a7 > 0 )
  {
    v14 = a7;
    v15 = 4 * result;
    do
    {
      for ( result = 0; result < a6; ++result )
        *(_DWORD *)(v12 + 4 * result) = dword_1003C2F8[*(unsigned __int8 *)(result + v13)];
      v12 += v15;
      v13 += a2;
      --v14;
    }
    while ( v14 );
  }
  return result;
}

//----- (100029A0) --------------------------------------------------------
int __cdecl sub_100029A0(_BYTE *a1, int a2, int a3)
{
  int v3; // ebx
  _BYTE *v4; // esi
  int *v5; // edi
  int result; // eax

  v3 = a3;
  if ( a3 )
  {
    v4 = a1;
    v5 = &dword_1003C2F8[a2];
    do
    {
      *v5 = dword_1003C2F0((unsigned __int8)(4 * *v4), (unsigned __int8)(4 * v4[1]), (unsigned __int8)(4 * v4[2]));
      v4 += 3;
      ++v5;
      --v3;
    }
    while ( v3 );
    v3 = a3;
  }
  if ( dword_1003C714 )
    result = (*(int (__stdcall **)(int, _DWORD, int, int, int *))(*(_DWORD *)dword_1003C714 + 24))(
               dword_1003C714,
               0,
               a2,
               v3,
               &dword_1003C2F8[a2]);
  else
    result = sub_1000ECB0();
  return result;
}
// 1003C2F0: using guessed type int (__cdecl *dword_1003C2F0)(_DWORD, _DWORD, _DWORD);
// 1003C714: using guessed type int dword_1003C714;
// 1006AD00: using guessed type int IDA__scr_size;

//----- (10002A30) --------------------------------------------------------
int __cdecl sub_10002A30(int a1, char a2, char a3, char a4)
{
  int *v4; // esi
  int result; // eax

  v4 = &dword_1003C2F8[a1];
  *v4 = dword_1003C2F0((unsigned __int8)(4 * a2), (unsigned __int8)(4 * a3), (unsigned __int8)(4 * a4));
  if ( dword_1003C714 )
    result = (*(int (__stdcall **)(int, _DWORD, int, signed int, int *))(*(_DWORD *)dword_1003C714 + 24))(
               dword_1003C714,
               0,
               a1,
               1,
               v4);
  else
    result = sub_1000ECB0();
  return result;
}
// 1003C2F0: using guessed type int (__cdecl *dword_1003C2F0)(_DWORD, _DWORD, _DWORD);
// 1003C714: using guessed type int dword_1003C714;
// 1006AD00: using guessed type int IDA__scr_size;

//----- (10002A90) --------------------------------------------------------
int __usercall sub_10002A90@<eax>(int a1@<eax>, char a2@<dl>)
{
  char v3; // [esp+0h] [ebp-14h]
  char v4; // [esp+4h] [ebp-10h]

  return sub_10002A30(a1, a2, v3, v4);
}

//----- (10002AB0) --------------------------------------------------------
int __usercall sub_10002AB0@<eax>(_BYTE *a1@<eax>, int a2@<edx>)
{
  int v3; // [esp+0h] [ebp-14h]

  return sub_100029A0(a1, a2, v3);
}

//----- (10002AD0) --------------------------------------------------------
int __usercall sub_10002AD0@<eax>(_BYTE *a1@<eax>)
{
  return sub_100029A0(a1, 0, 256);
}

//----- (10002AF0) --------------------------------------------------------
signed int __stdcall sub_10002AF0(int a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v5; // eax
  unsigned int v6; // ecx

  if ( !a4 )
    return 1;
  v5 = 0;
  if ( a3 )
  {
    v6 = a2;
    do
    {
      if ( v6 < 0x100 )
        *(_DWORD *)(a4 + 4 * v5) = dword_1003C2F8[v6];
      ++v6;
      ++v5;
    }
    while ( v5 < a3 );
  }
  return 0;
}

//----- (10002B30) --------------------------------------------------------
char __cdecl sub_10002B30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  int i; // eax
  int v10; // ebx
  int v12; // [esp+50h] [ebp-A8h]
  int v13; // [esp+54h] [ebp-A4h]
  int v14; // [esp+58h] [ebp-A0h]
  int v15; // [esp+5Ch] [ebp-9Ch]
  struct tagPOINT Point; // [esp+60h] [ebp-98h]
  int v17; // [esp+68h] [ebp-90h]
  int v18; // [esp+6Ch] [ebp-8Ch]
  int v19; // [esp+70h] [ebp-88h]
  int v20; // [esp+74h] [ebp-84h]
  int v21; // [esp+78h] [ebp-80h]
  int v22; // [esp+80h] [ebp-78h]
  int v23; // [esp+84h] [ebp-74h]
  int v24; // [esp+88h] [ebp-70h]
  int v25; // [esp+9Ch] [ebp-5Ch]

  LOBYTE(i) = IDA__GNW95_isActive;
  if ( *(_DWORD *)IDA__GNW95_isActive )
  {
    LOBYTE(i) = byte_1006AD54;
    if ( !byte_1006AD54 )
    {
      memset(&v21, 0, 0x7Cu);
      v21 = 124;
      while ( (*(int (__stdcall **)(int, _DWORD, int *, signed int, _DWORD))(*(_DWORD *)dword_1003C710 + 100))(
                dword_1003C710,
                0,
                &v21,
                1,
                0) == -2005532222 )
        (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C710 + 108))(dword_1003C710);
      LOBYTE(i) = v22;
      if ( a9 + a7 > v22 )
      {
        if ( a9 > v22 )
          return i;
        a7 = v22 - a9;
      }
      v10 = a6;
      LOBYTE(i) = v23;
      if ( a6 + a8 > v23 )
      {
        if ( a8 > v23 )
          return i;
        v10 = v23 - a8;
      }
      dword_1003C718(a1, a2, a3, a4, a5, v10, a7, v25, a8, a9, v24);
      (*(void (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_1003C710 + 128))(dword_1003C710, 0);
      Point.y = 0;
      Point.x = 0;
      v12 = a8;
      v13 = a9;
      v14 = a8 + v10;
      v15 = a9 + a7;
      ClientToScreen(hWnd, &Point);
      v17 = Point.x + (a8 << scale_2x);
      v18 = Point.y + (a9 << scale_2x);
      v19 = Point.x + ((a8 + v10) << scale_2x);
      v20 = Point.y + ((a9 + a7) << scale_2x);
      for ( i = (*(int (__stdcall **)(int, int *, int, int *, signed int, _DWORD))(*(_DWORD *)dword_1003C70C + 20))(
                  dword_1003C70C,
                  &v17,
                  dword_1003C710,
                  &v12,
                  0x1000000,
                  0);
            i == -2005532222;
            i = (*(int (__stdcall **)(int, int *, int, int *, signed int, _DWORD))(*(_DWORD *)dword_1003C70C + 20))(
                  dword_1003C70C,
                  &v17,
                  dword_1003C710,
                  &v12,
                  0x1000000,
                  0) )
      {
        (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C70C + 108))(dword_1003C70C);
      }
    }
  }
  return i;
}
// 1003C70C: using guessed type int dword_1003C70C;
// 1003C710: using guessed type int dword_1003C710;
// 1003C718: using guessed type int (__cdecl *dword_1003C718)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1006AD14: using guessed type int scale_2x;
// 1006AD3C: using guessed type int IDA__GNW95_isActive;
// 1006AD54: using guessed type char byte_1006AD54;

//----- (10002E90) --------------------------------------------------------
BOOL sub_10002E90()
{
  BOOL result; // eax
  int v1; // eax
  BOOL v2; // esi
  int v3; // eax
  BOOL v4; // esi
  int v5; // eax
  BOOL v6; // esi
  int v7; // [esp+8h] [ebp-80h]
  int v8; // [esp+5Ch] [ebp-2Ch]
  int v9; // [esp+64h] [ebp-24h]

  result = 0;
  if ( dword_1003C70C )
  {
    memset(&v7, 0, 0x7Cu);
    v7 = 124;
    v1 = (*(int (__stdcall **)(int, int *))(*(_DWORD *)dword_1003C70C + 88))(dword_1003C70C, &v7);
    v2 = v1 != 0;
    if ( v1 )
    {
      MessageBoxA(0, "GetSurfaceDesc Failed", "Hi-Res Patch Error", 0x30u);
      result = v2;
    }
    else
    {
      (*(void (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_1003C70C + 124))(dword_1003C70C, 0);
      if ( dword_1003C714 )
        (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C714 + 8))(dword_1003C714);
      dword_1003C714 = 0;
      *(_DWORD *)IDA__GNW95_DDPrimaryPalette = 0;
      if ( v8 == 8 )
      {
        v3 = ((int (__stdcall *)(IUnknown *, signed int, int *, int *, _DWORD))pUnkOuter->lpVtbl[1].Release)(
               pUnkOuter,
               68,
               dword_1003C2F8,
               &dword_1003C714,
               0);
        v4 = v3 != 0;
        if ( v3 )
        {
          MessageBoxA(0, "Palette Creation Failed", "Hi-Res Patch Error", 0x30u);
          result = v4;
        }
        else
        {
          v5 = (*(int (__stdcall **)(int, int))(*(_DWORD *)dword_1003C70C + 124))(dword_1003C70C, dword_1003C714);
          v6 = v5 != 0;
          if ( v5 )
          {
            MessageBoxA(0, "Set Palette Failed", "Hi-Res Patch Error", 0x30u);
            result = v6;
          }
          else
          {
            *(_DWORD *)IDA__GNW95_DDPrimaryPalette = dword_1003C714;
            dword_1003C2F0 = (int (__cdecl *)(_DWORD, _DWORD, _DWORD))sub_100026B0;
            dword_1003C718 = sub_10002820;
            result = 0;
          }
        }
      }
      else if ( v8 == 16 )
      {
        dword_1003C2F0 = (int (__cdecl *)(_DWORD, _DWORD, _DWORD))sub_10002760;
        if ( v9 != 2016 )
          dword_1003C2F0 = (int (__cdecl *)(_DWORD, _DWORD, _DWORD))sub_100027C0;
        dword_1003C718 = sub_100028A0;
        result = 0;
      }
      else
      {
        if ( v8 == 24 || v8 == 32 )
        {
          dword_1003C2F0 = (int (__cdecl *)(_DWORD, _DWORD, _DWORD))sub_10002700;
          dword_1003C718 = sub_10002920;
        }
        result = 0;
      }
    }
  }
  return result;
}
// 1003C2F0: using guessed type int (__cdecl *dword_1003C2F0)(_DWORD, _DWORD, _DWORD);
// 1003C704: using guessed type int IDA__GNW95_DDPrimaryPalette;
// 1003C70C: using guessed type int dword_1003C70C;
// 1003C714: using guessed type int dword_1003C714;
// 1003C718: using guessed type int (__cdecl *dword_1003C718)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (10003030) --------------------------------------------------------
signed int sub_10003030()
{
  int v1; // eax
  int v2; // [esp+34h] [ebp-88h]
  BOOL v3; // [esp+38h] [ebp-84h]
  int v4; // [esp+3Ch] [ebp-80h]
  int v5; // [esp+40h] [ebp-7Ch]
  int v6; // [esp+A4h] [ebp-18h]

  if ( !pUnkOuter )
    return 0;
  if ( dword_1003C70C )
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C70C + 8))(dword_1003C70C);
  dword_1003C70C = 0;
  *(_DWORD *)IDA__GNW95_DDPrimarySurface = 0;
  *(_DWORD *)IDA__GNW95_DDRestoreSurface = 0;
  memset(&v4, 0, 0x7Cu);
  v4 = 124;
  v5 = 1;
  v6 = 512;
  if ( ((int (__stdcall *)(IUnknown *, int *, int *, _DWORD))pUnkOuter->lpVtbl[2].QueryInterface)(
         pUnkOuter,
         &v4,
         &dword_1003C70C,
         0) )
  {
    MessageBoxA(0, "Primary Surface Creation Failed", "Hi-Res Patch Error", 0x30u);
    return -1;
  }
  *(_DWORD *)IDA__GNW95_DDPrimarySurface = dword_1003C70C;
  *(_DWORD *)IDA__GNW95_DDRestoreSurface = dword_1003C70C;
  if ( ((int (__stdcall *)(IUnknown *, _DWORD, int *, _DWORD))pUnkOuter->lpVtbl[1].AddRef)(pUnkOuter, 0, &v2, 0) )
  {
    MessageBoxA(0, "CreateClipper Failed", "Hi-Res Patch Error", 0x30u);
    return -1;
  }
  if ( (*(int (__stdcall **)(int, _DWORD, HWND))(*(_DWORD *)v2 + 32))(v2, 0, hWnd) )
  {
    MessageBoxA(0, "SetHWnd Failed", "Hi-Res Patch Error", 0x30u);
    return -1;
  }
  v1 = (*(int (__stdcall **)(int, int))(*(_DWORD *)dword_1003C70C + 112))(dword_1003C70C, v2);
  v3 = v1 != 0;
  if ( v1 == 0 )
    return 0;
  MessageBoxA(0, "SetClipper Failed", "Hi-Res Patch Error", 0x30u);
  return -1;
}
// 1003C6FC: using guessed type int IDA__GNW95_DDPrimarySurface;
// 1003C700: using guessed type int IDA__GNW95_DDRestoreSurface;
// 1003C70C: using guessed type int dword_1003C70C;

//----- (100031A0) --------------------------------------------------------
BOOL sub_100031A0()
{
  IUnknown *v0; // edx
  int v1; // eax
  BOOL v2; // esi
  int v4; // [esp+8h] [ebp-80h]
  int v5; // [esp+Ch] [ebp-7Ch]
  int v6; // [esp+10h] [ebp-78h]
  int v7; // [esp+14h] [ebp-74h]
  int v8; // [esp+70h] [ebp-18h]

  v0 = pUnkOuter;
  if ( !pUnkOuter )
    return 0;
  if ( dword_1003C710 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C710 + 8))(dword_1003C710);
    v0 = pUnkOuter;
  }
  memset(&v4, 0, 0x7Cu);
  v6 = newBytes;
  dword_1003C710 = 0;
  v4 = 124;
  v5 = 7;
  v8 = 64;
  v7 = scr_width;
  v1 = ((int (__stdcall *)(IUnknown *, int *, int *, _DWORD))v0->lpVtbl[2].QueryInterface)(v0, &v4, &dword_1003C710, 0);
  v2 = v1 != 0;
  if ( !v1 )
    return 0;
  MessageBoxA(0, "Back Surface Creation Failed", "Hi-Res Patch Error", 0x30u);
  return v2;
}
// 1003C710: using guessed type int dword_1003C710;

//----- (10003260) --------------------------------------------------------
int __thiscall sub_10003260(struct IDirectDraw *this)
{
  IUnknown *v1; // eax
  struct IUnknownVtbl *v3; // edx
  int v4; // esi
  int v5; // edi
  LPDIRECTDRAW lpDD; // [esp+Ch] [ebp-4h]

  lpDD = this;
  v1 = pUnkOuter;
  if ( !pUnkOuter )
  {
    lpDD = (LPDIRECTDRAW)pUnkOuter;
    if ( DirectDrawCreate(0, &lpDD, pUnkOuter) )
    {
      MessageBoxA(0, "Direct Draw Creation Failed", "Hi-Res Patch Error", 0x30u);
      return -1;
    }
    if ( lpDD->lpVtbl->QueryInterface(lpDD, (const IID *const )&unk_10036500, (LPVOID *)&pUnkOuter) )
    {
      MessageBoxA(0, "QueryInterface Direct Draw 7 Failed", "Hi-Res Patch Error", 0x30u);
      return -1;
    }
    if ( lpDD )
      lpDD->lpVtbl->Release(lpDD);
    *(_DWORD *)IDA__GNW95_DDObject = pUnkOuter;
    v1 = pUnkOuter;
  }
  v3 = v1->lpVtbl;
  v4 = scr_width << scale_2x;
  v5 = newBytes << scale_2x;
  if ( windowed )
  {
    if ( ((int (__stdcall *)(IUnknown *, HWND, signed int))v3[6].Release)(v1, hWnd, 8) )
    {
      MessageBoxA(0, "SetCooperativeLevel 'Normal' Failed", "Hi-Res Patch Error", 0x30u);
      return -1;
    }
  }
  else
  {
    if ( ((int (__stdcall *)(IUnknown *, HWND, signed int))v3[6].Release)(v1, hWnd, 1041) )
    {
      MessageBoxA(0, "SetCooperativeLevel 'Exclusive' Failed", "Hi-Res Patch Error", 0x30u);
      return -1;
    }
    if ( ((int (__stdcall *)(IUnknown *, int, int, int, int, _DWORD))pUnkOuter->lpVtbl[7].QueryInterface)(
           pUnkOuter,
           v4,
           v5,
           colour_bits,
           refresh_rate,
           0) == -2147467263 )
    {
      MessageBoxA(0, "The selected Display Mode is unsupported", "Hi-Res Patch Error", 0x30u);
      return -1;
    }
  }
  if ( sub_10003030() || sub_100031A0() )
    return -1;
  return -(sub_10002E90() != 0);
}
// 1003C6F8: using guessed type int IDA__GNW95_DDObject;
// 1006AD14: using guessed type int scale_2x;
// 1006AD18: using guessed type int refresh_rate;
// 1006AD55: using guessed type char windowed;

//----- (100033E0) --------------------------------------------------------
IUnknown *sub_100033E0()
{
  IUnknown *result; // eax

  result = pUnkOuter;
  if ( pUnkOuter )
  {
    if ( dword_1003C70C )
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C70C + 8))(dword_1003C70C);
    dword_1003C70C = 0;
    *(_DWORD *)IDA__GNW95_DDPrimarySurface = 0;
    *(_DWORD *)IDA__GNW95_DDRestoreSurface = 0;
    if ( dword_1003C710 )
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C710 + 8))(dword_1003C710);
    dword_1003C710 = 0;
    if ( dword_1003C714 )
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C714 + 8))(dword_1003C714);
    dword_1003C714 = 0;
    *(_DWORD *)IDA__GNW95_DDPrimaryPalette = 0;
    pUnkOuter->lpVtbl[6].AddRef(pUnkOuter);
    pUnkOuter->lpVtbl->Release(pUnkOuter);
    result = (IUnknown *)IDA__GNW95_DDObject;
    pUnkOuter = 0;
    *(_DWORD *)IDA__GNW95_DDObject = 0;
  }
  return result;
}
// 1003C6F8: using guessed type int IDA__GNW95_DDObject;
// 1003C6FC: using guessed type int IDA__GNW95_DDPrimarySurface;
// 1003C700: using guessed type int IDA__GNW95_DDRestoreSurface;
// 1003C704: using guessed type int IDA__GNW95_DDPrimaryPalette;
// 1003C70C: using guessed type int dword_1003C70C;
// 1003C710: using guessed type int dword_1003C710;
// 1003C714: using guessed type int dword_1003C714;

//----- (10003470) --------------------------------------------------------
IUnknown *sub_10003470()
{
  IUnknown *result; // eax

  result = pUnkOuter;
  if ( pUnkOuter )
    result = (IUnknown *)sub_100031A0();
  return result;
}

//----- (10003480) --------------------------------------------------------
IUnknown *__usercall sub_10003480@<eax>(int a1@<esi>)
{
  IUnknown *result; // eax

  result = pUnkOuter;
  if ( pUnkOuter )
  {
    if ( ((int (__stdcall *)(IUnknown *, int))pUnkOuter->lpVtbl[6].AddRef)(pUnkOuter, a1) )
      MessageBoxA(0, "RestoreDisplayMode Failed", "Hi-Res Patch Error", 0x30u);
    result = (IUnknown *)((int (__stdcall *)(IUnknown *, HWND))pUnkOuter->lpVtbl[6].Release)(pUnkOuter, hWnd);
    if ( result )
      result = (IUnknown *)MessageBoxA(0, "SetCooperativeLevel 'Normal' Failed", "Hi-Res Patch Error", 0x30u);
  }
  return result;
}

//----- (100034E0) --------------------------------------------------------
IUnknown *__thiscall sub_100034E0(struct IDirectDraw *this)
{
  IUnknown *result; // eax

  result = pUnkOuter;
  if ( pUnkOuter )
  {
    if ( dword_1003C70C )
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C70C + 8))(dword_1003C70C);
    dword_1003C70C = 0;
    *(_DWORD *)IDA__GNW95_DDPrimarySurface = 0;
    *(_DWORD *)IDA__GNW95_DDRestoreSurface = 0;
    if ( dword_1003C710 )
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C710 + 8))(dword_1003C710);
    dword_1003C710 = 0;
    if ( dword_1003C714 )
      (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C714 + 8))(dword_1003C714);
    dword_1003C714 = 0;
    *(_DWORD *)IDA__GNW95_DDPrimaryPalette = 0;
    sub_10003260(this);
    result = (IUnknown *)sub_100029A0((_BYTE *)IDA__cmap, 0, 256);
  }
  return result;
}
// 1003C6FC: using guessed type int IDA__GNW95_DDPrimarySurface;
// 1003C700: using guessed type int IDA__GNW95_DDRestoreSurface;
// 1003C704: using guessed type int IDA__GNW95_DDPrimaryPalette;
// 1003C70C: using guessed type int dword_1003C70C;
// 1003C710: using guessed type int dword_1003C710;
// 1003C714: using guessed type int dword_1003C714;
// 10064614: using guessed type int IDA__cmap;

//----- (10003580) --------------------------------------------------------
int __stdcall sub_10003580(_DWORD *a1, int a2, int a3)
{
  int v3; // ecx
  int v4; // ecx
  int v5; // esi
  int v7; // [esp+8h] [ebp-80h]
  int v8; // [esp+Ch] [ebp-7Ch]
  int v9; // [esp+10h] [ebp-78h]
  int v10; // [esp+14h] [ebp-74h]
  int v11; // [esp+54h] [ebp-34h]
  int v12; // [esp+5Ch] [ebp-2Ch]
  int v13; // [esp+60h] [ebp-28h]
  int v14; // [esp+64h] [ebp-24h]
  int v15; // [esp+68h] [ebp-20h]
  int v16; // [esp+70h] [ebp-18h]

  memset(&v7, 0, 0x7Cu);
  v3 = a1[2];
  v10 = a1[3];
  v12 = a1[21];
  v14 = a1[23];
  v16 = a1[26];
  v9 = v3;
  v11 = a1[19];
  v13 = a1[22];
  v4 = a1[24];
  v7 = 124;
  v8 = 4103;
  v15 = v4;
  v5 = ((int (__stdcall *)(IUnknown *, int *, int, int))pUnkOuter->lpVtbl[2].QueryInterface)(pUnkOuter, &v7, a2, a3);
  if ( v5 )
    MessageBoxA(0, "MovieDD surface creation failed", "Hi-Res Patch Error", 0x30u);
  return v5;
}

//----- (10003630) --------------------------------------------------------
void F_initFunc11()
{
  if ( graphics_mode == 1 )
  {
    dword_1006AD80 = (int (*)(void))sub_10003260;
    dword_1003C7FC = (int)sub_10002AF0;
    F_writeMem8(4939580, 0x53u, 233);
    F_writeMem32(0x4B5F3Du, 1431786065, (int)sub_100033E0);
    F_writeMemUnk(0x671F7Cu, 0, (int)sub_10002B30);
    F_writeMemUnk(0x671F78u, 0, 0);
    F_writeMemUnk(0x6721B8u, 0, (int)sub_10002B30);
    IDA__GNW95_DDObject = F_ptrCorrection_(5480144);
    IDA__GNW95_DDPrimarySurface = F_ptrCorrection_(5480148);
    IDA__GNW95_DDRestoreSurface = F_ptrCorrection_(5480152);
    IDA__GNW95_DDPrimaryPalette = F_ptrCorrection_(5480156);
    F_writeMem8(4939684, 0x56u, 233);
    F_writeMem32(0x4B5FA5u, -326937257, (int)sub_10002A90);
    F_writeMem8(4939932, 0x51u, 233);
    F_writeMem32(0x4B609Du, -2125113514, (int)sub_10002AB0);
    F_writeMem8(4940532, 0x53u, 233);
    F_writeMem32(0x4B62F5u, 1465274961, (int)sub_10002AD0);
    func_writeMem16(5081937, 0x8B51u, 59536);
    F_writeMem32(0x4D8B53u, 407961345, (int)sub_10003580);
    func_writeMem16(5081974, 0x8B51u, 59536);
    F_writeMem32(0x4D8B78u, 407961345, (int)sub_10003580);
  }
}
// 1003C6F8: using guessed type int IDA__GNW95_DDObject;
// 1003C6FC: using guessed type int IDA__GNW95_DDPrimarySurface;
// 1003C700: using guessed type int IDA__GNW95_DDRestoreSurface;
// 1003C704: using guessed type int IDA__GNW95_DDPrimaryPalette;
// 1003C7FC: using guessed type int dword_1003C7FC;
// 1006AD80: using guessed type int (*dword_1006AD80)(void);

//----- (100037B0) --------------------------------------------------------
#error "100037D0: positive sp value has been found (funcsize=10)"

//----- (100038F0) --------------------------------------------------------
char __thiscall sub_100038F0(_DWORD *this)
{
  int v1; // edi
  int v2; // ebp
  int *v3; // eax
  int v4; // edx
  BOOL v5; // eax
  char result; // al
  int v7; // eax
  double v8; // st7
  double v9; // st6
  int v10; // eax
  int v11; // eax
  unsigned int v12; // ecx
  double v13; // st5
  int v14; // [esp+30h] [ebp-20h]
  float v15; // [esp+34h] [ebp-1Ch]
  float v16; // [esp+38h] [ebp-18h]
  int v17; // [esp+3Ch] [ebp-14h]
  int v18; // [esp+40h] [ebp-10h]
  _DWORD *v19; // [esp+44h] [ebp-Ch]
  int v20; // [esp+48h] [ebp-8h]
  int v21; // [esp+4Ch] [ebp-4h]

  v1 = 4 * this[5];
  v2 = v1 * this[6];
  v21 = v1 * this[6];
  v18 = 8;
  if ( byte_1003C820 )
    v18 = 24;
  v3 = (int *)this[41];
  v4 = *v3;
  v19 = this + 42;
  v5 = (*(int (__stdcall **)(int *, int, int, signed int, signed int, _DWORD *, _DWORD))(v4 + 104))(
         v3,
         20 * v2,
         v18,
         258,
         1,
         this + 42,
         0) != 0;
  if ( v5 )
  {
    if ( v5 == -2005532292 )
    {
      MessageBoxA(0, "D3DERR_OUTOFVIDEOMEMORY", "Hi-Res patch Error", 0x10u);
      *v19 = 0;
      result = 0;
    }
    else if ( v5 == -2005530516 )
    {
      MessageBoxA(0, "D3DERR_INVALIDCALL", "Hi-Res patch Error", 0x10u);
      *v19 = 0;
      result = 0;
    }
    else
    {
      if ( v5 == -2147024882 )
        MessageBoxA(0, "E_OUTOFMEMORY", "Hi-Res patch Error", 0x10u);
      *v19 = 0;
      result = 0;
    }
  }
  else
  {
    v7 = *v19;
    v14 = 0;
    if ( (*(int (__stdcall **)(int, _DWORD, int, int *, _DWORD))(*(_DWORD *)v7 + 44))(v7, 0, 20 * v2, &v14, 0) )
    {
      MessageBoxA(0, "Can't lock Win Quad vertices", "Hi-Res patch Error", 0x10u);
      result = 0;
    }
    else
    {
      v8 = -0.5;
      v9 = 255.5;
      v15 = -0.5;
      v16 = 255.5;
      v18 = 0;
      if ( v2 > 0 )
      {
        v10 = 20 * v1;
        v17 = 0;
        v20 = 20 * v1;
        do
        {
          if ( v1 > 0 )
          {
            v11 = v17;
            v12 = ((unsigned int)(v1 - 1) >> 2) + 1;
            do
            {
              *(float *)(v11 + v14) = v8;
              v11 += 80;
              --v12;
              *(float *)(v11 + v14 - 76) = v15;
              *(_DWORD *)(v11 + v14 - 72) = 1036831949;
              *(_DWORD *)(v11 + v14 - 68) = 0;
              *(_DWORD *)(v11 + v14 - 64) = 0;
              *(float *)(v11 + v14 - 60) = v9;
              *(float *)(v11 + v14 - 56) = v15;
              *(_DWORD *)(v11 + v14 - 52) = 1036831949;
              *(_DWORD *)(v11 + v14 - 48) = 1065353216;
              *(_DWORD *)(v11 + v14 - 44) = 0;
              *(float *)(v11 + v14 - 40) = v9;
              *(float *)(v11 + v14 - 36) = v16;
              *(_DWORD *)(v11 + v14 - 32) = 1036831949;
              *(_DWORD *)(v11 + v14 - 28) = 1065353216;
              *(_DWORD *)(v11 + v14 - 24) = 1065353216;
              *(float *)(v11 + v14 - 20) = v8;
              *(float *)(v11 + v14 - 16) = v16;
              *(_DWORD *)(v11 + v14 - 12) = 1036831949;
              v8 = v8 + 256.0;
              *(_DWORD *)(v11 + v14 - 8) = 0;
              v9 = v8 + 256.0;
              *(_DWORD *)(v11 + v14 - 4) = 1065353216;
            }
            while ( v12 );
            v10 = v20;
            v2 = v21;
          }
          v8 = -0.5;
          v18 += v1;
          v9 = 255.5;
          v13 = v15 + 256.0;
          v17 += v10;
          v15 = v13;
          v16 = v13 + 256.0;
        }
        while ( v18 < v2 );
      }
      (*(void (__stdcall **)(_DWORD))(*(_DWORD *)*v19 + 48))(*v19);
      result = 1;
    }
  }
  return result;
}
// 1003C820: using guessed type char byte_1003C820;

//----- (10003BA0) --------------------------------------------------------
int __stdcall sub_10003BA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  int v11; // esi
  int result; // eax
  int v13; // ebp
  _BYTE *v14; // eax
  int v15; // edi
  int v16; // [esp+34h] [ebp+28h]

  v11 = a9 + a11 * a10 + a8;
  result = a7;
  v13 = a4 + a5 * a2 + a1;
  if ( a7 )
  {
    v16 = a7;
    do
    {
      if ( a6 )
      {
        v14 = (_BYTE *)v11;
        v15 = a6;
        do
        {
          *v14 = v14[v13 - v11];
          ++v14;
          --v15;
        }
        while ( v15 );
      }
      v11 += a11;
      v13 += a2;
      result = v16-- - 1;
    }
    while ( v16 );
  }
  return result;
}

//----- (10003C20) --------------------------------------------------------
int __stdcall sub_10003C20(int a1, int a2, int a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9, int a10, unsigned int a11)
{
  int v11; // esi
  int v12; // edi
  int result; // eax
  int v14; // edx
  int v15; // ebx
  unsigned int v16; // eax
  char v17; // [esp+10h] [ebp-8h]
  int v18; // [esp+14h] [ebp-4h]
  int v19; // [esp+44h] [ebp+2Ch]

  v11 = a8 + 4 * (a9 + (a11 >> 2) * a10);
  v12 = a4 + a5 * a2 + a1;
  result = (*(int (__stdcall **)(int, _DWORD, char *, _DWORD, signed int))(*(_DWORD *)dword_1003C808 + 76))(
             dword_1003C808,
             0,
             &v17,
             0,
             16);
  if ( !result )
  {
    if ( a7 )
    {
      v14 = v18;
      v19 = 4 * (a11 >> 2);
      v15 = a7;
      do
      {
        v16 = 0;
        if ( a6 )
        {
          do
          {
            *(_DWORD *)(v11 + 4 * v16) = *(_DWORD *)(v14 + 4 * *(unsigned __int8 *)(v16 + v12));
            ++v16;
          }
          while ( v16 < a6 );
        }
        v11 += v19;
        v12 += a2;
        --v15;
      }
      while ( v15 );
    }
    result = (*(int (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_1003C808 + 80))(dword_1003C808, 0);
  }
  return result;
}
// 1003C808: using guessed type int dword_1003C808;

//----- (10003CD0) --------------------------------------------------------
char __usercall sub_10003CD0@<al>(_DWORD *a1@<ecx>, int a2@<esi>)
{
  int v2; // eax
  _DWORD *v3; // ebx
  int v4; // eax
  int v5; // edx
  unsigned int v6; // esi
  char v8; // [esp+44h] [ebp-80h]
  char v9; // [esp+48h] [ebp-7Ch]
  char v10; // [esp+88h] [ebp-3Ch]

  LOBYTE(v2) = IDA__GNW95_isActive;
  v3 = a1;
  if ( *(_DWORD *)IDA__GNW95_isActive )
  {
    LOBYTE(v2) = byte_1006AD54;
    if ( !byte_1006AD54 )
    {
      v2 = a1[41];
      if ( v2 )
      {
        if ( a1[43] )
        {
          (*(void (__stdcall **)(int, int))(*(_DWORD *)v2 + 164))(v2, a2);
          (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, signed int))(*(_DWORD *)v3[41] + 400))(
            v3[41],
            0,
            v3[42],
            0,
            20);
          if ( byte_1003B060 )
          {
            D3DXMatrixTranslation(v3 + 25, *v3, v3[1], v3[2]);
            (*(void (__stdcall **)(_DWORD, signed int, char *))(*(_DWORD *)v3[41] + 180))(v3[41], 3, &v9);
            D3DXMatrixMultiply(&v10, v3 + 25, &v9);
            qmemcpy(v3 + 25, &v10, 0x40u);
            v4 = (*(int (__stdcall **)(int, _DWORD, const char *))(*(_DWORD *)dword_1003C824 + 36))(
                   dword_1003C824,
                   0,
                   "WorldViewProj");
            v5 = *(_DWORD *)dword_1003C824;
            dword_1003C848 = v4;
            (*(void (__stdcall **)(int, int, _DWORD *))(v5 + 152))(dword_1003C824, v4, v3 + 25);
          }
          else
          {
            D3DXMatrixTranslation(v3 + 25, *v3, v3[1], v3[2]);
            (*(void (__stdcall **)(_DWORD, signed int, _DWORD *))(*(_DWORD *)v3[41] + 176))(v3[41], 256, v3 + 25);
          }
          v6 = 0;
          if ( v3[7] )
          {
            do
            {
              if ( *(_BYTE *)(v6 + v3[8]) )
              {
                (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD))(*(_DWORD *)v3[41] + 260))(
                  v3[41],
                  0,
                  *(_DWORD *)(v3[43] + 4 * v6));
                if ( byte_1003B060 )
                {
                  (*(void (__stdcall **)(int, char *, _DWORD))(*(_DWORD *)dword_1003C824 + 252))(dword_1003C824, &v8, 0);
                  (*(void (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_1003C824 + 256))(dword_1003C824, 0);
                }
                (*(void (__stdcall **)(_DWORD, signed int, unsigned int, signed int))(*(_DWORD *)v3[41] + 324))(
                  v3[41],
                  6,
                  4 * v6,
                  2);
                if ( byte_1003B060 )
                {
                  (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C824 + 264))(dword_1003C824);
                  (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C824 + 268))(dword_1003C824);
                }
              }
              ++v6;
            }
            while ( v6 < v3[7] );
          }
          LOBYTE(v2) = (*(int (__cdecl **)(_DWORD))(*(_DWORD *)v3[41] + 168))(v3[41]);
        }
      }
    }
  }
  return v2;
}
// 10024C2A: using guessed type int __stdcall D3DXMatrixMultiply(_DWORD, _DWORD, _DWORD);
// 10024C36: using guessed type int __stdcall D3DXMatrixTranslation(_DWORD, _DWORD, _DWORD, _DWORD);
// 1003B060: using guessed type char byte_1003B060;
// 1003C824: using guessed type int dword_1003C824;
// 1003C848: using guessed type int dword_1003C848;
// 1006AD3C: using guessed type int IDA__GNW95_isActive;
// 1006AD54: using guessed type char byte_1006AD54;

//----- (10003EB0) --------------------------------------------------------
int __thiscall sub_10003EB0(void *this)
{
  int result; // eax

  result = sub_1000EF10(this);
  if ( result )
    result = sub_1000EC30(result, result + 8);
  return result;
}

//----- (10003EE0) --------------------------------------------------------
int __thiscall sub_10003EE0(void *this)
{
  return sub_10003EB0(this);
}

//----- (10003F00) --------------------------------------------------------
char __cdecl sub_10003F00(int *a1, int a2)
{
  int v2; // eax
  int i; // esi

  dword_1003C82C = 1;
  *(_DWORD *)IDA__doing_refresh_all = 1;
  v2 = *(_DWORD *)IDA__num_windows;
  for ( i = 0; i < *(_DWORD *)IDA__num_windows; ++i )
  {
    sub_1000EC30(*(_DWORD *)(IDA__window + 4 * i), (int)a1);
    v2 = *(_DWORD *)IDA__num_windows;
  }
  *(_DWORD *)IDA__doing_refresh_all = 0;
  if ( !a2 )
  {
    LOBYTE(v2) = sub_1000EEA0();
    if ( !(_BYTE)v2 )
    {
      LOBYTE(v2) = sub_1000FA50(a1);
      if ( (_BYTE)v2 )
        LOBYTE(v2) = IDA_mouse_show_();
    }
  }
  dword_1003C82C = 0;
  return v2;
}
// 10064550: invalid function type has been ignored
// 1003C82C: using guessed type int dword_1003C82C;
// 1003C830: using guessed type int IDA__doing_refresh_all;
// 1006453C: using guessed type int IDA__num_windows;
// 10064550: using guessed type int (*IDA_mouse_show_)(void);
// 100645A0: using guessed type int IDA__window;

//----- (10003F90) --------------------------------------------------------
int __cdecl sub_10003F90(int a1, _DWORD *a2)
{
  void *v2; // ecx
  int result; // eax
  int v4; // esi
  int v5; // [esp+4h] [ebp-10h]
  int v6; // [esp+8h] [ebp-Ch]
  int v7; // [esp+Ch] [ebp-8h]
  int v8; // [esp+10h] [ebp-4h]

  result = sub_1000EF10(v2);
  v4 = result;
  if ( result )
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
    v8 = 0;
    sub_10001000(&v5, a2);
    v5 += *(_DWORD *)(v4 + 8);
    v6 += *(_DWORD *)(v4 + 12);
    v7 += *(_DWORD *)(v4 + 8);
    v8 += *(_DWORD *)(v4 + 12);
    result = sub_1000EC30(v4, (int)&v5);
  }
  return result;
}

//----- (10004020) --------------------------------------------------------
int __usercall sub_10004020@<eax>(_DWORD *a1@<eax>)
{
  int result; // eax

  dword_1003C82C = 1;
  result = sub_10003F90(*(_DWORD *)IDA__display_win, a1);
  dword_1003C82C = 0;
  return result;
}
// 1003C82C: using guessed type int dword_1003C82C;
// 100645EC: using guessed type int IDA__display_win;

//----- (10004080) --------------------------------------------------------
int __cdecl sub_10004080(char *a1, int a2, int a3)
{
  int v3; // ebx
  int result; // eax
  char *v5; // esi
  int v6; // edi
  char v7; // dl
  char v8; // cl
  unsigned __int16 v9; // ax
  unsigned __int8 v10; // [esp+14h] [ebp-1Ch]
  char v11; // [esp+18h] [ebp-18h]
  int v12; // [esp+1Ch] [ebp-14h]
  int v13; // [esp+20h] [ebp-10h]
  int v14; // [esp+24h] [ebp-Ch]
  int v15; // [esp+28h] [ebp-8h]
  int v16; // [esp+2Ch] [ebp-4h]

  v3 = a3;
  v13 = a2;
  v15 = a3 + a2;
  v14 = 0;
  v16 = 1;
  result = (*(int (__stdcall **)(int, _DWORD, char *, int *, signed int))(*(_DWORD *)dword_1003C80C + 76))(
             dword_1003C80C,
             0,
             &v11,
             &v13,
             0x8000);
  if ( !result )
  {
    if ( v3 )
    {
      v5 = a1;
      v6 = v12;
      do
      {
        v7 = *v5;
        v8 = 4 * v5[1];
        v10 = 4 * v5[2];
        LOBYTE(a3) = v8;
        LOBYTE(a2) = 4 * v7;
        sub_10002670(&a2, &a3, &v10);
        HIBYTE(v9) = a2;
        v5 += 3;
        v6 += 4;
        LOBYTE(v9) = a3;
        --v3;
        *(_DWORD *)(v6 - 4) = v10 | (v9 << 8);
      }
      while ( v3 );
    }
    (*(void (__stdcall **)(int, int *))(*(_DWORD *)dword_1003C80C + 84))(dword_1003C80C, &v13);
    (*(void (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_1003C80C + 80))(dword_1003C80C, 0);
    (*(void (__stdcall **)(int, int, int))(*(_DWORD *)dword_1003C804 + 124))(
      dword_1003C804,
      dword_1003C80C,
      dword_1003C808);
    result = sub_1000ECB0();
  }
  return result;
}
// 1003C804: using guessed type int dword_1003C804;
// 1003C808: using guessed type int dword_1003C808;
// 1003C80C: using guessed type int dword_1003C80C;
// 1006AD00: using guessed type int IDA__scr_size;

//----- (10004180) --------------------------------------------------------
int __usercall sub_10004180@<eax>(int a1@<esi>, int a2, char a3, char a4, char a5)
{
  int result; // eax
  int v6; // ST10_4
  int *v7; // esi
  unsigned __int16 v8; // ax
  int v9; // edx
  int v10; // ecx
  char v11; // [esp+14h] [ebp-20h]
  unsigned __int8 v12; // [esp+18h] [ebp-1Ch]
  char v13; // [esp+1Ch] [ebp-18h]
  int *v14; // [esp+20h] [ebp-14h]
  int v15; // [esp+24h] [ebp-10h]
  int v16; // [esp+28h] [ebp-Ch]
  int v17; // [esp+2Ch] [ebp-8h]
  int v18; // [esp+30h] [ebp-4h]

  v15 = a2;
  v17 = a2 + 1;
  v16 = 0;
  v18 = 1;
  result = (*(int (__stdcall **)(int, _DWORD, char *, int *, signed int))(*(_DWORD *)dword_1003C80C + 76))(
             dword_1003C80C,
             0,
             &v13,
             &v15,
             0x8000);
  if ( !result )
  {
    v6 = a1;
    v7 = v14;
    v12 = 4 * a5;
    v11 = 4 * a4;
    LOBYTE(a2) = 4 * a3;
    sub_10002670(&a2, &v11, &v12);
    HIBYTE(v8) = a2;
    LOBYTE(v8) = v11;
    *v7 = v12 | (v8 << 8);
    (*(void (__stdcall **)(int, int *, int, _DWORD, _DWORD))(*(_DWORD *)dword_1003C80C + 84))(
      dword_1003C80C,
      &v15,
      v6,
      *(_DWORD *)&v11,
      *(_DWORD *)&v12);
    v9 = *(_DWORD *)dword_1003C80C;
    *(_DWORD *)&v12 = 0;
    *(_DWORD *)&v11 = dword_1003C80C;
    (*(void (__stdcall **)(int, _DWORD))(v9 + 80))(dword_1003C80C, 0);
    v10 = *(_DWORD *)dword_1003C804;
    *(_DWORD *)&v12 = dword_1003C808;
    *(_DWORD *)&v11 = dword_1003C80C;
    (*(void (__cdecl **)(int, int, int))(v10 + 124))(dword_1003C804, dword_1003C80C, dword_1003C808);
    result = sub_1000ECB0();
  }
  return result;
}
// 10004180: could not find valid save-restore pair for esi
// 1003C804: using guessed type int dword_1003C804;
// 1003C808: using guessed type int dword_1003C808;
// 1003C80C: using guessed type int dword_1003C80C;
// 1006AD00: using guessed type int IDA__scr_size;

//----- (10004260) --------------------------------------------------------
int __usercall sub_10004260@<eax>(int a1@<eax>, char a2@<dl>, int a3@<esi>)
{
  char v4; // [esp+0h] [ebp-14h]
  char v5; // [esp+4h] [ebp-10h]

  return sub_10004180(a3, a1, a2, v4, v5);
}

//----- (10004280) --------------------------------------------------------
int __usercall sub_10004280@<eax>(char *a1@<eax>, int a2@<edx>)
{
  int v3; // [esp+0h] [ebp-14h]

  return sub_10004080(a1, a2, v3);
}

//----- (100042A0) --------------------------------------------------------
int __usercall sub_100042A0@<eax>(char *a1@<eax>)
{
  return sub_10004080(a1, 0, 256);
}

//----- (100042C0) --------------------------------------------------------
signed int __stdcall sub_100042C0(int a1, int a2, int a3, _DWORD *a4)
{
  _DWORD *v5; // eax
  int v6; // ecx
  int v7; // edx
  char v8; // [esp+10h] [ebp-18h]
  int v9; // [esp+14h] [ebp-14h]
  int v10; // [esp+18h] [ebp-10h]
  int v11; // [esp+1Ch] [ebp-Ch]
  int v12; // [esp+20h] [ebp-8h]
  int v13; // [esp+24h] [ebp-4h]

  if ( !a4 )
    return 1;
  v10 = a2;
  v12 = a3 + a2;
  v11 = 0;
  v13 = 1;
  if ( (*(int (__stdcall **)(int, _DWORD, char *, int *, signed int))(*(_DWORD *)dword_1003C80C + 76))(
         dword_1003C80C,
         0,
         &v8,
         &v10,
         0x8000) )
  {
    return 1;
  }
  if ( a3 )
  {
    v5 = a4;
    v6 = v9 - (_DWORD)a4;
    v7 = a3;
    do
    {
      *v5 = *(_DWORD *)((char *)v5 + v6);
      ++v5;
      --v7;
    }
    while ( v7 );
  }
  (*(void (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_1003C80C + 80))(dword_1003C80C, 0);
  return 0;
}
// 1003C80C: using guessed type int dword_1003C80C;

//----- (10004360) --------------------------------------------------------
int __usercall sub_10004360@<eax>(int a1@<ebx>, int a2@<esi>)
{
  int result; // eax
  int v3; // eax
  int v4; // esi
  char v5; // [esp+14h] [ebp-48h]
  int v6; // [esp+28h] [ebp-34h]
  int v7; // [esp+2Ch] [ebp-30h]
  int v8; // [esp+30h] [ebp-2Ch]
  int v9; // [esp+34h] [ebp-28h]
  int v10; // [esp+38h] [ebp-24h]
  int v11; // [esp+44h] [ebp-18h]
  HWND v12; // [esp+48h] [ebp-14h]
  int v13; // [esp+4Ch] [ebp-10h]
  int retaddr; // [esp+5Ch] [ebp+0h]

  if ( !dword_1003C800 )
    return -1;
  v3 = (*(int (__stdcall **)(int, _DWORD, char *, int, int))(*(_DWORD *)dword_1003C800 + 32))(
         dword_1003C800,
         0,
         &v5,
         a2,
         a1);
  v4 = v3 == 0 ? v6 : 0;
  if ( !windowed )
  {
    if ( colour_bits == 16 )
    {
      if ( !(*(int (__stdcall **)(int, _DWORD, signed int, signed int, signed int, _DWORD))(*(_DWORD *)dword_1003C800
                                                                                          + 36))(
              dword_1003C800,
              0,
              1,
              23,
              23,
              0) )
        v4 = 23;
    }
    else if ( (colour_bits == 24 || colour_bits == 32)
           && !(*(int (__stdcall **)(int, _DWORD, signed int, signed int, signed int, _DWORD))(*(_DWORD *)dword_1003C800
                                                                                             + 36))(
                 dword_1003C800,
                 0,
                 1,
                 22,
                 22,
                 0) )
    {
      v4 = 22;
    }
  }
  memset(&v7, 0, 0x38u);
  v9 = v4;
  v7 = scr_width << scale_2x;
  v8 = newBytes << scale_2x;
  v10 = 1;
  v12 = hWnd;
  if ( windowed )
  {
    v13 = 1;
    v11 = 1;
    retaddr = 0;
  }
  else
  {
    v13 = 0;
    v11 = 3;
    retaddr = refresh_rate;
  }
  if ( dword_1003C804 )
    return (*(int (__cdecl **)(int, int *))(*(_DWORD *)dword_1003C804 + 64))(dword_1003C804, &v7);
  result = (*(int (__stdcall **)(int, _DWORD, signed int, HWND, signed int))(*(_DWORD *)dword_1003C800 + 64))(
             dword_1003C800,
             0,
             1,
             hWnd,
             64) != 0;
  if ( result )
  {
    byte_1003C820 = 1;
    result = (*(int (__stdcall **)(int, _DWORD, signed int, HWND, signed int, int *, int *))(*(_DWORD *)dword_1003C800
                                                                                           + 64))(
               dword_1003C800,
               0,
               1,
               hWnd,
               32,
               &v7,
               &dword_1003C804) != 0;
  }
  return result;
}
// 1003C800: using guessed type int dword_1003C800;
// 1003C804: using guessed type int dword_1003C804;
// 1003C820: using guessed type char byte_1003C820;
// 1006AD14: using guessed type int scale_2x;
// 1006AD18: using guessed type int refresh_rate;
// 1006AD55: using guessed type char windowed;

//----- (10004640) --------------------------------------------------------
int __stdcall sub_10004640(_DWORD *a1, int a2, int a3)
{
  int v3; // ecx
  int v4; // ecx
  unsigned int v5; // esi
  void *v6; // eax

  dword_1003C720 = 108;
  dword_1003C72C = a1[3];
  v3 = a1[2];
  dword_1003C728 = v3;
  v4 = dword_1003C72C * v3;
  dword_1003C730 = a1[3];
  dword_1003C774 = a1[21];
  v5 = v4;
  if ( dword_1003C774 == 16 )
    v5 = 2 * v4;
  if ( dword_1003C744 )
    j__free(dword_1003C744);
  v6 = operator new(v5);
  dword_1003C744 = v6;
  memset(v6, 0, v5);
  return 0;
}
// 1003C720: using guessed type int dword_1003C720;
// 1003C728: using guessed type int dword_1003C728;
// 1003C72C: using guessed type int dword_1003C72C;
// 1003C730: using guessed type int dword_1003C730;
// 1003C774: using guessed type int dword_1003C774;

//----- (100046C0) --------------------------------------------------------
int __stdcall sub_100046C0(_DWORD *a1, int a2, int a3)
{
  int v3; // ecx
  int v4; // ecx
  unsigned int v5; // esi
  void *v6; // eax

  dword_1003C790 = 108;
  dword_1003C79C = a1[3];
  v3 = a1[2];
  dword_1003C798 = v3;
  v4 = dword_1003C79C * v3;
  dword_1003C7A0 = a1[3];
  dword_1003C7E4 = a1[21];
  v5 = v4;
  if ( dword_1003C7E4 == 16 )
    v5 = 2 * v4;
  if ( dword_1003C7B4 )
    j__free(dword_1003C7B4);
  v6 = operator new(v5);
  dword_1003C7B4 = v6;
  memset(v6, 0, v5);
  return 0;
}
// 1003C790: using guessed type int dword_1003C790;
// 1003C798: using guessed type int dword_1003C798;
// 1003C79C: using guessed type int dword_1003C79C;
// 1003C7A0: using guessed type int dword_1003C7A0;
// 1003C7E4: using guessed type int dword_1003C7E4;

//----- (10004740) --------------------------------------------------------
int __stdcall sub_10004740(int a1, int a2, _DWORD *a3, int a4, int a5)
{
  a3[3] = dword_1003C72C;
  a3[2] = dword_1003C728;
  a3[4] = dword_1003C730;
  a3[9] = dword_1003C744;
  return 0;
}
// 1003C728: using guessed type int dword_1003C728;
// 1003C72C: using guessed type int dword_1003C72C;
// 1003C730: using guessed type int dword_1003C730;

//----- (100047A0) --------------------------------------------------------
int __stdcall sub_100047A0(int a1, int a2, _DWORD *a3, int a4, int a5)
{
  a3[3] = dword_1003C79C;
  a3[2] = dword_1003C798;
  a3[4] = dword_1003C7A0;
  a3[9] = dword_1003C7B4;
  return 0;
}
// 1003C798: using guessed type int dword_1003C798;
// 1003C79C: using guessed type int dword_1003C79C;
// 1003C7A0: using guessed type int dword_1003C7A0;

//----- (100047D0) --------------------------------------------------------
void *sub_100047D0()
{
  void *result; // eax

  result = dword_1003C744;
  dword_1003C744 = dword_1003C7B4;
  dword_1003C7B4 = result;
  return result;
}

//----- (100047F0) --------------------------------------------------------
_DWORD *__thiscall sub_100047F0(_DWORD *this, int a2, int a3, int a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6; // edi
  _DWORD *v7; // esi
  _DWORD *result; // eax
  unsigned int v9; // eax
  _DWORD *v10; // eax
  signed int v11; // ebx

  v6 = 0;
  v7 = this;
  this[2] = 0;
  if ( a2 )
  {
    this[41] = a2;
    this[1] = a4;
    *this = a3;
    this[3] = a5;
    this[4] = a6;
    this[5] = a5 >> 8;
    if ( a5 >> 8 << 8 < a5 )
      this[5] = (a5 >> 8) + 1;
    this[6] = a6 >> 8;
    if ( a6 >> 8 << 8 < a6 )
      this[6] = (a6 >> 8) + 1;
    v9 = this[6] * this[5];
    this[7] = v9;
    v10 = operator new(v9);
    v7[8] = v10;
    *v10 = 0;
    if ( sub_100038F0(v7) )
    {
      v7[43] = operator new(4 * v7[7]);
      v7[44] = operator new(4 * v7[7]);
      v11 = 22;
      if ( byte_1003B060 )
        v11 = 50;
      if ( v7[7] > 0u )
      {
        do
        {
          (*(void (__stdcall **)(_DWORD, signed int, signed int, signed int, _DWORD, signed int, _DWORD, unsigned int, _DWORD))(*(_DWORD *)v7[41] + 92))(
            v7[41],
            256,
            256,
            1,
            0,
            v11,
            0,
            4 * v6 + v7[43],
            0);
          (*(void (__stdcall **)(_DWORD, signed int, signed int, signed int, _DWORD, signed int, signed int, unsigned int, _DWORD))(*(_DWORD *)v7[41] + 92))(
            v7[41],
            256,
            256,
            1,
            0,
            v11,
            2,
            4 * v6++ + v7[44],
            0);
        }
        while ( v6 < v7[7] );
      }
      (*(void (__stdcall **)(_DWORD, signed int))(*(_DWORD *)v7[41] + 356))(v7[41], 258);
      (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD, _DWORD, signed int))(*(_DWORD *)v7[41] + 400))(
        v7[41],
        0,
        v7[42],
        0,
        20);
      result = v7;
    }
    else
    {
      MessageBoxA(0, "CreateWinVB failed", "Hi-Res patch Error", 0x10u);
      result = v7;
    }
  }
  else
  {
    *this = 0;
    this[1] = 0;
    this[3] = 0;
    this[4] = 0;
    this[5] = 0;
    this[6] = 0;
    this[7] = 0;
    this[8] = 0;
    this[41] = 0;
    this[42] = 0;
    this[43] = 0;
    this[44] = 0;
    result = this;
  }
  return result;
}
// 1003B060: using guessed type char byte_1003B060;

//----- (100049A0) --------------------------------------------------------
int sub_100049A0()
{
  void *v0; // edi
  int result; // eax

  if ( dword_1003C83C )
  {
    v0 = dword_1003C83C;
    sub_10005570((void **)dword_1003C83C);
    j__free(v0);
  }
  dword_1003C83C = 0;
  if ( dword_1003C824 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C824 + 8))(dword_1003C824);
    dword_1003C824 = 0;
  }
  if ( dword_1003C808 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C808 + 8))(dword_1003C808);
    dword_1003C808 = 0;
  }
  if ( dword_1003C80C )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C80C + 8))(dword_1003C80C);
    dword_1003C80C = 0;
  }
  if ( dword_1003C804 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C804 + 8))(dword_1003C804);
    dword_1003C804 = 0;
  }
  result = dword_1003C800;
  if ( dword_1003C800 )
  {
    result = (*(int (__stdcall **)(int))(*(_DWORD *)dword_1003C800 + 8))(dword_1003C800);
    dword_1003C800 = 0;
  }
  return result;
}
// 100049A0: using guessed type int sub_100049A0();
// 1003C800: using guessed type int dword_1003C800;
// 1003C804: using guessed type int dword_1003C804;
// 1003C808: using guessed type int dword_1003C808;
// 1003C80C: using guessed type int dword_1003C80C;
// 1003C824: using guessed type int dword_1003C824;

//----- (10004A30) --------------------------------------------------------
signed int __usercall sub_10004A30@<eax>(int a1@<esi>)
{
  int v2; // ST80_4
  float v3; // ST70_4
  float v4; // ST6C_4
  int v5; // esi
  void *v6; // edi
  _DWORD *v7; // eax
  _DWORD *v8; // eax
  char v9; // [esp+88h] [ebp-4Ch]
  int v10; // [esp+D0h] [ebp-4h]

  if ( !dword_1003C804 )
    return -1;
  v2 = a1;
  (*(void (__stdcall **)(int, signed int, _DWORD))(*(_DWORD *)dword_1003C804 + 228))(dword_1003C804, 137, 0);
  (*(void (__stdcall **)(int, signed int, _DWORD))(*(_DWORD *)dword_1003C804 + 228))(dword_1003C804, 27, 0);
  (*(void (__stdcall **)(int, signed int, _DWORD))(*(_DWORD *)dword_1003C804 + 228))(dword_1003C804, 15, 0);
  (*(void (__stdcall **)(int, signed int, _DWORD))(*(_DWORD *)dword_1003C804 + 228))(dword_1003C804, 7, 0);
  (*(void (__stdcall **)(int, signed int, signed int))(*(_DWORD *)dword_1003C804 + 228))(dword_1003C804, 22, 3);
  (*(void (__stdcall **)(int, _DWORD, signed int, signed int))(*(_DWORD *)dword_1003C804 + 276))(
    dword_1003C804,
    0,
    5,
    1);
  (*(void (__stdcall **)(int, _DWORD, signed int, signed int))(*(_DWORD *)dword_1003C804 + 276))(
    dword_1003C804,
    0,
    6,
    1);
  v3 = (double)newBytes;
  v4 = (double)scr_width;
  D3DXMatrixOrthoOffCenterLH(&v9, 0, LODWORD(v4), LODWORD(v3), 0, -1090519040, 1056964608);
  v5 = (*(int (__stdcall **)(int, signed int, char *))(*(_DWORD *)dword_1003C804 + 176))(dword_1003C804, 3, &v9);
  sub_100037B0(&v9, v2);
  if ( dword_1003C83C )
  {
    v6 = dword_1003C83C;
    sub_10005570((void **)dword_1003C83C);
    j__free(v6);
  }
  v7 = operator new(0xB4u);
  v10 = 0;
  if ( v7 )
    v8 = sub_100047F0(v7, dword_1003C804, 0, 0, scr_width, newBytes);
  else
    v8 = 0;
  dword_1003C83C = v8;
  return v5;
}
// 10004A30: could not find valid save-restore pair for esi
// 10024C3C: using guessed type int __stdcall D3DXMatrixOrthoOffCenterLH(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 1003C804: using guessed type int dword_1003C804;

//----- (10004BB0) --------------------------------------------------------
int __usercall sub_10004BB0@<eax>(int a1@<ebx>, int a2@<esi>)
{
  IDirect3D9 *v2; // eax
  signed int v4; // ecx
  char v5; // [esp+0h] [ebp-130h]
  unsigned int v6; // [esp+C4h] [ebp-6Ch]
  unsigned int v7; // [esp+CCh] [ebp-64h]

  v2 = (IDirect3D9 *)dword_1003C800;
  if ( !dword_1003C800 )
  {
    v2 = Direct3DCreate9(0x20u);
    dword_1003C800 = (int)v2;
    if ( !v2 )
    {
      MessageBoxA(0, "Direct 3D Object Creation Failed", "Hi-Res Patch Error", 0x30u);
      return -1;
    }
  }
  *(_DWORD *)IDA__GNW95_DDObject__1 = v2;
  if ( dword_1003C804 )
    return 0;
  if ( sub_10004360(a1, a2) )
    return -1;
  (*(void (__stdcall **)(int, char *))(*(_DWORD *)dword_1003C804 + 28))(dword_1003C804, &v5);
  if ( v6 < 0xFFFE0200 )
    byte_1003B060 = 0;
  if ( v7 < 0xFFFE0200 )
    byte_1003B060 = 0;
  v4 = 0;
  if ( !byte_1003B060 )
    v4 = 512;
  if ( (*(int (__stdcall **)(int, signed int, signed int, signed int, signed int, signed int, _DWORD, int *, _DWORD))(*(_DWORD *)dword_1003C804 + 92))(
         dword_1003C804,
         256,
         1,
         1,
         v4,
         22,
         0,
         &dword_1003C808,
         0)
    || (*(int (__stdcall **)(int, signed int, signed int, signed int, _DWORD, signed int, signed int, int *, _DWORD))(*(_DWORD *)dword_1003C804 + 92))(
         dword_1003C804,
         256,
         1,
         1,
         0,
         22,
         2,
         &dword_1003C80C,
         0) )
  {
    return -1;
  }
  return -(sub_10004A30(a2) != 0);
}
// 1003B060: using guessed type char byte_1003B060;
// 1003C800: using guessed type int dword_1003C800;
// 1003C804: using guessed type int dword_1003C804;
// 1003C808: using guessed type int dword_1003C808;
// 1003C80C: using guessed type int dword_1003C80C;
// 1003C810: using guessed type int IDA__GNW95_DDObject__1;

//----- (10004CC0) --------------------------------------------------------
int __usercall sub_10004CC0@<eax>(int a1@<ebx>, int a2@<esi>)
{
  int v2; // ST20_4
  void *v3; // esi
  int result; // eax
  signed int v5; // ecx

  if ( !dword_1003C804 )
    return -1;
  if ( dword_1003C83C )
  {
    v2 = a2;
    v3 = dword_1003C83C;
    sub_10005570((void **)dword_1003C83C);
    j__free(v3);
    a2 = v2;
  }
  dword_1003C83C = 0;
  if ( dword_1003C808 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C808 + 8))(dword_1003C808);
    dword_1003C808 = 0;
  }
  if ( dword_1003C824 )
  {
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C824 + 276))(dword_1003C824);
    (*(void (__stdcall **)(int))(*(_DWORD *)dword_1003C824 + 8))(dword_1003C824);
    dword_1003C824 = 0;
  }
  result = sub_10004360(a1, a2);
  if ( !result )
  {
    v5 = 0;
    if ( !byte_1003B060 )
      v5 = 512;
    if ( !(*(int (__stdcall **)(int, signed int, signed int, signed int, signed int, signed int, _DWORD, int *, _DWORD))(*(_DWORD *)dword_1003C804 + 92))(
            dword_1003C804,
            256,
            1,
            1,
            v5,
            22,
            0,
            &dword_1003C808,
            0) )
    {
      (*(void (__stdcall **)(int, _DWORD))(*(_DWORD *)dword_1003C80C + 84))(dword_1003C80C, 0);
      (*(void (__stdcall **)(int, int, int))(*(_DWORD *)dword_1003C804 + 124))(
        dword_1003C804,
        dword_1003C80C,
        dword_1003C808);
      return sub_10004A30(a2);
    }
    return -1;
  }
  return result;
}
// 1003B060: using guessed type char byte_1003B060;
// 1003C804: using guessed type int dword_1003C804;
// 1003C808: using guessed type int dword_1003C808;
// 1003C80C: using guessed type int dword_1003C80C;
// 1003C824: using guessed type int dword_1003C824;

//----- (10004DA0) --------------------------------------------------------
char __userpurge sub_10004DA0@<al>(_DWORD *a1@<ecx>, int a2@<ebx>, int a3, int a4, int a5, int a6, int a7, unsigned int a8, int a9, unsigned int a10, unsigned int a11)
{
  int v11; // eax
  int v12; // esi
  unsigned int v13; // ebp
  int v14; // ST34_4
  int v15; // edx
  unsigned int v16; // ebx
  int v17; // ST2C_4
  int v18; // edx
  int v19; // eax
  int v20; // ecx
  unsigned int v21; // eax
  int v22; // ebx
  int v23; // edi
  int v24; // eax
  int v25; // ecx
  unsigned int v26; // eax
  bool v27; // cf
  int v28; // ebx
  int v29; // esi
  int v31; // [esp+48h] [ebp-50h]
  unsigned int v32; // [esp+50h] [ebp-48h]
  int v33; // [esp+54h] [ebp-44h]
  unsigned int v34; // [esp+58h] [ebp-40h]
  unsigned int v35; // [esp+60h] [ebp-38h]
  int v36; // [esp+64h] [ebp-34h]
  int v37; // [esp+68h] [ebp-30h]
  unsigned int v38; // [esp+6Ch] [ebp-2Ch]
  int v39; // [esp+70h] [ebp-28h]
  int v40; // [esp+74h] [ebp-24h]
  int v41; // [esp+7Ch] [ebp-1Ch]
  int v42; // [esp+84h] [ebp-14h]
  unsigned int v43; // [esp+88h] [ebp-10h]
  unsigned int v44; // [esp+90h] [ebp-8h]
  unsigned int v45; // [esp+94h] [ebp-4h]

  LOBYTE(v11) = IDA__GNW95_isActive;
  v12 = (int)a1;
  if ( *(_DWORD *)IDA__GNW95_isActive )
  {
    LOBYTE(v11) = byte_1006AD54;
    if ( !byte_1006AD54 )
    {
      v11 = a1[41];
      if ( v11 )
      {
        v11 = a1[43];
        if ( v11 )
        {
          v11 = a1[44];
          if ( v11 )
          {
            v31 = a2;
            v13 = a8;
            v43 = a10 >> 8;
            v14 = a1[42];
            v44 = (((a10 + a8) & 0xFFFFFF00) + 256) >> 8;
            v15 = *(_DWORD *)a1[41];
            v16 = (((a9 + a11) & 0xFFFFFF00) + 256) >> 8;
            v17 = a1[41];
            v45 = (((a9 + a11) & 0xFFFFFF00) + 256) >> 8;
            (*(void (__stdcall **)(int, _DWORD, int, _DWORD, signed int))(v15 + 400))(v17, 0, v14, 0, 20);
            v18 = (a11 >> 8) * *(_DWORD *)(v12 + 20);
            v33 = (a11 >> 8) * *(_DWORD *)(v12 + 20);
            v34 = a11 >> 8;
            if ( a11 >> 8 < v16 )
            {
              do
              {
                v19 = a11 - (v34 << 8);
                v41 = a7;
                v20 = v19 + a9;
                v38 = a11 - (v34 << 8);
                v40 = v19 + a9;
                v42 = a9;
                if ( (signed int)(a11 - (v34 << 8)) >= 0 )
                {
                  v20 = v40;
                }
                else
                {
                  v41 = a7 - v19;
                  v18 = v33;
                  v42 = v19 + a9;
                  v38 = 0;
                  v40 = v19 + a9;
                }
                if ( v20 > 256 )
                {
                  v42 += 256 - v20;
                  v40 = 256;
                }
                v21 = v43;
                v32 = v43;
                if ( v43 < v44 )
                {
                  v22 = 4 * (v18 + v43);
                  do
                  {
                    v23 = a6;
                    v24 = a10 - (v21 << 8);
                    v25 = v24 + v13;
                    v37 = v24;
                    v39 = v24 + v13;
                    if ( v24 < 0 )
                    {
                      v23 = a6 - v24;
                      v13 += v24;
                      v37 = 0;
                      v39 = v25;
                    }
                    if ( v25 > 256 )
                    {
                      v13 += 256 - v25;
                      v39 = 256;
                    }
                    v26 = v32;
                    if ( v32 < *(_DWORD *)(v12 + 20) && v32 + v33 < *(_DWORD *)(v12 + 28) )
                    {
                      if ( !(*(int (__stdcall **)(_DWORD, _DWORD, unsigned int *, int *, signed int))(**(_DWORD **)(v22 + *(_DWORD *)(v12 + 176)) + 76))(
                              *(_DWORD *)(v22 + *(_DWORD *)(v12 + 176)),
                              0,
                              &v35,
                              &v37,
                              0x8000) )
                      {
                        if ( byte_1003B060 )
                          sub_10003BA0(a3, a4, a5, v23, v41, v13, v42, v36, 0, 0, v35);
                        else
                          sub_10003C20(a3, a4, a5, v23, v41, v13, v42, v36, 0, 0, v35);
                        (*(void (__stdcall **)(_DWORD, int *))(**(_DWORD **)(v22 + *(_DWORD *)(v12 + 176)) + 84))(
                          *(_DWORD *)(v22 + *(_DWORD *)(v12 + 176)),
                          &v37);
                        (*(void (__stdcall **)(_DWORD, _DWORD))(**(_DWORD **)(v22 + *(_DWORD *)(v12 + 176)) + 80))(
                          *(_DWORD *)(v22 + *(_DWORD *)(v12 + 176)),
                          0);
                        (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD))(**(_DWORD **)(v12 + 164) + 124))(
                          *(_DWORD *)(v12 + 164),
                          *(_DWORD *)(v22 + *(_DWORD *)(v12 + 176)),
                          *(_DWORD *)(v22 + *(_DWORD *)(v12 + 172)));
                        (*(void (__stdcall **)(_DWORD, _DWORD, _DWORD))(**(_DWORD **)(v12 + 164) + 260))(
                          *(_DWORD *)(v12 + 164),
                          0,
                          *(_DWORD *)(v22 + *(_DWORD *)(v12 + 172)));
                        *(_BYTE *)(v32 + v33 + *(_DWORD *)(v12 + 32)) = 1;
                      }
                      v26 = v32;
                    }
                    v13 = a8;
                    v21 = v26 + 1;
                    v22 += 4;
                    v32 = v21;
                  }
                  while ( v21 < v44 );
                  v16 = v45;
                  v18 = v33;
                }
                v18 += *(_DWORD *)(v12 + 20);
                v27 = v34 + 1 < v16;
                v33 = v18;
                ++v34;
              }
              while ( v27 );
            }
            LOBYTE(v11) = dword_1003C82C;
            v28 = v31;
            if ( dword_1003C82C )
            {
              byte_1003C828 = 1;
            }
            else
            {
              sub_10003CD0((_DWORD *)v12, v12);
              byte_1003C828 = 0;
              v11 = (*(int (__stdcall **)(_DWORD, _DWORD, _DWORD, HWND, _DWORD))(**(_DWORD **)(v12 + 164) + 68))(
                      *(_DWORD *)(v12 + 164),
                      0,
                      0,
                      hWnd,
                      0);
              if ( v11 == -2005530520 )
              {
                v29 = *(_DWORD *)(v12 + 164);
                v11 = (*(int (__stdcall **)(int))(*(_DWORD *)v29 + 12))(v29);
                if ( v11 == -2005530519 )
                  LOBYTE(v11) = sub_10004CC0(v28, v29);
              }
            }
          }
        }
      }
    }
  }
  return v11;
}
// 10004DA0: could not find valid save-restore pair for ebx
// 1003B060: using guessed type char byte_1003B060;
// 1003C828: using guessed type char byte_1003C828;
// 1003C82C: using guessed type int dword_1003C82C;
// 1006AD3C: using guessed type int IDA__GNW95_isActive;
// 1006AD54: using guessed type char byte_1006AD54;

//----- (10005100) --------------------------------------------------------
char __usercall sub_10005100@<al>(int a1@<ebx>, int a2@<esi>)
{
  int v2; // eax

  LOBYTE(v2) = IDA__GNW95_isActive;
  if ( *(_DWORD *)IDA__GNW95_isActive )
  {
    LOBYTE(v2) = byte_1006AD54;
    if ( !byte_1006AD54 )
    {
      LOBYTE(v2) = dword_1003C82C;
      if ( !dword_1003C82C )
      {
        v2 = dword_1003C804;
        if ( dword_1003C804 )
        {
          if ( byte_1003C828 )
          {
            if ( dword_1003C83C )
            {
              sub_10003CD0(dword_1003C83C, a2);
              v2 = dword_1003C804;
            }
            v2 = (*(int (__stdcall **)(int, _DWORD, _DWORD, HWND, _DWORD))(*(_DWORD *)v2 + 68))(v2, 0, 0, hWnd, 0);
            if ( v2 == -2005530520 )
            {
              v2 = (*(int (__stdcall **)(int))(*(_DWORD *)dword_1003C804 + 12))(dword_1003C804);
              if ( v2 == -2005530519 )
                LOBYTE(v2) = sub_10004CC0(a1, a2);
            }
            byte_1003C828 = 0;
          }
        }
      }
    }
  }
  return v2;
}
// 1003C804: using guessed type int dword_1003C804;
// 1003C828: using guessed type char byte_1003C828;
// 1003C82C: using guessed type int dword_1003C82C;
// 1006AD3C: using guessed type int IDA__GNW95_isActive;
// 1006AD54: using guessed type char byte_1006AD54;

//----- (10005180) --------------------------------------------------------
int __usercall sub_10005180@<eax>(int *a1@<eax>, int a2@<edx>, int a3@<ebx>, int a4@<esi>)
{
  int v4; // eax
  int v5; // ST00_4

  LOBYTE(v4) = sub_10003F00(a1, a2);
  v5 = v4;
  sub_10005100(a3, a4);
  return v5;
}

//----- (100051A0) --------------------------------------------------------
char __usercall sub_100051A0@<al>(int a1@<ebx>, int a2, int a3, int a4, int a5, int a6, unsigned int a7, int a8, unsigned int a9, unsigned int a10)
{
  char result; // al

  if ( dword_1003C83C )
    result = sub_10004DA0(dword_1003C83C, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

//----- (100051E0) --------------------------------------------------------
void F_initFunc12()
{
  int v0; // eax
  int v1; // eax

  if ( graphics_mode == 2 )
  {
    dword_1006AD80 = (int (*)(void))sub_10004BB0;
    dword_1003C7FC = (int)sub_100042C0;
    F_writeMem8(4939580, 0x53u, 233);
    F_writeMem32(0x4B5F3Du, 1431786065, (int)sub_100049A0);
    F_writeMemUnk(0x671F7Cu, 0, (int)sub_100051A0);
    F_writeMemUnk(0x671F78u, 0, 0);
    F_writeMemUnk(0x6721B8u, 0, (int)sub_100051A0);
    IDA__GNW95_DDObject__1 = F_ptrCorrection_(5480144);
    IDA__GNW95_DDPrimarySurface__1 = F_ptrCorrection_(5480148);
    IDA__GNW95_DDRestoreSurface__1 = F_ptrCorrection_(5480152);
    IDA__GNW95_DDPrimaryPalette__1 = F_ptrCorrection_(5480156);
    F_writeMem8(4939684, 0x56u, 233);
    F_writeMem32(0x4B5FA5u, -326937257, (int)sub_10004260);
    F_writeMem8(4939932, 0x51u, 233);
    F_writeMem32(0x4B609Du, -2125113514, (int)sub_10004280);
    F_writeMem8(4940532, 0x53u, 233);
    F_writeMem32(0x4B62F5u, 1465274961, (int)sub_100042A0);
    func_writeMem16(5082098, 0x7674u, 37008);
    func_writeMem16(5082107, 0x6D74u, 37008);
    F_writeMem8(5082127, 0x8Bu, 232);
    F_writeMem32(0x4D8C10u, 1683029761, (int)sub_10004740);
    F_writeMem8(5082169, 0x8Bu, 232);
    F_writeMem32(0x4D8C3Au, 1683029762, (int)sub_100047A0);
    F_writeMem8(5082224, 0x6Au, 195);
    func_writeMem16(5081937, 0x8B51u, 59536);
    F_writeMem32(0x4D8B53u, 407961345, (int)sub_10004640);
    func_writeMem16(5081974, 0x8B51u, 59536);
    F_writeMem32(0x4D8B78u, 407961345, (int)sub_100046C0);
    func_writeMem16(4688942, 0x128Bu, 49201);
    F_writeMem8(4688957, 0xFFu, 232);
    F_writeMem32(0x478C3Eu, -1064999854, (int)dword_10004770);
    func_writeMem16(4689188, 0x8Bu, 49201);
    func_writeMem16(4689191, 0x90FFu, 50307);
    F_writeMemUnk(0x478D29u, 128, -1869574136);
    F_writeMem8(4690413, 0xFFu, 232);
    F_writeMem32(0x4791EEu, -1064999853, (int)dword_10004770);
    func_writeMem16(4690517, 0x92FFu, 50307);
    F_writeMem32(0x479257u, 128, -1869574136);
    F_writeMem8(5082272, 0xA1u, 233);
    v0 = F_ptrCorrection_(5483740);
    F_writeMem32(0x4D8CA1u, v0, (int)sub_100047D0);
    func_writeMem16(4994376, 0x5253u, 37008);
    F_writeMem8(4994378, 0xE8u, 233);
    F_writeMem32(0x4C354Bu, 2337, (int)sub_10003EE0);
    v1 = F_ptrCorrection_(4677756);
    F_writeMemUnk(0x473E42u, v1, (int)sub_10004020);
    IDA__doing_refresh_all = F_ptrCorrection_(6996712);
    F_writeMem24(0x4C3B91u, 615, (int)sub_10005180);
  }
}
// 10004770: using guessed type int dword_10004770[12];
// 100049A0: using guessed type int sub_100049A0();
// 1003C7FC: using guessed type int dword_1003C7FC;
// 1003C810: using guessed type int IDA__GNW95_DDObject__1;
// 1003C814: using guessed type int IDA__GNW95_DDPrimarySurface__1;
// 1003C818: using guessed type int IDA__GNW95_DDRestoreSurface__1;
// 1003C81C: using guessed type int IDA__GNW95_DDPrimaryPalette__1;
// 1003C830: using guessed type int IDA__doing_refresh_all;
// 1006AD80: using guessed type int (*dword_1006AD80)(void);

//----- (10005570) --------------------------------------------------------
void __thiscall sub_10005570(void **this)
{
  void **v1; // esi
  void *v2; // eax
  unsigned int i; // edi
  _DWORD *v4; // edx
  int v5; // ecx
  unsigned int j; // edi
  int v7; // ecx

  v1 = this;
  if ( this[8] )
    j__free(this[8]);
  if ( v1[41] )
  {
    v2 = v1[42];
    if ( v2 )
    {
      (*(void (__stdcall **)(void *))(*(_DWORD *)v2 + 8))(v1[42]);
      v1[42] = 0;
    }
    if ( v1[43] )
    {
      for ( i = 0; i < (unsigned int)v1[7]; ++i )
      {
        v4 = v1[43];
        v5 = v4[i];
        if ( v5 )
        {
          (*(void (__stdcall **)(_DWORD))(*(_DWORD *)v5 + 8))(v4[i]);
          *((_DWORD *)v1[43] + i) = 0;
        }
      }
      j__free(v1[43]);
      v1[43] = 0;
    }
    if ( v1[44] )
    {
      for ( j = 0; j < (unsigned int)v1[7]; ++j )
      {
        v7 = *((_DWORD *)v1[44] + j);
        if ( v7 )
        {
          (*(void (__stdcall **)(int))(*(_DWORD *)v7 + 8))(v7);
          *((_DWORD *)v1[44] + j) = 0;
        }
      }
      j__free(v1[44]);
      v1[44] = 0;
    }
    v1[41] = 0;
  }
}

//----- (10005660) --------------------------------------------------------
void __thiscall sub_10005660(void *this)
{
  *(_WORD *)this = 0;
  *((_WORD *)this + 1) = 0;
  *((_DWORD *)this + 1) = 0;
  *((_WORD *)this + 4) = 0;
  *((_WORD *)this + 5) = 0;
  *((_DWORD *)this + 3) = 0;
}

//----- (10005680) --------------------------------------------------------
void __thiscall sub_10005680(void *this)
{
  if ( *((_DWORD *)this + 3) )
    j__free(*((void **)this + 3));
}

//----- (10005690) --------------------------------------------------------
char *__thiscall sub_10005690(char *this)
{
  char *result; // eax
  _DWORD *v2; // ecx
  _WORD *v3; // edx
  signed int v4; // esi

  result = this;
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  *((_WORD *)this + 3) = 0;
  *((_WORD *)this + 4) = 0;
  v2 = this + 36;
  v3 = result + 22;
  v4 = 6;
  do
  {
    *(v3 - 6) = 0;
    *v3 = 0;
    *v2 = 0;
    ++v3;
    ++v2;
    --v4;
  }
  while ( v4 );
  *((_DWORD *)result + 15) = 0;
  *((_DWORD *)result + 16) = 0;
  return result;
}

//----- (10005710) --------------------------------------------------------
int __cdecl sub_10005710(signed int a1)
{
  int result; // eax

  if ( a1 < 0 || a1 > 11 )
    result = 0;
  else
    result = 1 - *(_DWORD *)(28 * a1 + IDA__art);
  return result;
}
// 1003C86C: using guessed type int IDA__art;

//----- (10005780) --------------------------------------------------------
bool __cdecl sub_10005780(int a1, int a2)
{
  bool result; // al

  if ( sub_10009BA0(a2, a1) == -1
    || sub_10009B80(a2, a1 + 4) == -1
    || sub_10009B80(a2, a1 + 6) == -1
    || sub_10009B80(a2, a1 + 8) == -1
    || sub_10009BC0(a2, a1 + 10) == -1
    || sub_10009BC0(a2, a1 + 22) == -1
    || sub_10009BE0(a2, a1 + 36) == -1 )
  {
    result = 0;
  }
  else
  {
    result = sub_10009BA0(a2, a1 + 60) != -1;
  }
  return result;
}

//----- (10005830) --------------------------------------------------------
bool __cdecl sub_10005830(int a1, int a2)
{
  unsigned int *v3; // ebx
  void *v4; // eax
  int v5; // ST08_4

  if ( sub_10009B80(a2, a1) == -1 || sub_10009B80(a2, a1 + 2) == -1 )
    return 0;
  v3 = (unsigned int *)(a1 + 4);
  if ( sub_10009BA0(a2, a1 + 4) == -1 || sub_10009B80(a2, a1 + 8) == -1 || sub_10009B80(a2, a1 + 10) == -1 )
    return 0;
  v4 = operator new(*v3);
  v5 = *v3;
  *(_DWORD *)(a1 + 12) = v4;
  return sub_10009C00(a2, (int)v4, v5) == 1;
}

//----- (100058D0) --------------------------------------------------------
char *__cdecl sub_100058D0(int a1, int a2, int a3, int a4)
{
  int v4; // edi
  char *v5; // eax
  char *v6; // ebx
  int v7; // esi
  int *v8; // eax
  int v9; // ST28_4
  int v10; // eax
  int v11; // esi
  int v12; // esi
  char *result; // eax
  int v14; // [esp+Ch] [ebp-14h]
  int v15; // [esp+10h] [ebp-10h]

  if ( a1 && a2 && (v4 = a4) != 0 && a3 )
  {
    v5 = (char *)operator new(0x44u);
    if ( v5 )
      v6 = sub_10005690(v5);
    else
      v6 = 0;
    *((_WORD *)v6 + 4) = a3;
    v7 = a4 * a3;
    *(_DWORD *)v6 = 4;
    *((_DWORD *)v6 + 15) = a4 * (a2 * a1 + 12);
    v8 = (int *)operator new(16 * a4 * a3 + 4);
    if ( v8 )
    {
      *v8 = v7;
      v9 = (int)(v8 + 1);
      `eh vector constructor iterator'(v8 + 1, 0x10u, v7, sub_10005660, sub_10005680);
      v10 = v9;
    }
    else
    {
      v10 = 0;
    }
    v11 = 0;
    *((_DWORD *)v6 + 16) = v10;
    v15 = 0;
    if ( a4 > 0 )
    {
      do
      {
        if ( a3 > 0 )
        {
          v12 = 16 * v11;
          v14 = a3;
          do
          {
            *(_WORD *)(v12 + *((_DWORD *)v6 + 16)) = a1;
            *(_WORD *)(*((_DWORD *)v6 + 16) + v12 + 2) = a2;
            *(_DWORD *)(*((_DWORD *)v6 + 16) + v12 + 4) = a2 * a1;
            *(_DWORD *)(*((_DWORD *)v6 + 16) + v12 + 12) = operator new(*(_DWORD *)(*((_DWORD *)v6 + 16) + v12 + 4));
            memset(*(void **)(*((_DWORD *)v6 + 16) + v12 + 12), 0, *(_DWORD *)(*((_DWORD *)v6 + 16) + v12 + 4));
            v12 += 16;
            --v14;
          }
          while ( v14 );
          v4 = a4;
          v11 = v15;
        }
        v15 = ++v11;
      }
      while ( v11 < v4 );
    }
    result = v6;
  }
  else
  {
    MessageBoxA(0, "CreateUnlistedFrm failed. All frm vars must be greater than 0.", "Hi-Res Patch Error", 0x30u);
    result = 0;
  }
  return result;
}

//----- (10005A80) --------------------------------------------------------
int __thiscall sub_10005A80(_DWORD *this, int a2, int a3, int a4)
{
  _DWORD *v4; // edi
  int v5; // esi
  _DWORD *v6; // eax
  int result; // eax
  _DWORD *v8; // eax

  v4 = this;
  v5 = this[a3 + 1];
  if ( v5 )
  {
    for ( ; *(_DWORD *)(v5 + 16); v5 = *(_DWORD *)(v5 + 16) )
      ;
    v8 = operator new(0x14u);
    if ( v8 )
    {
      v8[3] = 0;
      v8[4] = 0;
      *v8 = 1;
      v8[1] = a4;
      v8[2] = a2;
      *(_DWORD *)(v5 + 16) = v8;
      v8[3] = v5;
    }
    else
    {
      *(_DWORD *)(v5 + 16) = 0;
      MEMORY[0xC] = v5;
    }
    ++*v4;
    result = a4;
  }
  else
  {
    v6 = operator new(0x14u);
    if ( v6 )
    {
      v6[3] = 0;
      v6[4] = 0;
      *v6 = 1;
      v6[1] = a4;
      v6[2] = a2;
      v4[a3 + 1] = v6;
    }
    else
    {
      v4[a3 + 1] = 0;
    }
    ++*v4;
    result = a4;
  }
  return result;
}

//----- (10005B40) --------------------------------------------------------
int __thiscall sub_10005B40(_DWORD *this, char *a2, int a3)
{
  _DWORD *v3; // esi
  int v4; // eax
  _DWORD *v5; // ecx

  v3 = this;
  v4 = sub_100025E0(a2);
  v5 = (_DWORD *)v3[a3 + 1];
  if ( !v5 )
    return 0;
  while ( v5[1] != v4 )
  {
    v5 = (_DWORD *)v5[4];
    if ( !v5 )
      return 0;
  }
  return v5[2];
}

//----- (10005BE0) --------------------------------------------------------
char *__thiscall sub_10005BE0(_DWORD *this, int a2, int a3, int a4, int a5, char *a6, int a7, int *a8)
{
  _DWORD *v8; // ebx
  int v9; // edi
  _DWORD *v10; // ecx
  char *v11; // eax
  char *v12; // esi
  char *result; // eax

  v8 = this;
  v9 = sub_100025E0(a6);
  if ( a8 )
    *a8 = v9;
  v10 = (_DWORD *)v8[a7 + 1];
  if ( v10 )
  {
    while ( v10[1] != v9 )
    {
      v10 = (_DWORD *)v10[4];
      if ( !v10 )
        goto LABEL_6;
    }
    result = (char *)v10[2];
    ++*v10;
  }
  else
  {
LABEL_6:
    v11 = sub_100058D0(a2, a3, a4, a5);
    v12 = v11;
    if ( v11 )
      sub_10005A80(v8, (int)v11, a7, v9);
    result = v12;
  }
  return result;
}

//----- (10005C60) --------------------------------------------------------
int __cdecl sub_10005C60(int a1, int a2, int a3, int a4, int a5)
{
  return IDA_art_id_(a4, a2, a5);
}
// 1003C868: invalid function type has been ignored
// 1003C868: using guessed type int (__fastcall *IDA_art_id_)(_DWORD, _DWORD, _DWORD);

//----- (10005C90) --------------------------------------------------------
int sub_10005C90()
{
  return IDA_art_ptr_unlock_();
}
// 1003C864: invalid function type has been ignored
// 1003C864: using guessed type int (*IDA_art_ptr_unlock_)(void);

//----- (10005CD0) --------------------------------------------------------
int __cdecl sub_10005CD0(int a1, int a2)
{
  int v2; // ecx

  return IDA_art_ptr_lock_(v2, a2, v2);
}
// 1003C85C: invalid function type has been ignored
// 1003C85C: using guessed type int (__fastcall *IDA_art_ptr_lock_)(_DWORD, _DWORD, _DWORD);

//----- (10005CF0) --------------------------------------------------------
int __cdecl sub_10005CF0(int a1, int a2)
{
  int v2; // ecx

  return IDA_art_frame_width_(v2, a2);
}
// 1003C858: invalid function type has been ignored
// 1003C858: using guessed type int (__fastcall *IDA_art_frame_width_)(_DWORD, _DWORD);

//----- (10005D10) --------------------------------------------------------
int __cdecl sub_10005D10(int a1, int a2)
{
  int v2; // ecx

  return IDA_art_frame_length_(v2, a2);
}
// 1003C854: invalid function type has been ignored
// 1003C854: using guessed type int (__fastcall *IDA_art_frame_length_)(_DWORD, _DWORD);

//----- (10005D30) --------------------------------------------------------
int __cdecl sub_10005D30(int a1, int a2)
{
  int v2; // ecx

  return IDA_art_frame_data_(v2, a2);
}
// 1003C850: invalid function type has been ignored
// 1003C850: using guessed type int (__fastcall *IDA_art_frame_data_)(_DWORD, _DWORD);

//----- (10005D50) --------------------------------------------------------
int F_initFunc2()
{
  int result; // eax

  IDA_art_frame_data_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4296796);
  IDA_art_frame_length_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4296688);
  IDA_art_frame_width_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4296664);
  IDA_art_ptr_lock_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4295056);
  IDA_art_ptr_lock_data_ = F_ptrCorrection_(4295096);
  IDA_art_ptr_unlock_ = (int (*)(void))F_ptrCorrection_(4295312);
  IDA_art_id_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4297804);
  IDA__art__plus4 = F_ptrCorrection_(5237672);
  IDA__art = F_ptrCorrection_(5237668);
  result = F_ptrCorrection_(4296884);
  IDA_art_exists_ = result;
  return result;
}
// 1003C84C: using guessed type int IDA__art__plus4;
// 1003C850: using guessed type int (__fastcall *IDA_art_frame_data_)(_DWORD, _DWORD);
// 1003C854: using guessed type int (__fastcall *IDA_art_frame_length_)(_DWORD, _DWORD);
// 1003C858: using guessed type int (__fastcall *IDA_art_frame_width_)(_DWORD, _DWORD);
// 1003C85C: using guessed type int (__fastcall *IDA_art_ptr_lock_)(_DWORD, _DWORD, _DWORD);
// 1003C860: using guessed type int IDA_art_ptr_lock_data_;
// 1003C864: using guessed type int (*IDA_art_ptr_unlock_)(void);
// 1003C868: using guessed type int (__fastcall *IDA_art_id_)(_DWORD, _DWORD, _DWORD);
// 1003C86C: using guessed type int IDA__art;
// 1003C870: using guessed type int IDA_art_exists_;

//----- (10005DF0) --------------------------------------------------------
char *__cdecl sub_10005DF0(int a1, unsigned int a2)
{
  char *v3; // eax
  char *v4; // esi
  int v5; // eax
  void *v6; // ecx
  char *v7; // eax
  char *v8; // edi
  int v9; // edi
  int *v10; // eax
  signed int v11; // ecx
  int v12; // ebp
  int v13; // eax
  signed int v14; // eax
  void **v15; // ebp
  signed int v16; // ebx
  int v17; // edi
  void *v18; // ecx
  char *v19; // eax
  char *v20; // edi
  char *v21; // eax
  char *v22; // edi
  signed int v23; // [esp+0h] [ebp-120h]
  void *v24; // [esp+4h] [ebp-11Ch]
  int v25; // [esp+8h] [ebp-118h]
  void *v26; // [esp+Ch] [ebp-114h]
  char v27; // [esp+10h] [ebp-110h]
  int v28; // [esp+11Ch] [ebp-4h]

  if ( a2 > 0xA )
    return 0;
  sprintf(&v27, "art\\%s\\%s", IDA__art__plus4 + 28 * a2, a1);
  v3 = (char *)operator new(0x44u);
  if ( v3 )
    v4 = sub_10005690(v3);
  else
    v4 = 0;
  v5 = sub_10009AF0((int)&v27, (int)"rb");
  v25 = v5;
  if ( !v5 )
  {
    if ( v4 )
    {
      v21 = (char *)*((_DWORD *)v4 + 16);
      if ( v21 )
      {
        v22 = v21 - 4;
        `eh vector destructor iterator'(v21, 0x10u, *((_DWORD *)v21 - 1), sub_10005680);
        j__free(v22);
      }
      j__free(v4);
      return 0;
    }
    return 0;
  }
  if ( !sub_10005780((int)v4, v5) )
  {
    sub_10009B20(v6);
    if ( v4 )
    {
      v7 = (char *)*((_DWORD *)v4 + 16);
      if ( v7 )
      {
        v8 = v7 - 4;
        `eh vector destructor iterator'(v7, 0x10u, *((_DWORD *)v7 - 1), sub_10005680);
        j__free(v8);
      }
      j__free(v4);
    }
    return 0;
  }
  v9 = 6 * *((unsigned __int16 *)v4 + 4);
  v26 = (void *)*((_DWORD *)v4 + 9);
  v24 = 0;
  v10 = (int *)operator new(96 * *((unsigned __int16 *)v4 + 4) + 4);
  v28 = 0;
  if ( v10 )
  {
    v12 = (int)(v10 + 1);
    *v10 = v9;
    `eh vector constructor iterator'(v10 + 1, 0x10u, v9, sub_10005660, sub_10005680);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  *((_DWORD *)v4 + 16) = v13;
  v14 = 0;
  v28 = -1;
  v23 = 0;
  v15 = (void **)(v4 + 36);
  while ( v14 )
  {
    v11 = (signed int)v26;
    if ( *v15 != v26 )
      break;
    *v15 = 0;
LABEL_26:
    ++v14;
    ++v15;
    v23 = v14;
    if ( v14 >= 6 )
    {
      sub_10009B20((void *)v11);
      return v4;
    }
  }
  v16 = 0;
  *v15 = v24;
  if ( !*((_WORD *)v4 + 4) )
  {
LABEL_25:
    v24 = (char *)v24 + *((unsigned __int16 *)v4 + 4);
    goto LABEL_26;
  }
  v17 = 16 * (_DWORD)v24;
  while ( sub_10005830(v17 + *((_DWORD *)v4 + 16), v25) )
  {
    v11 = *((unsigned __int16 *)v4 + 4);
    ++v16;
    v17 += 16;
    if ( v16 >= v11 )
    {
      v14 = v23;
      goto LABEL_25;
    }
  }
  sub_10009B20(v18);
  v19 = (char *)*((_DWORD *)v4 + 16);
  if ( v19 )
  {
    v20 = v19 - 4;
    `eh vector destructor iterator'(v19, 0x10u, *((_DWORD *)v19 - 1), sub_10005680);
    j__free(v20);
  }
  j__free(v4);
  return 0;
}
// 1003C84C: using guessed type int IDA__art__plus4;

//----- (10006080) --------------------------------------------------------
char *__thiscall sub_10006080(_DWORD *this, char *a2, unsigned int a3, int *a4)
{
  _DWORD *v4; // ebp
  int v5; // edi
  _DWORD *v6; // ecx
  char *v7; // eax
  char *v8; // esi
  char *result; // eax

  v4 = this;
  v5 = sub_100025E0(a2);
  if ( a4 )
    *a4 = v5;
  v6 = (_DWORD *)v4[a3 + 1];
  if ( v6 )
  {
    while ( v6[1] != v5 )
    {
      v6 = (_DWORD *)v6[4];
      if ( !v6 )
        goto LABEL_6;
    }
    result = (char *)v6[2];
    ++*v6;
  }
  else
  {
LABEL_6:
    v7 = sub_10005DF0((int)a2, a3);
    v8 = v7;
    if ( v7 )
      sub_10005A80(v4, (int)v7, a3, v5);
    result = v8;
  }
  return result;
}

//----- (100060F0) --------------------------------------------------------
void __thiscall sub_100060F0(_DWORD *this, void *a2, int a3)
{
  int v3; // eax
  int v4; // eax
  _DWORD *v5; // edi
  char *v6; // eax
  char *v7; // ebx

  if ( a2 )
  {
    v3 = *((_DWORD *)a2 + 3);
    if ( v3 )
      *(_DWORD *)(v3 + 16) = *((_DWORD *)a2 + 4);
    else
      this[a3 + 1] = *((_DWORD *)a2 + 4);
    v4 = *((_DWORD *)a2 + 4);
    if ( v4 )
      *(_DWORD *)(v4 + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)a2 + 4) = 0;
    v5 = (_DWORD *)*((_DWORD *)a2 + 2);
    if ( v5 )
    {
      v6 = (char *)v5[16];
      if ( v6 )
      {
        v7 = v6 - 4;
        `eh vector destructor iterator'(v6, 0x10u, *((_DWORD *)v6 - 1), sub_10005680);
        j__free(v7);
      }
      j__free(v5);
    }
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)a2 + 4) = 0;
    j__free(a2);
  }
}

//----- (10006180) --------------------------------------------------------
int __thiscall sub_10006180(_DWORD *this, char *a2, int a3)
{
  _DWORD *v3; // esi
  int v4; // eax
  int *v5; // ecx
  int *v6; // eax
  int v8; // edi
  bool v9; // zf

  v3 = this;
  v4 = sub_100025E0(a2);
  v5 = (int *)v3[a3 + 1];
  if ( !v5 )
  {
LABEL_4:
    v6 = 0;
    return *v6;
  }
  while ( v5[1] != v4 )
  {
    v5 = (int *)v5[4];
    if ( !v5 )
      goto LABEL_4;
  }
  v8 = *v5 - 1;
  v9 = *v5 == 1;
  v6 = v5;
  *v5 = v8;
  if ( v8 >= 0 && !v9 )
    return *v6;
  sub_100060F0(v3, v5, a3);
  return 0;
}

//----- (100061D0) --------------------------------------------------------
void *__thiscall sub_100061D0(void *this, char a2)
{
  void *v2; // edi
  char *v3; // eax
  char *v4; // esi

  v2 = this;
  v3 = (char *)*((_DWORD *)this + 16);
  if ( v3 )
  {
    v4 = v3 - 4;
    `eh vector destructor iterator'(v3, 0x10u, *((_DWORD *)v3 - 1), sub_10005680);
    j__free(v4);
  }
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10006220) --------------------------------------------------------
int __thiscall sub_10006220(_DWORD *this, int a2)
{
  int result; // eax

  result = a2;
  this[13] = a2;
  this[3] |= 1u;
  return result;
}

//----- (10006230) --------------------------------------------------------
int __thiscall sub_10006230(_DWORD *this, int a2)
{
  int result; // eax

  result = a2;
  this[14] = a2;
  this[3] |= 2u;
  return result;
}

//----- (10006240) --------------------------------------------------------
int __thiscall sub_10006240(_DWORD *this, int a2)
{
  int result; // eax

  result = a2;
  this[16] = a2;
  return result;
}

//----- (10006250) --------------------------------------------------------
int __thiscall sub_10006250(_DWORD *this)
{
  return this[13];
}

//----- (10006260) --------------------------------------------------------
int __thiscall sub_10006260(_DWORD *this)
{
  return this[14];
}

//----- (10006270) --------------------------------------------------------
int __thiscall sub_10006270(_DWORD *this)
{
  return this[15];
}

//----- (10006280) --------------------------------------------------------
int __thiscall sub_10006280(_DWORD *this)
{
  return this[7];
}

//----- (10006290) --------------------------------------------------------
int __thiscall sub_10006290(_DWORD *this)
{
  return this[8];
}

//----- (100062A0) --------------------------------------------------------
int __thiscall sub_100062A0(_DWORD *this)
{
  return this[9];
}

//----- (100062B0) --------------------------------------------------------
int __thiscall sub_100062B0(_DWORD *this)
{
  return this[10];
}

//----- (100062C0) --------------------------------------------------------
int __thiscall sub_100062C0(_DWORD *this)
{
  return this[3];
}

//----- (100062D0) --------------------------------------------------------
int __thiscall sub_100062D0(_DWORD *this)
{
  return this[4];
}

//----- (100062E0) --------------------------------------------------------
int __thiscall sub_100062E0(_DWORD *this)
{
  return this[5];
}

//----- (100062F0) --------------------------------------------------------
void *__thiscall sub_100062F0(void *this, char a2)
{
  void *v2; // esi
  int v3; // eax

  v2 = this;
  v3 = *((_DWORD *)this + 11);
  *(_DWORD *)this = &off_10034CB0;
  if ( v3 )
    *((_DWORD *)this + 11) = 0;
  if ( *((_DWORD *)this + 12) )
    j__free(*((void **)this + 12));
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}
// 10034CB0: using guessed type int (__thiscall *off_10034CB0)(void *, char);

//----- (10006330) --------------------------------------------------------
_DWORD *__cdecl sub_10006330(int a1)
{
  _DWORD *result; // eax
  int v2; // ecx
  _BYTE *v3; // edx

  result = (_DWORD *)sub_1000F0B0(a1, 0);
  if ( result )
  {
    v2 = result[1];
    v3 = (_BYTE *)result[16];
    if ( v2 & 0x20000 )
      result[1] = v2 & 0xFFFDFFFF;
    if ( *v3 == 1 )
    {
      *v3 = 0;
      result[18] = result[12];
    }
    else if ( !*v3 )
    {
      *v3 = 1;
      result[18] = result[13];
    }
  }
  return result;
}

//----- (10006380) --------------------------------------------------------
_DWORD *__cdecl sub_10006380(int a1)
{
  _DWORD *result; // eax
  int v2; // ecx
  _BYTE *v3; // edx

  result = (_DWORD *)sub_1000F0B0(a1, 0);
  if ( result )
  {
    v2 = result[18];
    v3 = (_BYTE *)result[16];
    if ( v2 == result[12] )
    {
      *v3 = 0;
    }
    else if ( v2 == result[13] )
    {
      *v3 = 1;
    }
  }
  return result;
}

//----- (100063B0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100063B0(int a1@<eax>)
{
  sub_10006380(a1);
}

//----- (100063C0) --------------------------------------------------------
int __cdecl sub_100063C0(int a1)
{
  int result; // eax

  result = sub_1000F0B0(a1, 0);
  if ( result )
  {
    if ( **(_BYTE **)(result + 64) == 1 )
      *(_DWORD *)(result + 72) = *(_DWORD *)(result + 52);
    else
      *(_DWORD *)(result + 72) = *(_DWORD *)(result + 48);
  }
  return result;
}

//----- (100063F0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100063F0(int a1@<eax>)
{
  sub_100063C0(a1);
}

//----- (10006400) --------------------------------------------------------
int __cdecl sub_10006400(int a1, int a2, int a3, int a4, _BYTE *a5)
{
  char *v5; // esi
  char *v6; // eax
  int v7; // esi
  int v8; // eax

  v5 = sub_10006080(dword_1003C874, "PRFXOUT.frm", 6u, 0);
  v6 = sub_10006080(dword_1003C874, "PRFXIN.frm", 6u, 0);
  v7 = sub_1000F000(
         a1,
         a2,
         a3,
         **((unsigned __int16 **)v5 + 16),
         *(unsigned __int16 *)(*((_DWORD *)v5 + 16) + 2),
         -1,
         -1,
         a4,
         a4,
         *(_DWORD *)(*((_DWORD *)v5 + 16) + 12),
         *(_DWORD *)(*((_DWORD *)v6 + 16) + 12),
         0,
         97);
  v8 = sub_1000F0B0(v7, 0);
  if ( *a5 )
    *(_DWORD *)(v8 + 4) |= 0x20000u;
  *(_DWORD *)(v8 + 64) = a5;
  sub_1000F040(v7, (int)sub_100063F0, (int)sub_100063F0, (int)sub_100063B0, (int)sub_100063B0);
  return v7;
}

//----- (10006550) --------------------------------------------------------
int __thiscall sub_10006550(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  int v3; // edx
  int v4; // ecx

  v2 = this;
  v3 = this[3];
  this[15] = a2;
  if ( v3 & 1 && (v4 = this[13], a2 < v4) || v3 & 2 && (v4 = v2[14], a2 > v4) )
    v2[15] = v4;
  (*(void (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  return v2[15];
}

//----- (10006590) --------------------------------------------------------
int __thiscall sub_10006590(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ecx
  bool v3; // zf
  int v4; // eax

  v1 = this;
  v2 = this[15] - this[16];
  v3 = (v1[3] & 1) == 0;
  v1[15] = v2;
  if ( !v3 )
  {
    v4 = v1[13];
    if ( v2 < v4 )
      v1[15] = v4;
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
  return v1[15];
}

//----- (100065C0) --------------------------------------------------------
int __thiscall sub_100065C0(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ecx
  bool v3; // zf
  int v4; // eax

  v1 = this;
  v2 = this[16] + this[15];
  v3 = (v1[3] & 2) == 0;
  v1[15] = v2;
  if ( !v3 )
  {
    v4 = v1[14];
    if ( v2 > v4 )
      v1[15] = v4;
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
  return v1[15];
}

//----- (100065F0) --------------------------------------------------------
int *__thiscall sub_100065F0(_DWORD *this)
{
  _DWORD *v1; // edi
  int *result; // eax
  int v3; // edx
  int v4; // ecx
  _DWORD *v5; // ebx
  char *v6; // esi
  char *v7; // eax
  int v8; // [esp+4h] [ebp-4h]

  v1 = this;
  result = (int *)this[12];
  if ( result )
  {
    v8 = 0;
    result = (int *)sub_1000F0B0(*result, (int)&v8);
    if ( result )
    {
      v3 = result[2];
      v4 = *(_DWORD *)(v8 + 24);
      v5 = result + 2;
      v6 = (char *)(v3 + *(_DWORD *)(v8 + 44) + v4 * result[3]);
      sub_1001D1B0((char *)v1[11], result[4] - v3 + 1, (char *)v1[14], result[4] - v3 + 1, v6, v4);
      if ( *((_BYTE *)v1 + 84) )
        v7 = sub_10006080(dword_1003C874, "PRFSLDON.frm", 6u, 0);
      else
        v7 = sub_10006080(dword_1003C874, "PRFSLDOF.frm", 6u, 0);
      sub_1001D200(
        *(_BYTE **)(*((_DWORD *)v7 + 16) + 12),
        **((unsigned __int16 **)v7 + 16),
        *(unsigned __int16 *)(*((_DWORD *)v7 + 16) + 2),
        **((unsigned __int16 **)v7 + 16),
        (int)&v6[*(_DWORD *)(v8 + 24) * v1[15]],
        *(_DWORD *)(v8 + 24));
      result = (int *)sub_1000ECC0(v8, v5);
    }
  }
  return result;
}

//----- (100067C0) --------------------------------------------------------
int __cdecl sub_100067C0(int a1)
{
  int result; // eax
  int v2; // edi
  int *v3; // esi
  void *v4; // ecx
  int v5; // eax
  int v6; // eax
  unsigned __int64 v7; // rax
  int v8; // ecx
  int v9; // edx
  int v10; // [esp+8h] [ebp-Ch]
  int v11; // [esp+Ch] [ebp-8h]
  int v12; // [esp+10h] [ebp-4h]

  v11 = 0;
  result = sub_1000F0B0(a1, (int)&v11);
  v2 = result;
  if ( result )
  {
    v3 = *(int **)(result + 64);
    v12 = 0;
    v10 = 0;
    *((_BYTE *)v3 + 84) = 1;
    while ( sub_1000EEB0() & 5 )
    {
      sub_1000F090(v4);
      sub_1000EEC0((int)&v12, (int)&v10);
      v10 -= *(_DWORD *)(v11 + 12);
      v5 = v10 - *(_DWORD *)(v2 + 12);
      v10 = v5;
      v3[15] = v5;
      if ( v5 >= 0 )
      {
        v6 = v3[14];
        if ( v10 > v6 )
          v3[15] = v6;
      }
      else
      {
        v3[15] = 0;
      }
      v7 = (unsigned __int64)((double)v3[15] * *((double *)v3 + 11));
      v8 = v3[24];
      if ( v8 )
        LODWORD(v7) = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)v8 + 20))(v7);
      v3[17] = v7;
      (*(void (__fastcall **)(int *, _DWORD))(*v3 + 4))(v3, HIDWORD(v7));
    }
    v9 = *v3;
    *((_BYTE *)v3 + 84) = 0;
    (*(void (__thiscall **)(int *))(v9 + 4))(v3);
    result = (*(int (__thiscall **)(int *))(*v3 + 40))(v3);
    dword_1003C878 = (char *)result;
  }
  return result;
}

//----- (10006890) --------------------------------------------------------
void __usercall __spoils<ecx> sub_10006890(int a1@<eax>)
{
  sub_100067C0(a1);
}

//----- (100068D0) --------------------------------------------------------
int __cdecl sub_100068D0(int a1)
{
  int result; // eax
  _DWORD *v2; // esi
  int v3; // ecx
  int v4; // eax

  result = sub_1000F0B0(a1, 0);
  if ( result )
  {
    v2 = *(_DWORD **)(result + 64);
    v3 = v2[24];
    if ( v3 )
    {
      v2[17] = (*(int (**)(void))(*(_DWORD *)v3 + 24))();
      result = (*(int (__thiscall **)(_DWORD *))(*v2 + 40))(v2);
      dword_1003C878 = (char *)result;
    }
    else
    {
      v4 = v2[17];
      if ( v4 > v2[18] )
        v2[17] = v4 - 1;
      result = (*(int (__thiscall **)(_DWORD *))(*v2 + 40))(v2);
      dword_1003C878 = (char *)result;
    }
  }
  return result;
}

//----- (10006920) --------------------------------------------------------
void __usercall __spoils<ecx> sub_10006920(int a1@<eax>)
{
  sub_100068D0(a1);
}

//----- (10006960) --------------------------------------------------------
int __cdecl sub_10006960(int a1)
{
  int result; // eax
  _DWORD *v2; // esi
  int v3; // ecx
  int v4; // eax

  result = sub_1000F0B0(a1, 0);
  if ( result )
  {
    v2 = *(_DWORD **)(result + 64);
    v3 = v2[24];
    if ( v3 )
    {
      v2[17] = (*(int (**)(void))(*(_DWORD *)v3 + 28))();
      result = (*(int (__thiscall **)(_DWORD *))(*v2 + 40))(v2);
      dword_1003C878 = (char *)result;
    }
    else
    {
      v4 = v2[17];
      if ( v4 < v2[19] )
        v2[17] = v4 + 1;
      result = (*(int (__thiscall **)(_DWORD *))(*v2 + 40))(v2);
      dword_1003C878 = (char *)result;
    }
  }
  return result;
}

//----- (100069B0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100069B0(int a1@<eax>)
{
  sub_10006960(a1);
}

//----- (100069C0) --------------------------------------------------------
_DWORD *__thiscall sub_100069C0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
  _DWORD *v12; // esi
  int v13; // eax
  int v14; // ecx
  int v15; // eax
  int v16; // ecx
  char *v17; // edi
  char *v18; // eax
  int v19; // ebp
  char *v20; // edi
  char *v21; // eax
  int v22; // edx
  char *v23; // edi
  double v24; // st7
  int v25; // eax
  unsigned int v26; // edi
  char *v27; // ebx
  int v28; // edx
  int v29; // eax
  int v30; // ST14_4
  int v32; // [esp+8h] [ebp-34h]
  CHAR Text; // [esp+10h] [ebp-2Ch]
  int v34; // [esp+38h] [ebp-4h]
  int v35; // [esp+40h] [ebp+4h]
  int v36; // [esp+44h] [ebp+8h]

  v12 = this;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = 0;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  this[16] = 1;
  v34 = 0;
  *this = &off_10034CF8;
  this[6] = a3;
  v32 = sub_1000EF10(this);
  if ( v32 )
  {
    v12[1] = sub_100025E0(a2);
    v12[10] = a7;
    v12[7] = a4;
    v12[14] = a7 - 2;
    v12[8] = a5;
    v12[19] = a10;
    v12[2] = 256;
    v12[3] = 7;
    *((_BYTE *)v12 + 84) = 0;
    v12[24] = a12;
    v12[13] = 0;
    v12[18] = a9;
    v12[17] = a11;
    if ( a12 )
    {
      v13 = (*(int (**)(void))(*(_DWORD *)a12 + 36))();
      v14 = v12[24];
      v12[19] = v13;
      v15 = (*(int (**)(void))(*(_DWORD *)v14 + 32))();
      v16 = v12[24];
      v12[18] = v15;
      v12[17] = (*(int (**)(void))(*(_DWORD *)v16 + 40))();
    }
    v12[12] = operator new(0xCu);
    v17 = sub_10006080(dword_1003C874, "INVUPOUT.frm", 6u, 0);
    v18 = sub_10006080(dword_1003C874, "INVUPIN.frm", 6u, 0);
    v12[9] = **((unsigned __int16 **)v17 + 16) + 2;
    v12[14] -= *(unsigned __int16 *)(*((_DWORD *)v17 + 16) + 2);
    *(_DWORD *)(v12[12] + 4) = sub_1000F000(
                                 v12[6],
                                 v12[7] + 1,
                                 v12[8] + 1,
                                 **((unsigned __int16 **)v17 + 16),
                                 *(unsigned __int16 *)(*((_DWORD *)v17 + 16) + 2),
                                 -1,
                                 -1,
                                 a8,
                                 -1,
                                 *(_DWORD *)(*((_DWORD *)v17 + 16) + 12),
                                 *(_DWORD *)(*((_DWORD *)v18 + 16) + 12),
                                 0,
                                 64);
    *(_DWORD *)(sub_1000F0B0(*(_DWORD *)(v12[12] + 4), 0) + 64) = v12;
    sub_1000F040(*(_DWORD *)(v12[12] + 4), 0, 0, (int)sub_10006920, 0);
    v19 = *(unsigned __int16 *)(*((_DWORD *)v17 + 16) + 2) + a5 + 1;
    v20 = sub_10006080(dword_1003C874, "INVDNOUT.frm", 6u, 0);
    v21 = sub_10006080(dword_1003C874, "INVDNIN.frm", 6u, 0);
    v22 = v12[14] - *(unsigned __int16 *)(*((_DWORD *)v20 + 16) + 2);
    v12[14] = v22;
    *(_DWORD *)(v12[12] + 8) = sub_1000F000(
                                 v12[6],
                                 v12[7] + 1,
                                 v19 + v22,
                                 **((unsigned __int16 **)v20 + 16),
                                 *(unsigned __int16 *)(*((_DWORD *)v20 + 16) + 2),
                                 -1,
                                 -1,
                                 a8,
                                 -1,
                                 *(_DWORD *)(*((_DWORD *)v20 + 16) + 12),
                                 *(_DWORD *)(*((_DWORD *)v21 + 16) + 12),
                                 0,
                                 64);
    *(_DWORD *)(sub_1000F0B0(*(_DWORD *)(v12[12] + 8), 0) + 64) = v12;
    sub_1000F040(*(_DWORD *)(v12[12] + 8), 0, 0, (int)sub_100069B0, 0);
    v23 = sub_10006080(dword_1003C874, "PRFSLDOF.frm", 6u, 0);
    sub_10006080(dword_1003C874, "PRFSLDON.frm", 6u, 0);
    v24 = (double)(signed int)v12[19];
    v35 = v12[14] - *(unsigned __int16 *)(*((_DWORD *)v23 + 16) + 2);
    v12[20] = v35;
    v25 = v12[9];
    *((double *)v12 + 11) = v24 / (double)v35;
    v26 = **((unsigned __int16 **)v23 + 16);
    v36 = (signed int)(v25 - v26) / 2 + a4 + 1;
    sprintf(&Text, "SCROLL_V_BACK_%i", v12[1]);
    v27 = sub_10005BE0(dword_1003C874, v26, v12[14], 1, 1, &Text, 6, 0);
    if ( !v27 )
      MessageBoxA(0, &Text, "frm creation failed", 0x30u);
    sub_1001D1B0(
      (char *)(v36 + *(_DWORD *)(v32 + 44) + v19 * *(_DWORD *)(v32 + 24)),
      v26,
      (char *)v12[14],
      *(_DWORD *)(v32 + 24),
      *(char **)(*((_DWORD *)v27 + 16) + 12),
      v26);
    v28 = v12[8];
    v29 = v12[6];
    v12[11] = *(_DWORD *)(*((_DWORD *)v27 + 16) + 12);
    v30 = v12[14];
    v12[15] = v28 - v19;
    *(_DWORD *)v12[12] = sub_1000F000(v29, v36, v19, v26, v30, -1, -1, a8, -1, 0, 0, 0, 64);
    *(_DWORD *)(sub_1000F0B0(*(_DWORD *)v12[12], 0) + 64) = v12;
    sub_1000F040(*(_DWORD *)v12[12], 0, 0, (int)sub_10006890, 0);
  }
  return v12;
}
// 10034CF8: using guessed type int (__thiscall *off_10034CF8)(void *, char);

//----- (10006D80) --------------------------------------------------------
int __thiscall sub_10006D80(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v4; // edx
  int v5; // ecx

  v2 = this;
  if ( a2 < this[17] && a2 >= 0 )
    this[19] = a2;
  v3 = this[19];
  v4 = this[15];
  if ( v3 < v4 )
    goto LABEL_7;
  v5 = this[18];
  if ( v3 > v5 + v4 - 1 )
  {
    v3 = v3 - v5 + 1;
LABEL_7:
    v2[15] = v3;
  }
  (*(void (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  return v2[19];
}

//----- (10006DC0) --------------------------------------------------------
int __thiscall sub_10006DC0(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // eax
  int v3; // eax
  int v4; // edx
  int v5; // ecx

  v1 = this;
  v2 = this[19];
  if ( v2 < this[17] - 1 )
    this[19] = v2 + 1;
  v3 = this[19];
  v4 = this[15];
  if ( v3 < v4 )
    goto LABEL_6;
  v5 = this[18];
  if ( v3 > v5 + v4 - 1 )
  {
    v3 = v3 - v5 + 1;
LABEL_6:
    v1[15] = v3;
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
  return v1[19];
}

//----- (10006E00) --------------------------------------------------------
int __thiscall sub_10006E00(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // eax
  int v3; // eax
  int v4; // edx
  int v5; // ecx

  v1 = this;
  v2 = this[19];
  if ( v2 > 0 )
    this[19] = v2 - 1;
  v3 = this[19];
  v4 = this[15];
  if ( v3 < v4 )
    goto LABEL_6;
  v5 = this[18];
  if ( v3 > v5 + v4 - 1 )
  {
    v3 = v3 - v5 + 1;
LABEL_6:
    v1[15] = v3;
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
  return v1[19];
}

//----- (10006E40) --------------------------------------------------------
int __cdecl sub_10006E40(int a1)
{
  int v1; // eax
  int *v2; // esi
  int v3; // edx
  int result; // eax

  v1 = sub_1000F0B0(a1, 0);
  v2 = *(int **)(v1 + 64);
  v3 = *v2;
  v2[19] = *(_DWORD *)(v1 + 60) + v2[15];
  (*(void (__thiscall **)(int *))(v3 + 4))(v2);
  result = v2[19];
  dword_1003C878 = (char *)v2[19];
  return result;
}

//----- (10006E70) --------------------------------------------------------
void __usercall __spoils<ecx> sub_10006E70(int a1@<eax>)
{
  sub_10006E40(a1);
}

//----- (10006E80) --------------------------------------------------------
int __thiscall sub_10006E80(_DWORD *this, int a2, unsigned int a3, unsigned int a4)
{
  _DWORD *v4; // ebx
  int v5; // ebp
  int v6; // esi
  unsigned int v7; // eax
  void *v8; // eax
  int v9; // ecx
  int v10; // edx
  int v11; // edx
  int *v12; // esi
  int v13; // ecx
  int v14; // eax
  int v15; // ecx
  int v16; // eax
  int v17; // ecx
  double v18; // st7
  unsigned __int64 v19; // rax
  int v20; // edx
  int result; // eax
  signed int v22; // ecx

  v4 = this;
  v5 = 0;
  if ( this[22] )
  {
    v6 = 0;
    if ( this[17] > 0 )
    {
      do
        j__free(*(void **)(v4[22] + 4 * v6++));
      while ( v6 < v4[17] );
    }
    v4[22] = 0;
    v4[17] = 0;
  }
  v7 = a3;
  if ( a3 <= 0 )
    v7 = 0;
  v4[19] = 0;
  v4[17] = v7;
  v8 = operator new(4 * v7);
  v9 = v4[17];
  v10 = v4[18];
  v4[22] = v8;
  v4[13] = 0;
  v4[14] = v9 - v10;
  if ( v9 - v10 < 0 )
    v4[14] = 0;
  v11 = v4[3] | 3;
  v4[15] = 0;
  v4[3] = v11;
  v4[16] = 1;
  if ( v9 > 0 )
  {
    do
    {
      *(_DWORD *)(v4[22] + 4 * v5) = operator new(a4);
      memset(*(void **)(v4[22] + 4 * v5), 0, a4);
      if ( a2 )
        qmemcpy(*(void **)(v4[22] + 4 * v5), *(const void **)(a2 + 4 * v5), a4 - 1);
      ++v5;
    }
    while ( v5 < v4[17] );
  }
  v12 = (int *)v4[24];
  v13 = v12[24];
  if ( v13 )
  {
    v14 = (*(int (**)(void))(*(_DWORD *)v13 + 32))();
    v15 = v12[24];
    v12[18] = v14;
    v16 = (*(int (**)(void))(*(_DWORD *)v15 + 36))();
    v17 = v12[24];
    v12[19] = v16;
    v12[17] = (*(int (**)(void))(*(_DWORD *)v17 + 40))();
  }
  else
  {
    v12[19] = 0;
    v12[18] = 0;
    v12[17] = 0;
  }
  v18 = (double)v12[19] / (double)v12[20];
  *((double *)v12 + 11) = v18;
  v19 = (unsigned __int64)((double)v12[17] / v18);
  v12[15] = v19;
  if ( (v19 & 0x80000000) == 0i64 )
  {
    v22 = v12[14];
    if ( (signed int)v19 > v22 )
      v12[15] = v22;
    (*(void (__thiscall **)(int *))(*v12 + 4))(v12);
    result = (*(int (__thiscall **)(_DWORD *))(*v4 + 4))(v4);
  }
  else
  {
    v20 = *v12;
    v12[15] = 0;
    (*(void (__thiscall **)(int *))(v20 + 4))(v12);
    result = (*(int (__thiscall **)(_DWORD *))(*v4 + 4))(v4);
  }
  return result;
}

//----- (10006FE0) --------------------------------------------------------
_DWORD *__thiscall sub_10006FE0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _DWORD *v9; // esi
  int v10; // ebx
  int v11; // ST4C_4
  void *v12; // ecx
  int v13; // eax
  int v14; // ecx
  int v15; // eax
  int v16; // ecx
  int v17; // ecx
  int i; // edi
  _DWORD *v19; // eax
  char *v20; // edi
  _DWORD *v21; // eax
  _DWORD *v22; // eax
  CHAR Text; // [esp+10h] [ebp-2Ch]
  int v25; // [esp+38h] [ebp-4h]
  int v26; // [esp+40h] [ebp+4h]

  v9 = this;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = 0;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  this[16] = 1;
  v25 = 0;
  *this = &off_10034D40;
  this[6] = a3;
  v10 = sub_1000EF10(this);
  if ( v10 )
  {
    v9[1] = sub_100025E0(a2);
    v9[7] = a4;
    v9[8] = a5;
    v9[2] = 257;
    v9[3] = 7;
    v9[9] = a6;
    v9[10] = a7;
    v9[19] = 0;
    v9[17] = 0;
    v9[22] = 0;
    v9[23] = a9;
    v26 = sub_1000E5F0();
    v11 = v9[23];
    sub_1000E5E0();
    v13 = sub_1000E670(v12);
    v14 = v13;
    v15 = v9[10] / v13;
    v9[20] = v14;
    v16 = v9[17];
    v9[13] = 0;
    v17 = v16 - v15;
    v9[18] = v15;
    v9[14] = v17;
    if ( v17 < 0 )
      v9[14] = 0;
    v9[15] = 0;
    v9[12] = operator new(4 * v15);
    for ( i = 0; i < v9[18]; ++i )
    {
      *(_DWORD *)(v9[12] + 4 * i) = sub_1000F000(
                                      v9[6],
                                      v9[7],
                                      v9[8] + i * v9[20],
                                      v9[9],
                                      v9[20],
                                      -1,
                                      -1,
                                      -1,
                                      a8,
                                      0,
                                      0,
                                      0,
                                      64);
      v19 = (_DWORD *)sub_1000F0B0(*(_DWORD *)(v9[12] + 4 * i), 0);
      v19[15] = i;
      v19[16] = v9;
      v19[17] = v9[1];
      sub_1000F040(*(_DWORD *)(v9[12] + 4 * i), 0, 0, 0, (int)sub_10006E70);
    }
    sprintf(&Text, "LIST_BACK_%i", v9[1]);
    v20 = sub_10005BE0(dword_1003C874, v9[9], v9[10], 1, 1, &Text, 6, 0);
    if ( !v20 )
      MessageBoxA(0, &Text, "frm creation failed", 0x30u);
    sub_1001D1B0(
      (char *)(v9[7] + *(_DWORD *)(v10 + 44) + *(_DWORD *)(v10 + 24) * v9[8]),
      v9[9],
      (char *)v9[10],
      *(_DWORD *)(v10 + 24),
      *(char **)(*((_DWORD *)v20 + 16) + 12),
      v9[9]);
    v9[11] = *(_DWORD *)(*((_DWORD *)v20 + 16) + 12);
    sub_1000E5E0();
    sprintf(&Text, "LIST_SCROLL_%i", v9[1], v26);
    v21 = operator new(0x68u);
    LOBYTE(v25) = 1;
    if ( v21 )
      v22 = sub_100069C0(v21, &Text, v9[6], v9[9] + v9[7], v9[8], v9[9], v9[10], -1, 0, 0, 0, (int)v9);
    else
      v22 = 0;
    v9[24] = v22;
  }
  return v9;
}
// 10034D40: using guessed type int (__thiscall *off_10034D40)(void *, char);

//----- (10007270) --------------------------------------------------------
int __thiscall sub_10007270(_DWORD *this)
{
  _DWORD *v1; // esi
  int *v2; // ecx
  int v3; // eax
  int v4; // ecx
  char *v5; // edi
  int v6; // ebp
  int v7; // ST18_4
  int v8; // eax
  int v9; // edx
  int v10; // ecx
  int v11; // eax
  int v12; // ecx
  int v13; // eax
  int result; // eax
  int v15; // ecx
  int v16; // ebx
  int v17; // ecx
  int v18; // eax
  int v19; // esi
  int v20; // ecx
  double v21; // st7
  unsigned __int64 v22; // rax
  signed int v23; // ecx
  int v24; // [esp+10h] [ebp-1Ch]
  int v25; // [esp+14h] [ebp-18h]
  int v26; // [esp+18h] [ebp-14h]
  int v27; // [esp+1Ch] [ebp-10h]
  int v28; // [esp+20h] [ebp-Ch]
  int v29; // [esp+24h] [ebp-8h]
  int v30; // [esp+28h] [ebp-4h]

  v1 = this;
  v2 = (int *)this[12];
  v24 = 0;
  v3 = sub_1000F0B0(*v2, (int)&v24);
  v4 = *(_DWORD *)(v24 + 24);
  v5 = (char *)(*(_DWORD *)(v3 + 8) + *(_DWORD *)(v24 + 44) + v4 * *(_DWORD *)(v3 + 12));
  v6 = v4 * v1[20];
  v26 = sub_1000E5F0();
  v7 = v1[23];
  sub_1000E5E0();
  sub_1001D1B0((char *)v1[11], v1[9], (char *)v1[10], v1[9], v5, *(_DWORD *)(v24 + 24));
  v8 = v1[7];
  v9 = v1[9];
  v10 = v1[8];
  v27 = v8;
  v29 = v8 + v9 - 1;
  v11 = v1[10];
  v28 = v10;
  v12 = v10 + v11 - 1;
  v13 = v1[17];
  v30 = v12;
  if ( v13 )
  {
    v15 = v1[19];
    if ( v15 >= 0 )
    {
      if ( v15 > v13 - 1 )
        v1[19] = v13 - 1;
    }
    else
    {
      v1[19] = 0;
    }
    if ( v1[19] < 0 )
      v1[19] = 0;
    v16 = v1[15];
    v18 = v13 - v16;
    v25 = v1[18];
    v17 = v25;
    if ( v25 > v18 )
    {
      v25 = v18;
      v17 = v18;
    }
    if ( v16 < v16 + v17 )
    {
      do
      {
        sub_1000F0B0(*(_DWORD *)(v1[12] + 4 * (v16 - v1[15])), 0);
        if ( v16 == v1[19] )
          sub_1000E600((int)v5, *(_DWORD *)(v1[22] + 4 * v16), v1[9], *(_DWORD *)(v24 + 24), 0x39u);
        else
          sub_1000E600((int)v5, *(_DWORD *)(v1[22] + 4 * v16), v1[9], *(_DWORD *)(v24 + 24), 0xD7u);
        v5 += v6;
        ++v16;
      }
      while ( v16 < v25 + v1[15] );
    }
    sub_1000ECC0(v24, &v27);
    sub_1000E5E0();
    v19 = v1[24];
    v20 = *(_DWORD *)(v19 + 96);
    if ( v20 )
      *(_DWORD *)(v19 + 68) = (*(int (**)(void))(*(_DWORD *)v20 + 40))();
    else
      *(_DWORD *)(v19 + 68) = 0;
    v21 = (double)*(signed int *)(v19 + 76) / (double)*(signed int *)(v19 + 80);
    *(double *)(v19 + 88) = v21;
    v22 = (unsigned __int64)((double)*(signed int *)(v19 + 68) / v21);
    *(_DWORD *)(v19 + 60) = v22;
    if ( (v22 & 0x80000000) == 0i64 )
    {
      v23 = *(_DWORD *)(v19 + 56);
      if ( (signed int)v22 > v23 )
        *(_DWORD *)(v19 + 60) = v23;
      result = (*(int (__fastcall **)(int, _DWORD))(*(_DWORD *)v19 + 4))(v19, HIDWORD(v22));
    }
    else
    {
      LODWORD(v22) = *(_DWORD *)v19;
      *(_DWORD *)(v19 + 60) = 0;
      result = (*(int (__fastcall **)(int, _DWORD))(v22 + 4))(v19, HIDWORD(v22));
    }
  }
  else
  {
    sub_1000E600((int)v5, (int)"List Empty", v9, *(_DWORD *)(v24 + 24), 0x39u);
    result = sub_1000ECC0(v24, &v27);
  }
  return result;
}

//----- (10007460) --------------------------------------------------------
int __cdecl sub_10007460(int a1)
{
  int result; // eax
  int v2; // esi
  void *v3; // ecx

  result = sub_1000F0B0(a1, 0);
  v2 = *(_DWORD *)(result + 64);
  if ( v2 )
  {
    (*(void (__thiscall **)(int, _DWORD))(*(_DWORD *)v2 + 20))(v2, *(_DWORD *)(result + 60));
    dword_1003C878 = (char *)(*(int (__thiscall **)(int))(*(_DWORD *)v2 + 40))(v2);
    result = sub_1000F110(v3);
  }
  return result;
}

//----- (100074A0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100074A0(int a1@<eax>)
{
  sub_10007460(a1);
}

//----- (100074E0) --------------------------------------------------------
int __cdecl sub_100074E0(int a1)
{
  int result; // eax
  _BYTE *v2; // esi
  int v3; // eax
  void *v4; // ecx
  int v5; // [esp+0h] [ebp-4h]

  v5 = 0;
  result = sub_1000F0B0(a1, (int)&v5);
  v2 = *(_BYTE **)(result + 64);
  if ( v2 )
  {
    v3 = *((_DWORD *)v2 + 15);
    if ( v3 == *((_DWORD *)v2 + 13) )
    {
      v2[68] = 1;
    }
    else if ( v3 == *((_DWORD *)v2 + 14) )
    {
      v2[68] = 0;
    }
    if ( v2[68] )
      (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)v2 + 28))(v2);
    else
      (*(void (__thiscall **)(_BYTE *))(*(_DWORD *)v2 + 24))(v2);
    dword_1003C878 = (char *)(*(int (__thiscall **)(_BYTE *))(*(_DWORD *)v2 + 40))(v2);
    result = sub_1000F110(v4);
  }
  return result;
}

//----- (10007550) --------------------------------------------------------
void __usercall __spoils<ecx> sub_10007550(int a1@<eax>)
{
  sub_100074E0(a1);
}

//----- (10007560) --------------------------------------------------------
int __thiscall sub_10007560(_DWORD *this)
{
  _DWORD *v1; // esi
  int result; // eax
  void *v3; // ecx
  void *v4; // ecx
  int v5; // ST18_4
  int v6; // ebp
  int v7; // edi
  int v8; // ebx
  int v9; // ST10_4
  int v10; // eax
  int v11; // ecx
  int v12; // ebx
  int v13; // ebp
  bool v14; // sf
  unsigned __int8 v15; // of
  int *i; // [esp+4h] [ebp-Ch]
  int v17; // [esp+8h] [ebp-8h]

  v1 = this;
  result = this[19];
  if ( result )
  {
    sub_1000E5F0();
    sub_1000E5E0();
    v17 = sub_1000E670(v3);
    v5 = v1[6];
    v6 = sub_1000EF10(v4);
    v7 = 0;
    for ( i = (int *)v6; v7 <= v1[14]; ++v7 )
    {
      v8 = sub_1000F0B0(*(_DWORD *)(v1[12] + 4 * v7 + 4), 0);
      v9 = *(_DWORD *)(v1[19] + 4 * v7);
      v10 = sub_1000E690();
      v11 = *(_DWORD *)(v8 + 8);
      v12 = *(_DWORD *)(v8 + 12);
      if ( v11 > 0 )
      {
        v13 = *(_DWORD *)(v6 + 24);
        v15 = __OFSUB__(v11 + v10, v13);
        v14 = v11 + v10 - v13 < 0;
        v6 = (int)i;
        if ( v14 ^ v15 )
        {
          if ( v12 > 0 && v12 + v17 < i[7] )
            sub_1000E630(i[11], *(_DWORD *)(v1[19] + 4 * v7), v10, v11, v12, i[6], 0x3Du);
        }
      }
    }
    result = sub_1000E5E0();
  }
  return result;
}

//----- (10007630) --------------------------------------------------------
int __thiscall sub_10007630(_DWORD *this)
{
  _DWORD *v1; // edi
  int result; // eax
  int *v3; // ecx
  int v4; // eax
  _DWORD *v5; // ebx
  char *v6; // esi
  int v7; // ST20_4
  int v8; // [esp+4h] [ebp-4h]

  v1 = this;
  result = this[20];
  if ( result )
  {
    v3 = (int *)this[12];
    v8 = 0;
    v4 = sub_1000F0B0(*v3, (int)&v8);
    v5 = (_DWORD *)(v4 + 8);
    v6 = (char *)(*(_DWORD *)(v4 + 8) + *(_DWORD *)(v8 + 44) + *(_DWORD *)(v8 + 24) * *(_DWORD *)(v4 + 12));
    sub_1001D1B0((char *)v1[11], v1[9], (char *)v1[10], v1[9], v6, *(_DWORD *)(v8 + 24));
    sub_1000E5F0();
    v7 = v1[17];
    sub_1000E5E0();
    sub_1000E600((int)v6, v1[20], v1[9], *(_DWORD *)(v8 + 24), *((_BYTE *)v1 + 72));
    sub_1000E5E0();
    result = sub_1000ECC0(v8, v5);
  }
  return result;
}

//----- (100076D0) --------------------------------------------------------
void __thiscall sub_100076D0(void *this, const void *a2)
{
  void *v2; // edi

  v2 = (void *)*((_DWORD *)this + 20);
  if ( v2 )
  {
    if ( a2 )
    {
      memset(v2, 0, *((_DWORD *)this + 19) + 2);
      qmemcpy(*((void **)this + 20), a2, *((_DWORD *)this + 19));
      (*(void (__thiscall **)(void *))(*(_DWORD *)this + 4))(this);
    }
  }
}

//----- (10007750) --------------------------------------------------------
char __thiscall sub_10007750(int this)
{
  int v1; // ebp
  int v2; // eax
  signed int v3; // ebx
  int v4; // esi
  int v5; // eax
  void *v6; // ecx
  int v7; // eax
  signed int v8; // eax
  _BYTE *v9; // eax
  int v10; // ecx
  char v11; // al
  _BYTE *v12; // esi
  int v13; // eax
  int v14; // edx
  int v15; // ecx
  signed int v17; // [esp+4h] [ebp-Ch]
  void *v18; // [esp+8h] [ebp-8h]
  int v19; // [esp+Ch] [ebp-4h]

  v1 = this;
  LOBYTE(v2) = *(_BYTE *)(this + 92);
  if ( (_BYTE)v2 )
  {
    v2 = *(_DWORD *)(this + 80);
    if ( v2 )
    {
      v19 = sub_1000F0B0(**(_DWORD **)(this + 48), 0);
      v17 = 0;
      v18 = operator new(*(_DWORD *)(v1 + 76) + 2);
      qmemcpy(v18, *(const void **)(v1 + 80), *(_DWORD *)(v1 + 76));
      **(_BYTE **)(v1 + 80) = 124;
      v3 = 48;
      *(_BYTE *)(*(_DWORD *)(v1 + 80) + 1) = 0;
      v4 = 0;
      while ( 1 )
      {
        v5 = *(_DWORD *)(v1 + 12) & 0x1000000 ? isdigit(v3) : isprint(v3);
        if ( !v5 && v3 > 0 && v3 != 8 )
          break;
        v3 = sub_1000F090(v6);
        if ( *(_DWORD *)(v1 + 12) & 0x1000000 )
          v7 = isdigit(v3);
        else
          v7 = isprint(v3);
        if ( v7 && v4 < *(_DWORD *)(v1 + 76) )
        {
          *(_BYTE *)(v4 + *(_DWORD *)(v1 + 80)) = v3;
          *(_BYTE *)(v4 + *(_DWORD *)(v1 + 80) + 1) = 124;
          *(_BYTE *)(v4++ + *(_DWORD *)(v1 + 80) + 2) = 0;
        }
        else if ( v3 == 8 )
        {
          if ( v4 > 0 )
          {
            *(_BYTE *)(--v4 + *(_DWORD *)(v1 + 80)) = 124;
            *(_BYTE *)(v4 + *(_DWORD *)(v1 + 80) + 1) = 0;
          }
        }
        else if ( v3 == -2 && !sub_1000FA50((int *)(v19 + 8)) )
        {
          v3 = 27;
        }
        v8 = GetTickCount();
        if ( v17 > v8 )
          v17 = v8;
        if ( v8 - v17 > 140 )
        {
          v17 = v8;
          v9 = (_BYTE *)(v4 + *(_DWORD *)(v1 + 80));
          if ( *v9 == 124 )
          {
            *v9 = 0;
          }
          else
          {
            *v9 = 124;
            *(_BYTE *)(v4 + *(_DWORD *)(v1 + 80) + 1) = 0;
          }
          (*(void (__thiscall **)(int))(*(_DWORD *)v1 + 4))(v1);
        }
      }
      if ( v3 == 13 )
      {
        v10 = *(_DWORD *)(v1 + 80);
        v11 = *(_BYTE *)(v4 + v10);
        v12 = (_BYTE *)(v10 + v4);
        if ( v11 == 124 )
          *v12 = 0;
      }
      else
      {
        memset(*(void **)(v1 + 80), 0, *(_DWORD *)(v1 + 76) + 2);
        qmemcpy(*(void **)(v1 + 80), v18, *(_DWORD *)(v1 + 76));
      }
      j__free(v18);
      if ( !*(_DWORD *)(v1 + 88) && *(_DWORD *)(v1 + 12) & 0x1000000 )
      {
        v13 = j__atol(*(const char **)(v1 + 80));
        v14 = *(_DWORD *)(v1 + 12);
        *(_DWORD *)(v1 + 60) = v13;
        if ( v14 & 1 && (v15 = *(_DWORD *)(v1 + 52), v13 < v15) || v14 & 2 && (v15 = *(_DWORD *)(v1 + 56), v13 > v15) )
          *(_DWORD *)(v1 + 60) = v15;
        sprintf(*(char **)(v1 + 80), "%d", *(_DWORD *)(v1 + 60));
      }
      LOBYTE(v2) = (*(int (__thiscall **)(int))(*(_DWORD *)v1 + 4))(v1);
    }
  }
  return v2;
}

//----- (10007990) --------------------------------------------------------
char __cdecl sub_10007990(int a1)
{
  int v1; // eax
  int v2; // esi
  int v4; // [esp+0h] [ebp-4h]

  v4 = 0;
  v1 = sub_1000F0B0(a1, (int)&v4);
  v2 = *(_DWORD *)(v1 + 64);
  if ( v2 )
  {
    LOBYTE(v1) = sub_10007750(*(_DWORD *)(v1 + 64));
    dword_1003C878 = *(char **)(v2 + 80);
  }
  return v1;
}

//----- (100079D0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100079D0(int a1@<eax>)
{
  sub_10007990(a1);
}

//----- (100079E0) --------------------------------------------------------
int __thiscall sub_100079E0(_DWORD *this, int a2, int a3)
{
  int result; // eax
  int v4; // ebp
  _DWORD *v5; // ebx
  int v6; // esi
  void *v7; // eax
  int v8; // edx
  int v9; // eax
  int v10; // esi
  int v11; // ecx
  int v12; // edx
  int v13; // eax

  result = a2;
  v4 = 0;
  v5 = this;
  if ( a2 && a3 > 0 )
  {
    if ( this[22] )
    {
      v6 = 0;
      if ( this[21] > 0 )
      {
        do
          j__free(*(void **)(v5[22] + 4 * v6++));
        while ( v6 < v5[21] );
      }
      v5[22] = 0;
      v5[21] = 0;
    }
    v5[21] = a3;
    v7 = operator new(4 * a3);
    v8 = v5[3];
    v5[22] = v7;
    v9 = v5[21];
    v5[13] = 0;
    v5[14] = v9 - 1;
    v5[15] = -1;
    v5[3] = v8 | 3;
    v5[16] = 1;
    if ( v9 > 0 )
    {
      do
      {
        *(_DWORD *)(v5[22] + 4 * v4) = operator new(v5[19] + 2);
        memset(*(void **)(v5[22] + 4 * v4), 0, v5[19] + 2);
        qmemcpy(*(void **)(v5[22] + 4 * v4), *(const void **)(a2 + 4 * v4), v5[19]);
        v10 = j__atol(*(const char **)(v5[22] + 4 * v4));
        if ( j__atol((const char *)v5[20]) == v10 )
          v5[15] = v4;
        ++v4;
      }
      while ( v4 < v5[21] );
    }
    v11 = v5[13];
    if ( v5[15] < v11 )
      v5[15] = v11;
    v12 = v5[22];
    if ( v12 )
    {
      v13 = v5[15];
      if ( v13 >= v11 && v13 <= v5[14] )
        qmemcpy((void *)v5[20], *(const void **)(v12 + 4 * v13), v5[19]);
    }
    result = (*(int (__thiscall **)(_DWORD *))(*v5 + 4))(v5);
  }
  return result;
}

//----- (10007B30) --------------------------------------------------------
int __thiscall sub_10007B30(_DWORD *this, int a2)
{
  _DWORD *v2; // ebx
  int v3; // edx
  int v4; // ecx
  int v5; // eax
  int result; // eax

  v2 = this;
  v3 = this[3];
  this[15] = a2;
  if ( v3 & 1 && (v4 = this[13], a2 < v4) || v3 & 2 && (v4 = v2[14], a2 > v4) )
    v2[15] = v4;
  (*(void (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
  v5 = v2[22];
  if ( v5 )
  {
    qmemcpy((void *)v2[20], *(const void **)(v5 + 4 * v2[15]), v2[19]);
    (*(void (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
    result = v2[15];
    v2[5] = v2[20];
  }
  else
  {
    if ( v2[3] & 0x1000000 )
      sprintf((char *)v2[20], "%d", v2[15]);
    (*(void (__thiscall **)(_DWORD *))(*v2 + 4))(v2);
    result = v2[15];
    v2[5] = v2[20];
  }
  return result;
}

//----- (10007BD0) --------------------------------------------------------
int __thiscall sub_10007BD0(_DWORD *this)
{
  _DWORD *v1; // ebx
  int v2; // ecx
  bool v3; // zf
  int v4; // eax
  int v5; // eax
  int result; // eax

  v1 = this;
  v2 = this[15] - this[16];
  v3 = (v1[3] & 1) == 0;
  v1[15] = v2;
  if ( !v3 )
  {
    v4 = v1[13];
    if ( v2 < v4 )
      v1[15] = v4;
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
  v5 = v1[22];
  if ( v5 )
  {
    qmemcpy((void *)v1[20], *(const void **)(v5 + 4 * v1[15]), v1[19]);
    (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
    result = v1[15];
    v1[5] = v1[20];
  }
  else
  {
    if ( v1[3] & 0x1000000 )
      sprintf((char *)v1[20], "%d", v1[15]);
    (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
    result = v1[15];
    v1[5] = v1[20];
  }
  return result;
}

//----- (10007C60) --------------------------------------------------------
int __thiscall sub_10007C60(_DWORD *this)
{
  _DWORD *v1; // ebx
  int v2; // ecx
  bool v3; // zf
  int v4; // eax
  int v5; // eax
  int result; // eax

  v1 = this;
  v2 = this[16] + this[15];
  v3 = (v1[3] & 2) == 0;
  v1[15] = v2;
  if ( !v3 )
  {
    v4 = v1[14];
    if ( v2 > v4 )
      v1[15] = v4;
  }
  (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
  v5 = v1[22];
  if ( v5 )
  {
    qmemcpy((void *)v1[20], *(const void **)(v5 + 4 * v1[15]), v1[19]);
    (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
    result = v1[15];
    v1[5] = v1[20];
  }
  else
  {
    if ( v1[3] & 0x1000000 )
      sprintf((char *)v1[20], "%d", v1[15]);
    (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
    result = v1[15];
    v1[5] = v1[20];
  }
  return result;
}

//----- (10007CF0) --------------------------------------------------------
_DWORD *__thiscall sub_10007CF0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, const void *a8, int a9, int a10, int a11)
{
  _DWORD *v11; // ebp
  int v12; // edi
  int v13; // eax
  void *v14; // eax
  int v15; // ST4C_4
  void *v16; // ecx
  int v17; // eax
  unsigned int v18; // ST48_4
  void *v19; // eax
  int v20; // ST44_4
  char *v21; // esi
  void *v22; // eax
  int v23; // ecx
  int v24; // edx
  int v25; // eax
  CHAR Text; // [esp+14h] [ebp-8Ch]
  int v28; // [esp+9Ch] [ebp-4h]

  v11 = this;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = 0;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  this[16] = 1;
  v28 = 0;
  *this = &off_10034D88;
  this[6] = a3;
  v12 = sub_1000EF10(this);
  if ( v12 && dword_1003C874 && a9 )
  {
    v13 = sub_100025E0(a2);
    v11[19] = a9;
    v11[1] = v13;
    v11[3] = a11;
    v11[2] = 259;
    *((_BYTE *)v11 + 92) = 1;
    v11[21] = 0;
    v11[22] = 0;
    v11[7] = a4;
    v11[8] = a5;
    v11[17] = a7;
    v14 = operator new(a9 + 2);
    v11[20] = v14;
    if ( a8 )
    {
      memset(v14, 0, v11[19] + 2);
      qmemcpy((void *)v11[20], a8, v11[19]);
      v11[15] = j__atol((const char *)v11[20]);
    }
    v11[18] = a10;
    sub_1000E5F0();
    v15 = v11[17];
    sub_1000E5E0();
    v11[9] = v11[19] * sub_1000E730();
    v17 = sub_1000E670(v16);
    v18 = v17 * v11[9];
    v11[10] = v17;
    v19 = operator new(v18);
    v20 = v11[1];
    v11[11] = v19;
    sprintf(&Text, "EDIT_BACK_%i", v20);
    v21 = sub_10005BE0(dword_1003C874, v11[9], v11[10], 1, 1, &Text, 6, 0);
    if ( !v21 )
      MessageBoxA(0, &Text, "frm creation failed", 0x30u);
    sub_1001D1B0(
      (char *)(v11[7] + *(_DWORD *)(v12 + 44) + *(_DWORD *)(v12 + 24) * v11[8]),
      v11[9],
      (char *)v11[10],
      *(_DWORD *)(v12 + 24),
      *(char **)(*((_DWORD *)v21 + 16) + 12),
      v11[9]);
    v11[11] = *(_DWORD *)(*((_DWORD *)v21 + 16) + 12);
    v22 = operator new(4u);
    v23 = v11[10];
    v24 = v11[9];
    v11[12] = v22;
    *(_DWORD *)v11[12] = sub_1000F000(v11[6], v11[7], v11[8], v24, v23, -1, -1, -1, a6, 0, 0, 0, 64);
    v25 = sub_1000F0B0(*(_DWORD *)v11[12], 0);
    *(_DWORD *)(v25 + 64) = v11;
    *(_DWORD *)(v25 + 68) = v11[1];
    sub_1000F040(*(_DWORD *)v11[12], 0, 0, 0, (int)sub_100079D0);
    sub_1000E5E0();
    sub_10007630(v11);
  }
  return v11;
}
// 10034D88: using guessed type int (__thiscall *off_10034D88)(void *, char);

//----- (10007F90) --------------------------------------------------------
int __thiscall sub_10007F90(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ecx
  int result; // eax
  char v4; // al
  int v5; // edx
  int v6; // eax

  v1 = this;
  v2 = this[4];
  if ( v2 )
  {
    result = (*(int (**)(void))(*(_DWORD *)v2 + 24))();
    v1[15] = result;
  }
  else
  {
    v4 = *((_BYTE *)v1 + 12);
    v5 = v1[15] - v1[16];
    v1[15] = v5;
    if ( v4 & 1 )
    {
      v6 = v1[13];
      if ( v5 < v6 )
        v1[15] = v6;
    }
    (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
    result = v1[15];
  }
  return result;
}

//----- (10007FD0) --------------------------------------------------------
char *__cdecl sub_10007FD0(int a1)
{
  char *result; // eax
  int v2; // esi

  result = (char *)sub_1000F0B0(a1, 0);
  if ( result )
  {
    v2 = *((_DWORD *)result + 16);
    dword_1003C878 = (char *)(*(int (__thiscall **)(_DWORD))(*(_DWORD *)v2 + 24))(*((_DWORD *)result + 16));
    result = (char *)(*(int (__thiscall **)(int))(*(_DWORD *)v2 + 64))(v2);
    if ( result )
    {
      result = (char *)(*(int (__thiscall **)(char *))(*(_DWORD *)result + 68))(result);
      dword_1003C878 = result;
    }
  }
  return result;
}

//----- (10008010) --------------------------------------------------------
void __usercall __spoils<ecx> sub_10008010(int a1@<eax>)
{
  sub_10007FD0(a1);
}

//----- (10008020) --------------------------------------------------------
int __thiscall sub_10008020(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ecx
  int result; // eax
  char v4; // al
  int v5; // edx
  int v6; // eax

  v1 = this;
  v2 = this[4];
  if ( v2 )
  {
    result = (*(int (**)(void))(*(_DWORD *)v2 + 28))();
    v1[15] = result;
  }
  else
  {
    v4 = *((_BYTE *)v1 + 12);
    v5 = v1[16] + v1[15];
    v1[15] = v5;
    if ( v4 & 2 )
    {
      v6 = v1[14];
      if ( v5 > v6 )
        v1[15] = v6;
    }
    (*(void (__thiscall **)(_DWORD *))(*v1 + 4))(v1);
    result = v1[15];
  }
  return result;
}

//----- (10008060) --------------------------------------------------------
char *__cdecl sub_10008060(int a1)
{
  char *result; // eax
  int v2; // esi

  result = (char *)sub_1000F0B0(a1, 0);
  if ( result )
  {
    v2 = *((_DWORD *)result + 16);
    dword_1003C878 = (char *)(*(int (__thiscall **)(_DWORD))(*(_DWORD *)v2 + 28))(*((_DWORD *)result + 16));
    result = (char *)(*(int (__thiscall **)(int))(*(_DWORD *)v2 + 64))(v2);
    if ( result )
    {
      result = (char *)(*(int (__thiscall **)(char *))(*(_DWORD *)result + 68))(result);
      dword_1003C878 = result;
    }
  }
  return result;
}

//----- (100080A0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100080A0(int a1@<eax>)
{
  sub_10008060(a1);
}

//----- (100080B0) --------------------------------------------------------
_DWORD *__thiscall sub_100080B0(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
  _DWORD *v12; // esi
  int v13; // eax
  int v14; // ecx
  int v15; // eax
  int v16; // ecx
  int v17; // eax
  int v18; // ecx
  char *v19; // edi
  char *v20; // eax
  int v21; // edx
  int v22; // edi
  char *v23; // ebx
  char *v24; // eax

  v12 = this;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = 0;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  this[16] = 1;
  *this = &off_10034DD0;
  this[6] = a3;
  if ( sub_1000EF10(this) && dword_1003C874 )
  {
    v12[1] = sub_100025E0(a2);
    v12[2] = 260;
    v12[3] = a12;
    v12[4] = a11;
    if ( a11 )
    {
      (*(void (__stdcall **)(int))(*(_DWORD *)a11 + 16))(a10);
      v13 = (*(int (**)(void))(*(_DWORD *)v12[4] + 44))();
      v14 = v12[4];
      v12[7] = v13;
      v15 = (*(int (**)(void))(*(_DWORD *)v14 + 48))();
      v16 = v12[4];
      v12[8] = v15;
      v12[8] += (*(int (**)(void))(*(_DWORD *)v16 + 56))() / 2;
      (*(void (**)(void))(*(_DWORD *)v12[4] + 60))();
      v17 = (*(int (**)(void))(*(_DWORD *)v12[4] + 40))();
      v18 = v12[4];
      v12[15] = v17;
      (*(void (__stdcall **)(int))(*(_DWORD *)v18 + 8))(a7);
      (*(void (__stdcall **)(int))(*(_DWORD *)v12[4] + 12))(a8);
    }
    else
    {
      v12[16] = a10;
      v12[7] = a4;
      v12[8] = a5;
      if ( a12 & 1 )
        v12[13] = a7;
      if ( a12 & 2 )
        v12[14] = a8;
      v12[15] = a9;
    }
    v12[12] = operator new(8u);
    v19 = sub_10006080(dword_1003C874, "UPARWOFF.frm", 6u, 0);
    v20 = sub_10006080(dword_1003C874, "UPARWON.frm", 6u, 0);
    v12[9] = **((unsigned __int16 **)v19 + 16);
    v12[10] = *(unsigned __int16 *)(*((_DWORD *)v19 + 16) + 2);
    if ( v12[4] )
    {
      v21 = v12[8] - v12[10];
      v12[7] += -10 - v12[9];
      v12[8] = v21;
    }
    *(_DWORD *)v12[12] = sub_1000F000(
                           v12[6],
                           v12[7],
                           v12[8],
                           v12[9],
                           *(unsigned __int16 *)(*((_DWORD *)v19 + 16) + 2),
                           -1,
                           -1,
                           a6,
                           -1,
                           *(_DWORD *)(*((_DWORD *)v19 + 16) + 12),
                           *(_DWORD *)(*((_DWORD *)v20 + 16) + 12),
                           0,
                           64);
    *(_DWORD *)(sub_1000F0B0(*(_DWORD *)v12[12], 0) + 64) = v12;
    sub_1000F040(*(_DWORD *)v12[12], 0, 0, (int)sub_10008010, 0);
    v22 = v12[8] + v12[10];
    v23 = sub_10006080(dword_1003C874, "DNARWOFF.frm", 6u, 0);
    v24 = sub_10006080(dword_1003C874, "DNARWON.frm", 6u, 0);
    v12[10] += *(unsigned __int16 *)(*((_DWORD *)v23 + 16) + 2);
    *(_DWORD *)(v12[12] + 4) = sub_1000F000(
                                 v12[6],
                                 v12[7],
                                 v22,
                                 v12[9],
                                 *(unsigned __int16 *)(*((_DWORD *)v23 + 16) + 2),
                                 -1,
                                 -1,
                                 a6,
                                 -1,
                                 *(_DWORD *)(*((_DWORD *)v23 + 16) + 12),
                                 *(_DWORD *)(*((_DWORD *)v24 + 16) + 12),
                                 0,
                                 64);
    *(_DWORD *)(sub_1000F0B0(*(_DWORD *)(v12[12] + 4), 0) + 64) = v12;
    sub_1000F040(*(_DWORD *)(v12[12] + 4), 0, 0, (int)sub_100080A0, 0);
  }
  return v12;
}
// 10034DD0: using guessed type int (__thiscall *off_10034DD0)(void *, char);

//----- (10008380) --------------------------------------------------------
int __thiscall sub_10008380(_DWORD *this)
{
  _DWORD *v1; // esi
  int result; // eax
  int v3; // ST3C_4
  int v4; // eax
  int v5; // ebx
  int v6; // eax
  char *v7; // edi
  int v8; // ST20_4
  int v9; // eax
  int v10; // edx
  int v11; // ecx
  int v12; // eax
  int v13; // edx
  int v14; // [esp+4h] [ebp-10h]
  int v15; // [esp+8h] [ebp-Ch]
  int v16; // [esp+Ch] [ebp-8h]
  int v17; // [esp+10h] [ebp-4h]

  v1 = this;
  result = this[20];
  if ( result )
  {
    v3 = this[6];
    v4 = sub_1000EF10(this);
    v5 = v4;
    v6 = *(_DWORD *)(v4 + 24);
    v7 = (char *)(v1[7] + *(_DWORD *)(v5 + 44) + v6 * v1[8]);
    sub_1001D1B0((char *)v1[11], v1[9], (char *)v1[10], v1[9], v7, v6);
    sub_1000E5F0();
    v8 = v1[17];
    sub_1000E5E0();
    sub_1000E600((int)v7, v1[20], v1[9], *(_DWORD *)(v5 + 24), *((_BYTE *)v1 + 72));
    sub_1000E5E0();
    v9 = v1[7];
    v10 = v1[9];
    v11 = v1[8];
    v14 = v9;
    v12 = v10 + v9 - 1;
    v13 = v1[10];
    v16 = v12;
    v15 = v11;
    v17 = v13 + v11 - 1;
    result = sub_1000ECC0(v5, &v14);
  }
  return result;
}

//----- (100086B0) --------------------------------------------------------
int *__thiscall sub_100086B0(_DWORD *this)
{
  _DWORD *v1; // edi
  int *result; // eax
  int v3; // ecx
  _DWORD *v4; // ebp
  char *v5; // esi
  char *v6; // eax
  int v7; // ecx
  int v8; // [esp+4h] [ebp-4h]

  v1 = this;
  result = (int *)this[12];
  if ( result )
  {
    v8 = 0;
    result = (int *)sub_1000F0B0(*result, (int)&v8);
    if ( result )
    {
      v3 = *(_DWORD *)(v8 + 24);
      v4 = result + 2;
      v5 = (char *)(result[2] + *(_DWORD *)(v8 + 44) + v3 * result[3]);
      sub_1001D1B0((char *)v1[11], v1[9], (char *)v1[10], v1[9], v5, v3);
      if ( *((_BYTE *)v1 + 80) )
        v6 = sub_10006080(dword_1003C874, "PRFSLDON.frm", 6u, 0);
      else
        v6 = sub_10006080(dword_1003C874, "PRFSLDOF.frm", 6u, 0);
      if ( v1[3] & 0x2000000 )
        v7 = *(_DWORD *)(v8 + 24) * v1[15];
      else
        v7 = v1[15];
      sub_1001D200(
        *(_BYTE **)(*((_DWORD *)v6 + 16) + 12),
        **((unsigned __int16 **)v6 + 16),
        *(unsigned __int16 *)(*((_DWORD *)v6 + 16) + 2),
        **((unsigned __int16 **)v6 + 16),
        (int)&v5[v7],
        *(_DWORD *)(v8 + 24));
      result = (int *)sub_1000ECC0(v8, v4);
      *((_BYTE *)v1 + 80) = 0;
    }
  }
  return result;
}

//----- (10008790) --------------------------------------------------------
int __thiscall sub_10008790(int this, int a2)
{
  int v2; // esi
  int v3; // edi
  unsigned __int64 v4; // rax
  signed int v5; // ecx
  unsigned __int64 v6; // rax

  v2 = this;
  v3 = *(_DWORD *)(this + 72);
  v4 = (unsigned __int64)((double)(a2 - v3) * *(double *)(this + 88));
  *(_DWORD *)(this + 60) = v4;
  if ( (v4 & 0x80000000) == 0i64 )
  {
    v5 = *(_DWORD *)(this + 56);
    if ( (signed int)v4 > v5 )
      *(_DWORD *)(v2 + 60) = v5;
  }
  else
  {
    *(_DWORD *)(this + 60) = 0;
  }
  v6 = (unsigned __int64)((double)*(signed int *)(v2 + 60) / *(double *)(v2 + 88));
  HIDWORD(v6) = *(_DWORD *)v2;
  *(_DWORD *)(v2 + 68) = v3 + v6;
  *(_BYTE *)(v2 + 80) = 0;
  (*(void (__thiscall **)(int))(HIDWORD(v6) + 4))(v2);
  return *(_DWORD *)(v2 + 68);
}

//----- (10008910) --------------------------------------------------------
int __cdecl sub_10008910(int a1)
{
  int result; // eax
  int v2; // edi
  double *v3; // esi
  void *v4; // ecx
  int v5; // eax
  int v6; // ecx
  unsigned __int64 v7; // rax
  int v8; // ecx
  unsigned __int64 v9; // rax
  int v10; // [esp+10h] [ebp-10h]
  int v11; // [esp+14h] [ebp-Ch]
  int v12; // [esp+18h] [ebp-8h]
  int v13; // [esp+1Ch] [ebp-4h]

  v10 = 0;
  result = sub_1000F0B0(a1, (int)&v10);
  v2 = result;
  if ( result )
  {
    v3 = *(double **)(result + 64);
    v12 = 0;
    v11 = 0;
    while ( sub_1000EEB0() & 5 )
    {
      sub_1000F090(v4);
      sub_1000EEC0((int)&v12, (int)&v11);
      if ( (*(int (__thiscall **)(double *))(*(_DWORD *)v3 + 60))(v3) & 0x2000000 )
        v5 = v11 - *(_DWORD *)(v2 + 12) - *(_DWORD *)(v10 + 12);
      else
        v5 = v12 - *(_DWORD *)(v2 + 8) - *(_DWORD *)(v10 + 8);
      *((_DWORD *)v3 + 15) = v5;
      if ( v5 >= 0 )
      {
        v6 = *((_DWORD *)v3 + 14);
        if ( v5 > v6 )
          *((_DWORD *)v3 + 15) = v6;
      }
      else
      {
        *((_DWORD *)v3 + 15) = 0;
      }
      v7 = (unsigned __int64)((double)*((signed int *)v3 + 15) / v3[11]);
      v8 = *((_DWORD *)v3 + 18);
      v13 = v7;
      *((_DWORD *)v3 + 17) = v7 + v8;
      v9 = (unsigned __int64)((double)(signed int)v7 * v3[11]);
      HIDWORD(v9) = *(_DWORD *)v3;
      *((_DWORD *)v3 + 15) = v9;
      *((_BYTE *)v3 + 80) = 1;
      (*(void (__thiscall **)(double *))(HIDWORD(v9) + 4))(v3);
    }
    result = (*(int (__thiscall **)(double *))(*(_DWORD *)v3 + 4))(v3);
    dword_1003C878 = (char *)*((_DWORD *)v3 + 17);
  }
  return result;
}

//----- (10008A10) --------------------------------------------------------
void __usercall __spoils<ecx> sub_10008A10(int a1@<eax>)
{
  sub_10008910(a1);
}

//----- (10008A20) --------------------------------------------------------
_DWORD *__thiscall sub_10008A20(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  _DWORD *v11; // esi
  char *v12; // edi
  int v13; // eax
  double v14; // st7
  int v15; // ST48_4
  char *v16; // edi
  int v17; // eax
  int v18; // ST10_4
  int v19; // ecx
  int v21; // [esp+8h] [ebp-34h]
  CHAR Text; // [esp+10h] [ebp-2Ch]
  int v23; // [esp+38h] [ebp-4h]

  v11 = this;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = 0;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  this[16] = 1;
  v23 = 0;
  *this = &off_10034E68;
  this[6] = a3;
  v21 = sub_1000EF10(this);
  if ( v21 )
  {
    v11[1] = sub_100025E0(a2);
    v11[3] = a11 | 7;
    v11[8] = a5;
    v11[7] = a4;
    v11[17] = a10;
    v11[19] = a9;
    v11[2] = 262;
    *((_BYTE *)v11 + 80) = 0;
    v11[18] = a8;
    v11[13] = 0;
    v11[14] = a6;
    v11[12] = operator new(4u);
    v12 = sub_10006080(dword_1003C874, "PRFSLDOF.frm", 6u, 0);
    sub_10006080(dword_1003C874, "PRFSLDON.frm", 6u, 0);
    if ( v11[3] & 0x2000000 )
    {
      v11[10] = a6;
      v11[9] = **((unsigned __int16 **)v12 + 16);
      v13 = v11[14] - *(unsigned __int16 *)(*((_DWORD *)v12 + 16) + 2);
    }
    else
    {
      v11[9] = a6;
      v11[10] = *(unsigned __int16 *)(*((_DWORD *)v12 + 16) + 2);
      v13 = v11[14] - **((unsigned __int16 **)v12 + 16);
    }
    v11[14] = v13;
    v14 = (double)(signed int)v11[14] / (double)(unsigned int)(a9 - a8);
    *((double *)v11 + 11) = v14;
    v15 = v11[1];
    v11[15] = (unsigned __int64)((double)(a10 - a8) * v14);
    sprintf(&Text, "SLIDER_H_BACK_%i", v15);
    v16 = sub_10005BE0(dword_1003C874, v11[9], v11[10], 1, 1, &Text, 6, 0);
    if ( !v16 )
      MessageBoxA(0, &Text, "frm creation failed", 0x30u);
    sub_1001D1B0(
      (char *)(v11[7] + *(_DWORD *)(v21 + 44) + *(_DWORD *)(v21 + 24) * v11[8]),
      v11[9],
      (char *)v11[10],
      *(_DWORD *)(v21 + 24),
      *(char **)(*((_DWORD *)v16 + 16) + 12),
      v11[9]);
    v17 = v11[8];
    v18 = v11[10];
    v19 = v11[7];
    v11[11] = *(_DWORD *)(*((_DWORD *)v16 + 16) + 12);
    *(_DWORD *)v11[12] = sub_1000F000(v11[6], v19, v17, v11[9], v18, -1, -1, a7, -1, 0, 0, 0, 64);
    *(_DWORD *)(sub_1000F0B0(*(_DWORD *)v11[12], 0) + 64) = v11;
    sub_1000F040(*(_DWORD *)v11[12], 0, 0, (int)sub_10008A10, 0);
    sub_100086B0(v11);
  }
  return v11;
}
// 10034E68: using guessed type int (__thiscall *off_10034E68)(void *, char);

//----- (10008C90) --------------------------------------------------------
int __thiscall sub_10008C90(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // ST24_4
  int result; // eax
  int v4; // ebp
  int v5; // ecx
  int v6; // eax
  char *v7; // edi
  int v8; // ST04_4
  void *v9; // ecx
  void *v10; // ecx
  _BYTE *v11; // eax
  int v12; // ebx
  const char *v13; // eax
  int v14; // eax
  int v15; // edx
  int v16; // ecx
  int v17; // eax
  int v18; // edx
  signed int v19; // [esp+8h] [ebp-24h]
  char *i; // [esp+Ch] [ebp-20h]
  signed int v21; // [esp+10h] [ebp-1Ch]
  int v22; // [esp+14h] [ebp-18h]
  int v23; // [esp+1Ch] [ebp-10h]
  int v24; // [esp+20h] [ebp-Ch]
  int v25; // [esp+24h] [ebp-8h]
  int v26; // [esp+28h] [ebp-4h]

  v1 = this;
  v2 = this[6];
  result = sub_1000EF10(this);
  v4 = result;
  if ( result )
  {
    v5 = *(_DWORD *)(result + 44);
    if ( v5 )
    {
      v6 = *(_DWORD *)(result + 24);
      v7 = (char *)(v1[7] + v5 + v6 * v1[8]);
      sub_1001D1B0((char *)v1[11], v1[9], (char *)v1[10], v1[9], v7, v6);
      sub_1000E5F0();
      v8 = v1[17];
      sub_1000E5E0();
      v22 = *(_DWORD *)(v4 + 24) * sub_1000E670(v9);
      v19 = 0;
      v21 = v1[10] / (unsigned int)sub_1000E670(v10);
      for ( i = (char *)operator new(0x100u); v1[19]; ++v19 )
      {
        v11 = (_BYTE *)v1[19];
        if ( !*v11 || v19 >= v21 )
          break;
        v12 = sub_1000E930(v11, v1[9]);
        v13 = (const char *)v1[19];
        if ( v13[v12] == 32 )
          ++v12;
        strncpy(i, v13, v12);
        i[v12] = 0;
        if ( v12 )
          v1[19] += v12;
        else
          *(_BYTE *)v1[19] = 0;
        sub_1000E600((int)v7, (int)i, v1[9], *(_DWORD *)(v4 + 24), *((_BYTE *)v1 + 72));
        v7 += v22;
      }
      j__free(i);
      sub_1000E5E0();
      v14 = v1[7];
      v15 = v1[9];
      v16 = v1[8];
      v23 = v14;
      v17 = v14 + v15 - 1;
      v18 = v1[10];
      v25 = v17;
      v24 = v16;
      v26 = v18 + v16 - 1;
      result = sub_1000ECC0(v4, &v23);
    }
  }
  return result;
}

//----- (10008E10) --------------------------------------------------------
int __thiscall sub_10008E10(int *this, int a2)
{
  int v2; // edx

  v2 = *this;
  this[19] = a2;
  return (*(int (**)(void))(v2 + 4))();
}

//----- (10008E20) --------------------------------------------------------
_DWORD *__thiscall sub_10008E20(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  _DWORD *v10; // esi
  int v11; // ebp
  char *v12; // ebx
  CHAR Text; // [esp+10h] [ebp-8Ch]
  int v15; // [esp+98h] [ebp-4h]

  v10 = this;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = 0;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  this[16] = 1;
  v15 = 0;
  *this = &off_10034EB0;
  this[6] = a3;
  v11 = sub_1000EF10(this);
  if ( v11 && dword_1003C874 )
  {
    v10[1] = sub_100025E0(a2);
    v10[8] = a5;
    v10[3] = a10;
    v10[9] = a6;
    v10[7] = a4;
    v10[17] = a8;
    v10[2] = 263;
    v10[10] = a7;
    v10[19] = 0;
    v10[18] = a9;
    v10[11] = operator new(a7 * a6);
    sprintf(&Text, "TEXT_BOX_%i", v10[1]);
    v12 = sub_10005BE0(dword_1003C874, v10[9], v10[10], 1, 1, &Text, 6, 0);
    if ( !v12 )
      MessageBoxA(0, &Text, "frm creation failed", 0x30u);
    sub_1001D1B0(
      (char *)(v10[7] + *(_DWORD *)(v11 + 44) + *(_DWORD *)(v11 + 24) * v10[8]),
      v10[9],
      (char *)v10[10],
      *(_DWORD *)(v11 + 24),
      *(char **)(*((_DWORD *)v12 + 16) + 12),
      v10[9]);
    v10[11] = *(_DWORD *)(*((_DWORD *)v12 + 16) + 12);
    sub_10008C90(v10);
  }
  return v10;
}
// 10034EB0: using guessed type int (__thiscall *off_10034EB0)(void *, char);

//----- (10008FD0) --------------------------------------------------------
int __thiscall sub_10008FD0(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // eax
  int v3; // ecx
  int *v4; // ecx
  int v5; // eax
  _DWORD *v6; // ebx
  char *v7; // edi
  int v9; // [esp+Ch] [ebp-4h]

  v1 = this;
  v2 = this[15];
  if ( v2 >= 0 )
  {
    v3 = this[14];
    if ( v2 > v3 )
      v1[15] = v3;
  }
  else
  {
    this[15] = 0;
  }
  sub_10007560(v1);
  v4 = (int *)v1[12];
  v9 = 0;
  v5 = sub_1000F0B0(*v4, (int)&v9);
  v6 = (_DWORD *)(v5 + 8);
  v7 = (char *)(*(_DWORD *)(v5 + 8) + *(_DWORD *)(v9 + 44) + *(_DWORD *)(v9 + 24) * *(_DWORD *)(v5 + 12));
  sub_1001D1B0((char *)v1[11], v1[9], (char *)v1[10], v1[9], v7, *(_DWORD *)(v9 + 24));
  sub_1001D200(*(_BYTE **)(v1[18] + 4 * v1[15]), v1[9], v1[10], v1[9], (int)v7, *(_DWORD *)(v9 + 24));
  return sub_1000ECC0(v9, v6);
}

//----- (10009070) --------------------------------------------------------
_DWORD *__thiscall sub_10009070(_DWORD *this, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _DWORD *v9; // ebp
  int v10; // esi
  int v11; // edi
  char *v12; // eax
  int v13; // ecx
  int v14; // ecx
  int v15; // ebx
  const char *v16; // eax
  unsigned int v17; // kr0C_4
  void *v18; // ecx
  int v19; // edi
  int i; // ebx
  int v21; // ST4C_4
  int v22; // eax
  int v23; // eax
  char *v24; // esi
  int v25; // eax
  int v26; // ST14_4
  int v27; // ecx
  int v28; // eax
  int v30; // [esp+8h] [ebp-A0h]
  int *v31; // [esp+Ch] [ebp-9Ch]
  int v32; // [esp+10h] [ebp-98h]
  CHAR Text; // [esp+1Ch] [ebp-8Ch]
  int v34; // [esp+A4h] [ebp-4h]

  v9 = this;
  v10 = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = 0;
  this[12] = 0;
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  this[16] = 1;
  v34 = 0;
  *this = &off_10034EF8;
  this[6] = a3;
  v31 = (int *)sub_1000EF10(this);
  if ( v31 && dword_1003C874 )
  {
    v11 = a6;
    v9[1] = sub_100025E0(a2);
    v9[14] = a6 - 1;
    v9[2] = 258;
    v9[3] = 7;
    *((_BYTE *)v9 + 68) = 1;
    v9[7] = a4;
    v9[8] = a5;
    v32 = 4 * a6;
    v9[18] = operator new(4 * a6);
    v12 = sub_10006080(dword_1003C874, "PRFBKNBS.frm", 6u, 0);
    v9[9] = **((unsigned __int16 **)v12 + 16);
    v9[10] = (unsigned int)*(unsigned __int16 *)(*((_DWORD *)v12 + 16) + 2) >> 2;
    *(_DWORD *)v9[18] = *(_DWORD *)(*((_DWORD *)v12 + 16) + 12);
    v13 = v9[9] * v9[10];
    *(_DWORD *)(v9[18] + 4) = v13 + *(_DWORD *)(*((_DWORD *)v12 + 16) + 12);
    v14 = v9[9] * v9[10] + v13;
    *(_DWORD *)(v9[18] + 8) = v14 + *(_DWORD *)(*((_DWORD *)v12 + 16) + 12);
    *(_DWORD *)(v9[18] + 12) = v14 + *(_DWORD *)(*((_DWORD *)v12 + 16) + 12) + v9[9] * v9[10];
    if ( a9 )
    {
      v15 = 0;
      v9[19] = operator new(v32);
      if ( a6 > 0 )
      {
        do
        {
          v16 = *(const char **)(a9 + 4 * v15);
          if ( v16 )
          {
            v17 = strlen(v16);
            *(_DWORD *)(v9[19] + 4 * v15) = operator new(v17 + 1);
            memset(*(void **)(v9[19] + 4 * v15), 0, v17 + 1);
            qmemcpy(*(void **)(v9[19] + 4 * v15), *(const void **)(a9 + 4 * v15), v17);
            v11 = a6;
            v10 = 0;
          }
          ++v15;
        }
        while ( v15 < v11 );
      }
    }
    else
    {
      v9[19] = 0;
    }
    sub_1000E5F0();
    sub_1000E5E0();
    v30 = sub_1000E670(v18);
    v19 = 0;
    v9[12] = operator new(v32 + 4);
    for ( i = 0; i < a6; ++i )
    {
      v21 = *(_DWORD *)(a9 + 4 * i);
      v22 = sub_1000E690();
      switch ( i )
      {
        case 0:
          v10 = v9[7] - v22;
          goto LABEL_15;
        case 1:
          v10 = v9[7] + v9[9] / 2 - v22 / 2;
          v19 = v9[8] - v30;
          break;
        case 2:
          v10 = v9[7] + v9[9];
LABEL_15:
          v19 = v9[8] - v30 / 2 + 10;
          break;
        case 3:
          v10 = v9[7] + v9[9];
          v19 = v9[10] - v30 / 2 + v9[8] - 10;
          break;
        default:
          break;
      }
      if ( v10 > 0 && v10 + v22 < v31[6] && v19 > 0 && v19 + v30 < v31[7] )
      {
        *(_DWORD *)(v9[12] + 4 * i + 4) = sub_1000F000(v9[6], v10, v19, v22, v30, -1, -1, -1, a8, 0, 0, 0, 64);
        v23 = sub_1000F0B0(*(_DWORD *)(v9[12] + 4 * i + 4), 0);
        *(_DWORD *)(v23 + 60) = i;
        *(_DWORD *)(v23 + 64) = v9;
        sub_1000F040(*(_DWORD *)(v9[12] + 4 * i + 4), 0, 0, 0, (int)sub_100074A0);
      }
    }
    sub_10007560(v9);
    sprintf(&Text, "DIAL_BACK_%i", v9[1]);
    v24 = sub_10005BE0(dword_1003C874, v9[9], v9[10], 1, 1, &Text, 6, 0);
    if ( !v24 )
      MessageBoxA(0, &Text, "frm creation failed", 0x30u);
    sub_1001D1B0(
      (char *)(v9[7] + v31[11] + v31[6] * v9[8]),
      v9[9],
      (char *)v9[10],
      v31[6],
      *(char **)(*((_DWORD *)v24 + 16) + 12),
      v9[9]);
    v25 = v9[8];
    v26 = v9[10];
    v27 = v9[7];
    v9[11] = *(_DWORD *)(*((_DWORD *)v24 + 16) + 12);
    *(_DWORD *)v9[12] = sub_1000F000(v9[6], v27, v25, v9[9], v26, -1, -1, -1, a8, 0, 0, 0, 64);
    v28 = sub_1000F0B0(*(_DWORD *)v9[12], 0);
    *(_DWORD *)(v28 + 64) = v9;
    *(_DWORD *)(v28 + 68) = v9[1];
    sub_1000F040(*(_DWORD *)v9[12], 0, 0, 0, (int)sub_10007550);
    sub_1000E5E0();
    v9[15] = a7;
    sub_10008FD0(v9);
  }
  return v9;
}
// 10034EF8: using guessed type int (__thiscall *off_10034EF8)(void *, char);

//----- (10009510) --------------------------------------------------------
void *__thiscall sub_10009510(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10009530(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10009530) --------------------------------------------------------
void __thiscall sub_10009530(_DWORD *this)
{
  int v1; // edx
  void *v2; // ecx

  v1 = this[11];
  this[24] = 0;
  *this = &off_10034CB0;
  if ( v1 )
    this[11] = 0;
  v2 = (void *)this[12];
  if ( v2 )
    j__free(v2);
}
// 10034CB0: using guessed type int (__thiscall *off_10034CB0)(void *, char);

//----- (10009560) --------------------------------------------------------
void *__thiscall sub_10009560(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  std::ios_base::~ios_base((std::ios_base *)this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10009630) --------------------------------------------------------
void *__thiscall sub_10009630(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10009650(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10009650) --------------------------------------------------------
void __thiscall sub_10009650(_DWORD *this)
{
  _DWORD *v1; // esi
  void *v2; // eax
  int i; // edi
  bool v4; // zf
  void *v5; // esi

  v1 = this;
  *this = &off_10034D88;
  v2 = (void *)this[20];
  if ( v2 )
    j__free(v2);
  if ( v1[22] )
  {
    for ( i = 0; i < v1[21]; ++i )
      j__free(*(void **)(v1[22] + 4 * i));
    v1[22] = 0;
    v1[21] = 0;
  }
  v4 = v1[11] == 0;
  *v1 = &off_10034CB0;
  if ( !v4 )
    v1[11] = 0;
  v5 = (void *)v1[12];
  if ( v5 )
    j__free(v5);
}
// 10034CB0: using guessed type int (__thiscall *off_10034CB0)(void *, char);
// 10034D88: using guessed type int (__thiscall *off_10034D88)(void *, char);

//----- (100097A0) --------------------------------------------------------
void *__thiscall sub_100097A0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_100097C0(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (100097C0) --------------------------------------------------------
void __thiscall sub_100097C0(_DWORD *this)
{
  int v1; // edx
  bool v2; // zf
  void *v3; // ecx

  v1 = this[19];
  *this = &off_10034EB0;
  if ( v1 )
    this[19] = 0;
  v2 = this[11] == 0;
  *this = &off_10034CB0;
  if ( !v2 )
    this[11] = 0;
  v3 = (void *)this[12];
  if ( v3 )
    j__free(v3);
}
// 10034CB0: using guessed type int (__thiscall *off_10034CB0)(void *, char);
// 10034EB0: using guessed type int (__thiscall *off_10034EB0)(void *, char);

//----- (100097F0) --------------------------------------------------------
void *__thiscall sub_100097F0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  std::ios_base::~ios_base((std::ios_base *)this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (100098E0) --------------------------------------------------------
void *__thiscall sub_100098E0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10009900(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10009900) --------------------------------------------------------
void __thiscall sub_10009900(_DWORD *this)
{
  int v1; // eax
  void *v2; // ecx

  v1 = this[11];
  *this = &off_10034CB0;
  if ( v1 )
    this[11] = 0;
  v2 = (void *)this[12];
  if ( v2 )
    j__free(v2);
}
// 10034CB0: using guessed type int (__thiscall *off_10034CB0)(void *, char);

//----- (100099E0) --------------------------------------------------------
int __cdecl sub_100099E0(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_fwriteInt_(v2, a2, v2);
}
// 1003C8C0: invalid function type has been ignored
// 1003C8C0: using guessed type int (__fastcall *IDA_db_fwriteInt_)(_DWORD, _DWORD, _DWORD);

//----- (10009A00) --------------------------------------------------------
int __cdecl sub_10009A00(int a1, int a2)
{
  int v2; // ecx

  return IDA_MapDirErase_(v2, a2, 0);
}
// 1003C8B4: invalid function type has been ignored
// 1003C8B4: using guessed type int (__fastcall *IDA_MapDirErase_)(_DWORD, _DWORD, _DWORD);

//----- (10009A60) --------------------------------------------------------
int __cdecl sub_10009A60(int a1, int a2, int a3, int a4)
{
  return IDA_config_get_value_(a4, a2);
}
// 1003C888: invalid function type has been ignored
// 1003C888: using guessed type int (__fastcall *IDA_config_get_value_)(_DWORD, _DWORD);

//----- (10009A90) --------------------------------------------------------
int __cdecl sub_10009A90(int a1, int a2, int a3, int a4)
{
  return IDA_config_get_string_(a4, a2);
}
// 1003C89C: invalid function type has been ignored
// 1003C89C: using guessed type int (__fastcall *IDA_config_get_string_)(_DWORD, _DWORD);

//----- (10009AC0) --------------------------------------------------------
int __cdecl sub_10009AC0(int a1, int a2, int a3, int a4)
{
  return IDA_config_set_value_(a4, a2);
}
// 1003C87C: invalid function type has been ignored
// 1003C87C: using guessed type int (__fastcall *IDA_config_set_value_)(_DWORD, _DWORD);

//----- (10009AF0) --------------------------------------------------------
int __cdecl sub_10009AF0(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_fopen_(v2, a2, 0);
}
// 1003C898: invalid function type has been ignored
// 1003C898: using guessed type int (__fastcall *IDA_db_fopen_)(_DWORD, _DWORD, _DWORD);

//----- (10009B20) --------------------------------------------------------
int __thiscall sub_10009B20(void *this)
{
  return IDA_db_fclose_(this);
}
// 1003C8B0: invalid function type has been ignored
// 1003C8B0: using guessed type int (__cdecl *IDA_db_fclose_)(_DWORD);

//----- (10009B40) --------------------------------------------------------
int __cdecl sub_10009B40(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_fseek_(v2, a2);
}
// 1003C8A4: invalid function type has been ignored
// 1003C8A4: using guessed type int (__fastcall *IDA_db_fseek_)(_DWORD, _DWORD);

//----- (10009B60) --------------------------------------------------------
int __cdecl sub_10009B60(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_freadByte_(v2, a2, v2);
}
// 1003C8A8: invalid function type has been ignored
// 1003C8A8: using guessed type int (__fastcall *IDA_db_freadByte_)(_DWORD, _DWORD, _DWORD);

//----- (10009B80) --------------------------------------------------------
int __cdecl sub_10009B80(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_freadShort_(v2, a2, v2);
}
// 1003C8AC: invalid function type has been ignored
// 1003C8AC: using guessed type int (__fastcall *IDA_db_freadShort_)(_DWORD, _DWORD, _DWORD);

//----- (10009BA0) --------------------------------------------------------
int __cdecl sub_10009BA0(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_freadInt_(v2, a2, v2);
}
// 1003C8A0: invalid function type has been ignored
// 1003C8A0: using guessed type int (__fastcall *IDA_db_freadInt_)(_DWORD, _DWORD, _DWORD);

//----- (10009BC0) --------------------------------------------------------
int __cdecl sub_10009BC0(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_freadShortCount_(v2, a2);
}
// 1003C880: invalid function type has been ignored
// 1003C880: using guessed type int (__fastcall *IDA_db_freadShortCount_)(_DWORD, _DWORD);

//----- (10009BE0) --------------------------------------------------------
int __cdecl sub_10009BE0(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_freadIntCount_(v2, a2);
}
// 1003C890: invalid function type has been ignored
// 1003C890: using guessed type int (__fastcall *IDA_db_freadIntCount_)(_DWORD, _DWORD);

//----- (10009C00) --------------------------------------------------------
int __cdecl sub_10009C00(int a1, int a2, int a3)
{
  return IDA_db_fread_(a1, a3);
}
// 1003C894: invalid function type has been ignored
// 1003C894: using guessed type int (__fastcall *IDA_db_fread_)(_DWORD, _DWORD);

//----- (10009C30) --------------------------------------------------------
int __cdecl sub_10009C30(int a1, int a2)
{
  int v2; // ecx

  return IDA_db_freadByteCount_(v2, a2);
}
// 1003C884: invalid function type has been ignored
// 1003C884: using guessed type int (__fastcall *IDA_db_freadByteCount_)(_DWORD, _DWORD);

//----- (10009C50) --------------------------------------------------------
int F_initFunc3()
{
  int result; // eax

  IDA_db_fopen_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4914932);
  IDA_db_fclose_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4926356);
  IDA_db_fseek_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4917836);
  IDA_db_freadByte_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4918492);
  IDA_db_freadShort_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4918512);
  IDA_db_freadInt_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4918608);
  IDA_db_freadShortCount_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4919108);
  IDA_db_freadIntCount_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4919264);
  IDA_db_fread_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4915840);
  IDA_db_freadByteCount_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4919044);
  IDA__game_config = F_ptrCorrection_(5819456);
  IDA__gconfig_file_name = F_ptrCorrection_(5819496);
  IDA_config_get_value_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4352588);
  IDA_config_get_string_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4352336);
  IDA_config_set_value_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4352848);
  IDA_db_init_ = F_ptrCorrection_(4912064);
  IDA_db_fwriteByte_ = F_ptrCorrection_(4918688);
  IDA_db_fwriteShort_ = F_ptrCorrection_(4918736);
  IDA_db_fwriteInt_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4918812);
  IDA_MapDirErase_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4661452);
  IDA_db_get_file_list_ = F_ptrCorrection_(4920352);
  result = F_ptrCorrection_(4921928);
  IDA_db_free_file_list_ = result;
  return result;
}
// 1003C87C: using guessed type int (__fastcall *IDA_config_set_value_)(_DWORD, _DWORD);
// 1003C880: using guessed type int (__fastcall *IDA_db_freadShortCount_)(_DWORD, _DWORD);
// 1003C884: using guessed type int (__fastcall *IDA_db_freadByteCount_)(_DWORD, _DWORD);
// 1003C888: using guessed type int (__fastcall *IDA_config_get_value_)(_DWORD, _DWORD);
// 1003C88C: using guessed type int IDA_db_init_;
// 1003C890: using guessed type int (__fastcall *IDA_db_freadIntCount_)(_DWORD, _DWORD);
// 1003C894: using guessed type int (__fastcall *IDA_db_fread_)(_DWORD, _DWORD);
// 1003C898: using guessed type int (__fastcall *IDA_db_fopen_)(_DWORD, _DWORD, _DWORD);
// 1003C89C: using guessed type int (__fastcall *IDA_config_get_string_)(_DWORD, _DWORD);
// 1003C8A0: using guessed type int (__fastcall *IDA_db_freadInt_)(_DWORD, _DWORD, _DWORD);
// 1003C8A4: using guessed type int (__fastcall *IDA_db_fseek_)(_DWORD, _DWORD);
// 1003C8A8: using guessed type int (__fastcall *IDA_db_freadByte_)(_DWORD, _DWORD, _DWORD);
// 1003C8AC: using guessed type int (__fastcall *IDA_db_freadShort_)(_DWORD, _DWORD, _DWORD);
// 1003C8B0: using guessed type int (__cdecl *IDA_db_fclose_)(_DWORD);
// 1003C8B4: using guessed type int (__fastcall *IDA_MapDirErase_)(_DWORD, _DWORD, _DWORD);
// 1003C8B8: using guessed type int IDA_db_fwriteByte_;
// 1003C8BC: using guessed type int IDA_db_fwriteShort_;
// 1003C8C0: using guessed type int (__fastcall *IDA_db_fwriteInt_)(_DWORD, _DWORD, _DWORD);
// 1003C8C4: using guessed type int IDA__game_config;
// 1003C8C8: using guessed type int IDA__gconfig_file_name;
// 1003C8CC: using guessed type int IDA_db_get_file_list_;
// 1003C8D0: using guessed type int IDA_db_free_file_list_;

//----- (10009DB0) --------------------------------------------------------
unsigned int *__thiscall sub_10009DB0(unsigned int *this, unsigned int a2)
{
  unsigned int *v2; // esi
  int v3; // eax
  void *v4; // eax
  unsigned int v5; // edx

  v2 = this;
  *this = a2;
  v3 = (a2 >> 5) + 1;
  this[2] = v3;
  v4 = malloc(4 * v3);
  v5 = 4 * v2[2];
  v2[1] = (unsigned int)v4;
  memset(v4, 0, v5);
  return v2;
}

//----- (10009DF0) --------------------------------------------------------
int __thiscall sub_10009DF0(_DWORD *this, unsigned int a2)
{
  int result; // eax

  result = a2 >> 5;
  if ( a2 >> 5 < this[2] )
  {
    result = this[1] + 4 * result;
    *(_DWORD *)result |= 1 << (a2 & 0x1F);
  }
  return result;
}

//----- (10009E20) --------------------------------------------------------
int __thiscall sub_10009E20(_DWORD *this, unsigned int a2)
{
  int result; // eax

  if ( a2 >> 5 >= this[2] )
    result = 0;
  else
    result = (1 << (a2 & 0x1F)) & *(_DWORD *)(this[1] + 4 * (a2 >> 5));
  return result;
}

//----- (10009E90) --------------------------------------------------------
int __cdecl sub_10009E90(char a1, int a2)
{
  _DWORD *v2; // esi
  int v3; // eax
  int v4; // eax
  bool v5; // zf
  bool v6; // sf
  unsigned __int8 v7; // of
  int result; // eax

  if ( a1 )
  {
    v2 = *(_DWORD **)IDA__objectTable;
    dword_10064494 = 0;
    dword_10064490 = a2;
  }
  else
  {
    v2 = *(_DWORD **)(dword_1006448C + 4);
  }
  v3 = dword_10064494;
  if ( dword_10064494 >= *(_DWORD *)IDA__grid_size )
  {
LABEL_11:
    dword_1006448C = (int)v2;
    result = 0;
  }
  else
  {
    while ( !v2 )
    {
LABEL_10:
      v2 = *(_DWORD **)(IDA__objectTable + 4 * v3++ + 4);
      v7 = __OFSUB__(v3, *(_DWORD *)IDA__grid_size);
      v6 = v3 - *(_DWORD *)IDA__grid_size < 0;
      dword_10064494 = v3;
      if ( !(v6 ^ v7) )
        goto LABEL_11;
    }
    while ( 1 )
    {
      v4 = *v2;
      v5 = *(_DWORD *)(*v2 + 40) == dword_10064490;
      dword_1006448C = (int)v2;
      if ( v5 )
      {
        if ( sub_10005710(*(_BYTE *)(v4 + 35) & 0xF) )
          break;
      }
      v2 = (_DWORD *)v2[1];
      if ( !v2 )
      {
        v3 = dword_10064494;
        goto LABEL_10;
      }
    }
    result = *v2;
    dword_1006448C = (int)v2;
  }
  return result;
}
// 1003D0DC: using guessed type int IDA__grid_size;
// 10064414: using guessed type int IDA__objectTable;
// 1006448C: using guessed type int dword_1006448C;
// 10064490: using guessed type int dword_10064490;
// 10064494: using guessed type int dword_10064494;

//----- (10009F40) --------------------------------------------------------
int __cdecl sub_10009F40(int a1, int a2)
{
  int v2; // ecx

  return IDA_copy_file_(v2, a2, 0);
}
// 100643F4: invalid function type has been ignored
// 100643F4: using guessed type int (__fastcall *IDA_copy_file_)(_DWORD, _DWORD, _DWORD);

//----- (10009F70) --------------------------------------------------------
int sub_10009F70()
{
  int result; // eax

  if ( IDA_map_save_file_ )
    result = IDA_map_save_file_(0);
  else
    result = 0;
  return result;
}
// 100643F0: invalid function type has been ignored
// 100643F0: using guessed type int (__cdecl *IDA_map_save_file_)(_DWORD);

//----- (1000A310) --------------------------------------------------------
int __cdecl sub_1000A310(int a1, int a2, int a3)
{
  int v3; // ecx
  int v4; // eax
  int v5; // esi
  int v6; // edx
  int v7; // ecx
  bool v8; // zf
  bool v9; // sf

  v3 = a1;
  v4 = a1 / *(_DWORD *)IDA__grid_width;
  v5 = a1 % *(_DWORD *)IDA__grid_width;
  v6 = a1;
  if ( a3 <= 0 )
    return v3;
  while ( 1 )
  {
    v7 = 3 * a2 + (v5 & 1);
    v4 += dword_1003B078[v7];
    v5 += dword_1003B080[3 * a2];
    v6 += dword_1003B0C8[3 * a2] + dword_1003B0C0[v7];
    if ( v5 < 0 || v5 >= *(_DWORD *)IDA__grid_width || v4 < 0 || v4 >= *(_DWORD *)IDA__grid_length )
      break;
    v8 = a3 == 1;
    v9 = a3 - 1 < 0;
    a1 = v6;
    --a3;
    if ( v9 || v8 )
      return v6;
  }
  return a1;
}
// 1003B078: using guessed type int dword_1003B078[];
// 1003B0C0: using guessed type int dword_1003B0C0[];
// 1003B0C8: using guessed type int dword_1003B0C8[];
// 1003D0F4: using guessed type int IDA__grid_width;
// 10064260: using guessed type int IDA__grid_length;

//----- (1000A430) --------------------------------------------------------
int __cdecl sub_1000A430(int a1, int a2)
{
  int result; // eax
  int v3; // edx
  int v4; // ecx
  int v5; // esi
  __int64 v6; // rax
  int v7; // edi

  if ( a1 == -1 )
    return 9999;
  if ( a2 == -1 )
    return 9999;
  v3 = a1 % *(_DWORD *)IDA__grid_width;
  v4 = a1 / *(_DWORD *)IDA__grid_width + (v3 >> 1);
  v5 = a2 / *(_DWORD *)IDA__grid_width + (a2 % *(_DWORD *)IDA__grid_width >> 1);
  v6 = v4 + 2 * (a2 % *(_DWORD *)IDA__grid_width - v3) - v5;
  v7 = (HIDWORD(v6) ^ v6) - HIDWORD(v6);
  result = abs(v5 - v4);
  if ( result < v7 )
    result = (v7 + result) >> 1;
  return result;
}
// 1003D0F4: using guessed type int IDA__grid_width;

//----- (1000A4D0) --------------------------------------------------------
int __cdecl sub_1000A4D0(int *a1, _DWORD *a2)
{
  int result; // eax
  int v3; // ecx

  result = *a2 / 24;
  v3 = (*a1 >> 5) + result - 100;
  *a1 = v3;
  *a2 = 2 * result - (v3 >> 1);
  return result;
}

//----- (1000A650) --------------------------------------------------------
int __cdecl sub_1000A650(_DWORD *a1, _DWORD *a2)
{
  int v2; // eax
  int v3; // ecx
  int v4; // eax
  int result; // eax
  __int64 v6; // rtt

  v2 = sub_1000EF10(*(void **)IDA__display_win);
  v3 = *(_DWORD *)(v2 + 24) >> 1;
  *a1 = v3;
  dword_1006447C = v3 & 0x1F;
  *a1 -= v3 & 0x1F;
  v4 = *(_DWORD *)(v2 + 28) >> 1;
  *a2 = v4;
  v6 = v4;
  result = v4 / 24;
  dword_10064480 = v6 % 24;
  *a2 -= dword_10064480;
  return result;
}
// 1006447C: using guessed type int dword_1006447C;
// 10064480: using guessed type int dword_10064480;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000A6A0) --------------------------------------------------------
int __cdecl sub_1000A6A0(int *a1, int a2, int a3)
{
  int *v3; // esi
  int v4; // eax
  int v5; // ebx
  int v6; // edi
  int v7; // ecx
  int v8; // eax
  int v9; // edi
  int v10; // ecx
  int v11; // ecx
  int v12; // edi
  int v13; // kr04_4
  int v14; // eax
  int v15; // edx
  int v16; // ecx
  int v17; // edi
  int v18; // ebx
  int v19; // edi
  int v20; // kr0C_4
  int v21; // ecx
  int v22; // edx
  int v23; // edx
  int v24; // edi
  int v25; // ebx
  int v26; // ecx
  bool v27; // sf
  unsigned __int8 v28; // of
  int v29; // eax
  int v30; // eax
  int result; // eax

  v3 = a1;
  a1[2] = 16
        * (2 * (a1[10] % *(_DWORD *)IDA__grid_width)
         + 200
         - ((a1[10] / *(_DWORD *)IDA__grid_width + (a1[10] % *(_DWORD *)IDA__grid_width >> 1)) & 0xFFFFFFFE));
  v3[4] = 16
        * (2 * (v3[12] % *(_DWORD *)IDA__grid_width)
         + 200
         - ((v3[12] / *(_DWORD *)IDA__grid_width + (v3[12] % *(_DWORD *)IDA__grid_width >> 1)) & 0xFFFFFFFE));
  v3[3] = 12 * ((v3[11] / *(_DWORD *)IDA__grid_width + (v3[11] % *(_DWORD *)IDA__grid_width >> 1)) & 0xFFFFFFFE);
  v3[5] = 12 * ((v3[13] / *(_DWORD *)IDA__grid_width + (v3[13] % *(_DWORD *)IDA__grid_width >> 1)) & 0xFFFFFFFE);
  v4 = sub_1000EF10(*(void **)IDA__display_win);
  v3[6] = v3[2];
  v3[8] = v3[4];
  v5 = a1[6];
  v3[7] = v3[3];
  v3[9] = v3[5];
  v6 = a1[8];
  v7 = *(_DWORD *)(v4 + 24) / 2 - 1;
  v8 = *(_DWORD *)(v4 + 28) / 2 - 1;
  a1[6] = v5 - v7;
  v9 = v6 - v7;
  v10 = v8 + a1[9];
  v3[7] += v8;
  a1[8] = v9;
  a1[9] = v10;
  v11 = a1[2];
  v12 = a1[4];
  v13 = a1[2] - v12;
  v14 = v13 / 2;
  v15 = v13 / 2;
  if ( v13 / 2 & 0x1F )
  {
    v14 &= 0xFFFFFFE0;
    v15 = v14 + 32;
  }
  if ( v14 < a2 )
  {
    v16 = v11 - v14;
    v17 = v15 + v12;
  }
  else
  {
    v16 = v11 - a2;
    v17 = a2 + v12;
  }
  v18 = a1[3];
  a1[4] = v17;
  v19 = a1[5];
  v20 = a1[5] - v18;
  a1[2] = v16;
  v21 = v20 / 2;
  v22 = v20 / 2 % 24;
  if ( v22 )
  {
    v21 -= v22;
    v23 = v21 + 24;
  }
  else
  {
    v23 = v20 / 2;
  }
  if ( v21 < a3 )
  {
    v25 = v23 + v18;
    v24 = v19 - v21;
  }
  else
  {
    v24 = v19 - a3;
    v25 = a3 + v18;
  }
  v26 = a1[4];
  v28 = __OFSUB__(a1[2], v26);
  v27 = a1[2] - v26 < 0;
  a1[3] = v25;
  a1[5] = v24;
  if ( v27 ^ v28 )
    a1[2] = v26;
  v29 = a1[3];
  if ( a1[5] < v29 )
    a1[5] = v29;
  if ( a1[2] - v26 == 32 )
    a1[2] = v26;
  if ( a1[5] - v29 == 24 )
    a1[5] = v29;
  v30 = v26 + (a1[2] - v26) / 2;
  if ( v30 & 0x1F )
    v30 &= 0xFFFFFFE0;
  *a1 = v30;
  result = (a1[3] + (a1[5] - a1[3]) / 2) / 24;
  a1[1] = a1[3] + (a1[5] - a1[3]) / 2 - (a1[3] + (a1[5] - a1[3]) / 2) % 24;
  return result;
}
// 1003D0F4: using guessed type int IDA__grid_width;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000A880) --------------------------------------------------------
signed int sub_1000A880()
{
  int v0; // eax
  int v1; // edi
  int v2; // edi
  _DWORD *v3; // esi
  int v4; // ebp
  signed int result; // eax

  v0 = sub_1000EF10(*(void **)IDA__display_win);
  v1 = *(_DWORD *)(v0 + 24) >> 1;
  dword_1006447C = v1 & 0x1F;
  v2 = v1 - dword_1006447C;
  v3 = &unk_100642A8;
  v4 = (*(_DWORD *)(v0 + 28) >> 1) - (*(_DWORD *)(v0 + 28) >> 1) % 24;
  dword_10064480 = (*(_DWORD *)(v0 + 28) >> 1) % 24;
  do
  {
    *(v3 - 2) = 199;
    *v3 = 39800;
    *(v3 - 1) = 0;
    v3[1] = 39999;
    v3[8] = 0;
    sub_1000A6A0(v3 - 12, v2, v4);
    v3[2] = 99;
    v3[3] = 0;
    v3[4] = 0;
    v3[5] = 99;
    v3[6] = 0;
    v3[8] = 0;
    v3 += 21;
  }
  while ( (signed int)v3 < (signed int)&IDA_game_handle_input_ );
  byte_10064470 = 1;
  byte_10064484 = 0;
  dword_1003D130 = 199;
  dword_1003D138 = 39800;
  dword_1003D134 = 0;
  dword_1003D13C = 39999;
  dword_1003D158 = 0;
  dword_1003D154 = 0;
  sub_1000A6A0((int *)&unk_1003D108, v2, v4);
  result = 99;
  dword_1003D144 = 0;
  dword_1003D148 = 0;
  dword_1003D150 = 0;
  dword_1003D140 = 99;
  dword_1003D14C = 99;
  return result;
}
// 1003D130: using guessed type int dword_1003D130;
// 1003D134: using guessed type int dword_1003D134;
// 1003D138: using guessed type int dword_1003D138;
// 1003D13C: using guessed type int dword_1003D13C;
// 1003D140: using guessed type int dword_1003D140;
// 1003D144: using guessed type int dword_1003D144;
// 1003D148: using guessed type int dword_1003D148;
// 1003D14C: using guessed type int dword_1003D14C;
// 1003D150: using guessed type int dword_1003D150;
// 1003D154: using guessed type int dword_1003D154;
// 1003D158: using guessed type int dword_1003D158;
// 100643A4: using guessed type int IDA_game_handle_input_;
// 10064470: using guessed type char byte_10064470;
// 1006447C: using guessed type int dword_1006447C;
// 10064480: using guessed type int dword_10064480;
// 10064484: using guessed type char byte_10064484;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000A980) --------------------------------------------------------
void __cdecl sub_1000A980(void *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // esi

  if ( *((_DWORD *)a1 + 20) )
  {
    v1 = a1;
    if ( *((_DWORD *)a1 + 20) )
    {
      do
      {
        v2 = (_DWORD *)v1[20];
        j__free(v1);
        v1 = v2;
      }
      while ( v2[20] );
    }
    j__free(v1);
    *((_DWORD *)a1 + 20) = 0;
  }
}

//----- (1000A9C0) --------------------------------------------------------
char __cdecl sub_1000A9C0(int a1)
{
  char *v1; // eax
  int v2; // eax
  int v3; // edi
  signed int v5; // ebp
  int *v6; // esi
  void *v7; // ecx
  _DWORD *v8; // eax
  int v9; // [esp+8h] [ebp-34h]
  int v10; // [esp+Ch] [ebp-30h]
  int v11; // [esp+10h] [ebp-2Ch]
  int v12; // [esp+14h] [ebp-28h]
  int v13; // [esp+18h] [ebp-24h]
  char v14; // [esp+1Ch] [ebp-20h]

  sprintf(&v14, "maps\\%s", a1);
  v1 = strchr(&v14, 46);
  *(_DWORD *)v1 = 1734632750;
  v1[4] = 0;
  v2 = sub_10009AF0((int)&v14, (int)"rb");
  v3 = v2;
  if ( !v2 )
    return 0;
  v10 = 0;
  sub_10009BA0(v2, (int)&v10);
  if ( v10 != 1162102597 )
    return 0;
  v11 = 0;
  sub_10009BA0(v3, (int)&v11);
  if ( v11 == 1 )
  {
    byte_10064484 = 0;
  }
  else
  {
    if ( v11 != 2 )
      return 0;
    byte_10064484 = 1;
  }
  v9 = 0;
  v13 = 0;
  v12 = 0;
  sub_1000A650(&v13, &v12);
  sub_10009BA0(v3, (int)&v9);
  if ( v9 )
    return 0;
  v5 = 0;
  do
  {
    v6 = (int *)((char *)&unk_10064278 + 84 * v5);
    sub_1000A980((char *)&unk_10064278 + 84 * v5);
    if ( byte_10064484 )
    {
      if ( sub_10009BE0(v3, (int)(v6 + 14)) || sub_10009BA0(v3, (int)(v6 + 18)) )
        return 0;
    }
    else
    {
      v6[14] = 99;
      v6[15] = 0;
      v6[16] = 0;
      v6[17] = 99;
      v6[18] = 0;
    }
    if ( v9 == v5 )
    {
      while ( !sub_10009BE0(v3, (int)(v6 + 10)) )
      {
        sub_1000A6A0(v6, v13, v12);
        if ( sub_10009BA0(v3, (int)&v9) )
        {
          if ( v5 != 2 )
            return 0;
          v9 = -1;
          goto LABEL_23;
        }
        if ( v9 == v5 )
        {
          v8 = operator new(0x54u);
          v6[20] = (int)v8;
          sub_10001000(v8 + 14, v6 + 14);
          v6 = (int *)v6[20];
          v6[20] = 0;
          if ( v9 == v5 )
            continue;
        }
        goto LABEL_23;
      }
      return 0;
    }
LABEL_23:
    ++v5;
  }
  while ( v5 < 3 );
  sub_10009B20(v7);
  return 1;
}
// 10064484: using guessed type char byte_10064484;

//----- (1000ABA0) --------------------------------------------------------
char __cdecl sub_1000ABA0(int a1, int a2)
{
  unsigned int v2; // ebx
  char *v4; // esi
  char *v5; // eax
  char *v6; // edi
  char *v7; // eax
  int v8; // esi
  void *v9; // ecx
  int v10; // edi
  void *v11; // ecx
  void *v12; // ecx
  void *v13; // ecx
  void *v14; // ecx
  int v15; // [esp+4h] [ebp-8h]
  unsigned int v16; // [esp+8h] [ebp-4h]

  v2 = 0;
  if ( !FOWEnable )
    return 0;
  v4 = (char *)operator new(0x100u);
  sprintf(v4, "%s", a1);
  v5 = strchr(v4, 46);
  *(_DWORD *)v5 = 1735353902;
  v5[4] = 0;
  v6 = (char *)operator new(0x100u);
  sprintf(v6, "%s", a2);
  v7 = strchr(v6, 46);
  *(_DWORD *)v7 = 1735353902;
  v7[4] = 0;
  v8 = sub_10009AF0((int)v4, (int)"rb");
  if ( !v8 )
    return 0;
  v10 = sub_10009AF0((int)v6, (int)"wb");
  if ( !v10 )
  {
    sub_10009B20(v9);
    return 0;
  }
  v15 = 0;
  v16 = 0;
  sub_10009BA0(v8, (int)&v15);
  if ( v15 != 1179600719 )
    goto LABEL_10;
  sub_100099E0(v10, 1179600719);
  sub_10009BA0(v8, (int)&v15);
  if ( v15 != 1180123474 || (sub_100099E0(v10, 1180123474), sub_10009BA0(v8, (int)&v15), v15 != 1) )
  {
    sub_10009B20(v11);
    sub_10009B20(v14);
    return 0;
  }
  sub_100099E0(v10, 1);
LABEL_10:
  sub_10009BA0(v8, (int)&v15);
  sub_100099E0(v10, v15);
  sub_10009BA0(v8, (int)&v16);
  sub_100099E0(v10, v16);
  if ( v16 > 0 )
  {
    do
    {
      sub_10009BA0(v8, (int)&v15);
      sub_100099E0(v10, v15);
      ++v2;
    }
    while ( v2 < v16 );
  }
  sub_10009B20(v12);
  sub_10009B20(v13);
  return 1;
}
// 100643F8: using guessed type int FOWEnable;

//----- (1000AD70) --------------------------------------------------------
int __cdecl sub_1000AD70(int a1)
{
  int result; // eax

  if ( FOWEnable )
    result = sub_10009A00(a1, (int)"fog");
  else
    result = 0;
  return result;
}
// 100643F8: using guessed type int FOWEnable;

//----- (1000AD90) --------------------------------------------------------
char __cdecl sub_1000AD90(int a1)
{
  char *v2; // eax
  void *v3; // ecx
  int v4; // esi
  _DWORD *v5; // eax
  unsigned int v6; // edi
  char v7; // [esp+0h] [ebp-100h]

  if ( !FOWEnable )
    return 0;
  sprintf(&v7, "%s", a1);
  v2 = strchr(&v7, 46);
  *(_DWORD *)v2 = 1735353902;
  v2[4] = 0;
  v4 = sub_10009AF0((int)&v7, (int)"wb");
  if ( !v4 )
    return 0;
  if ( dword_100643FC )
  {
    sub_100099E0(v4, 1179600719);
    sub_100099E0(v4, 1180123474);
    sub_100099E0(v4, 1);
    sub_100099E0(v4, *(_DWORD *)dword_100643FC);
    sub_100099E0(v4, *((_DWORD *)dword_100643FC + 2));
    v5 = dword_100643FC;
    v3 = (void *)*((_DWORD *)dword_100643FC + 2);
    v6 = 0;
    if ( v3 )
    {
      do
      {
        sub_100099E0(v4, *(_DWORD *)(v5[1] + 4 * v6));
        v5 = dword_100643FC;
        v3 = (void *)*((_DWORD *)dword_100643FC + 2);
        ++v6;
      }
      while ( v6 < (unsigned int)v3 );
    }
  }
  sub_10009B20(v3);
  return 1;
}
// 100643F8: using guessed type int FOWEnable;

//----- (1000AE90) --------------------------------------------------------
char __cdecl sub_1000AE90(int a1)
{
  char result; // al

  byte_10064400 = 0;
  result = sub_1000A9C0(a1);
  if ( !result )
    result = sub_1000A880();
  return result;
}
// 10064400: using guessed type char byte_10064400;

//----- (1000AF50) --------------------------------------------------------
signed int __cdecl sub_1000AF50(int a1)
{
  unsigned int v1; // ecx
  int v2; // eax
  int v3; // esi
  int v4; // ebx
  int v5; // ebp
  int v6; // edx
  int v7; // edi
  signed int result; // eax

  v1 = (a1 / *(_DWORD *)IDA__grid_width + (a1 % *(_DWORD *)IDA__grid_width >> 1)) & 0xFFFFFFFE;
  v2 = 16 * (2 * (a1 % *(_DWORD *)IDA__grid_width) + 200 - v1);
  v3 = 12 * v1;
  if ( v2 > *(_DWORD *)(dword_10064374 + 8)
    || v2 < *(_DWORD *)(dword_10064374 + 16)
    || v3 > *(_DWORD *)(dword_10064374 + 20)
    || v3 < *(_DWORD *)(dword_10064374 + 12) )
  {
    return 0;
  }
  v4 = dword_10064474;
  v5 = dword_10064478;
  v6 = 0;
  v7 = 0;
  dword_10064474 = 0;
  dword_10064478 = 0;
  if ( v2 == *(_DWORD *)(dword_10064374 + 8) )
  {
    v6 = -dword_1006447C;
  }
  else
  {
    if ( v2 != *(_DWORD *)(dword_10064374 + 16) )
      goto LABEL_10;
    v6 = dword_1006447C;
  }
  dword_10064474 = v6;
LABEL_10:
  if ( v3 == *(_DWORD *)(dword_10064374 + 12) )
  {
    v7 = -dword_10064480;
LABEL_14:
    dword_10064478 = v7;
    goto LABEL_15;
  }
  if ( v3 == *(_DWORD *)(dword_10064374 + 20) )
  {
    v7 = dword_10064480;
    goto LABEL_14;
  }
LABEL_15:
  if ( v4 != v6 || v5 != v7 )
    result = 1;
  else
    result = -1;
  return result;
}
// 1003D0F4: using guessed type int IDA__grid_width;
// 10064374: using guessed type int dword_10064374;
// 10064474: using guessed type int dword_10064474;
// 10064478: using guessed type int dword_10064478;
// 1006447C: using guessed type int dword_1006447C;
// 10064480: using guessed type int dword_10064480;

//----- (1000B020) --------------------------------------------------------
int __cdecl sub_1000B020(int a1, int a2)
{
  int v2; // eax
  int v3; // edx
  int *v4; // esi
  unsigned int v5; // ecx
  int v6; // ST00_4
  int v7; // ebx
  int v8; // ebp
  int v9; // edi
  int v10; // eax
  int *v11; // ecx
  int v12; // edx
  int v13; // eax
  int v14; // eax
  int v15; // eax
  int v16; // eax
  int result; // eax
  int v18; // ecx
  int v19; // [esp+4h] [ebp+4h]

  if ( !byte_10064470 )
    sub_1000A880();
  v2 = a1 / *(_DWORD *)IDA__grid_width;
  v3 = a1 % *(_DWORD *)IDA__grid_width;
  v4 = (int *)((char *)&unk_10064278 + 84 * a2);
  dword_10064374 = (int)&unk_10064278 + 84 * a2;
  v5 = (v2 + (v3 >> 1)) & 0xFFFFFFFE;
  v6 = *(_DWORD *)IDA__display_win;
  v19 = 12 * v5;
  v7 = 16 * (2 * v3 + 200 - v5);
  v8 = sub_1000EF10((void *)IDA__display_win);
  memset(*(void **)(v8 + 44), 0, *(_DWORD *)(v8 + 28) * *(_DWORD *)(v8 + 24));
  if ( v4[20] )
  {
    v9 = *(_DWORD *)(v8 + 24) / 2 - 1;
    v10 = *(_DWORD *)(v8 + 28) / 2 + 1;
    v11 = (int *)((char *)&unk_10064278 + 84 * a2);
    while ( 1 )
    {
      if ( v7 >= v9 + v11[6] || v7 <= v9 + v11[8] )
      {
        v12 = v19;
      }
      else
      {
        v12 = v19;
        if ( v19 > v11[7] - v10 && v19 < v11[9] - v10 )
        {
          v4 = v11;
          dword_10064374 = (int)v11;
          goto LABEL_14;
        }
      }
      v11 = (int *)v11[20];
      if ( !v11 )
        goto LABEL_14;
    }
  }
  v12 = v19;
LABEL_14:
  v13 = v4[2];
  if ( v7 <= v13 )
  {
    v14 = v4[4];
    if ( v7 >= v14 )
      *v4 = v7;
    else
      *v4 = v14;
  }
  else
  {
    *v4 = v13;
  }
  v15 = v4[5];
  if ( v12 <= v15 )
  {
    v16 = v4[3];
    if ( v12 >= v16 )
      v4[1] = v12;
    else
      v4[1] = v16;
  }
  else
  {
    v4[1] = v15;
  }
  result = (*v4 >> 5)
         + v4[1] / 24
         - 100
         + *(_DWORD *)IDA__grid_width * (2 * (v4[1] / 24) - (((*v4 >> 5) + v4[1] / 24 - 100) >> 1));
  dword_10064474 = 0;
  dword_10064478 = 0;
  if ( *v4 == v4[2] )
  {
    dword_10064474 = -dword_1006447C;
  }
  else if ( *v4 == v4[4] )
  {
    dword_10064474 = dword_1006447C;
  }
  v18 = v4[1];
  if ( v18 == v4[3] )
  {
    dword_10064478 = -dword_10064480;
  }
  else if ( v18 == v4[5] )
  {
    dword_10064478 = dword_10064480;
  }
  return result;
}
// 1003D0F4: using guessed type int IDA__grid_width;
// 10064374: using guessed type int dword_10064374;
// 10064470: using guessed type char byte_10064470;
// 10064474: using guessed type int dword_10064474;
// 10064478: using guessed type int dword_10064478;
// 1006447C: using guessed type int dword_1006447C;
// 10064480: using guessed type int dword_10064480;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000B1D0) --------------------------------------------------------
char *__cdecl sub_1000B1D0(int a1, unsigned int a2, char *a3, int a4, char *a5)
{
  void *v5; // ecx
  int v6; // ST18_4
  int v7; // eax
  int v8; // esi
  int v9; // ecx
  int v10; // edi
  int *v11; // ebp
  int v12; // eax
  int v13; // edx
  int v14; // esi
  int v15; // ebx
  int v16; // eax
  int v17; // ST0C_4
  unsigned int v18; // esi
  int v19; // esi
  int v20; // ebx
  int v22; // [esp+10h] [ebp-Ch]
  int *v23; // [esp+14h] [ebp-8h]
  int v24; // [esp+18h] [ebp-4h]

  v23 = (int *)sub_1000EF10(*(void **)IDA__display_win);
  v6 = *(_DWORD *)IDA__dialogueBackWindow;
  v7 = sub_1000EF10(v5);
  v8 = *(_DWORD *)IDA__grid_width;
  v24 = v7;
  v9 = *(_DWORD *)IDA__tile_center_tile % v8;
  v10 = *(_DWORD *)IDA__tile_center_tile / v8 + (v9 >> 1);
  v11 = *(int **)IDA__dialog_target;
  v12 = *(_DWORD *)(*(_DWORD *)IDA__dialog_target + 4) / v8;
  v13 = *(_DWORD *)(*(_DWORD *)IDA__dialog_target + 4) % v8;
  v22 = 0;
  v14 = v12 + (v13 >> 1);
  v15 = 16 * (v14 + 2 * (v9 - v13) - v10);
  v16 = sub_10005CD0(v11[8], (int)&v22);
  v17 = v11[7];
  v18 = 12 * (v14 - v10) - ((unsigned int)sub_10005D10(v16, v11[6]) >> 1);
  sub_10005C90();
  v19 = ((v23[7] - (signed int)a3) >> 1) + v18;
  if ( v19 >= 0 )
  {
    if ( v19 > v23[7] - (signed int)a3 )
      v19 = v23[7] - (_DWORD)a3;
  }
  else
  {
    v19 = 0;
  }
  v20 = ((signed int)(v23[6] - a2) >> 1) + v15;
  if ( v20 >= 0 )
  {
    if ( v20 > (signed int)(v23[6] - a2) )
      v20 = v23[6] - a2;
  }
  else
  {
    v20 = 0;
  }
  return sub_1001D1B0((char *)(v20 + v23[11] + v19 * v23[6]), a2, a3, v23[6], a5, *(_DWORD *)(v24 + 24));
}
// 1003D0E8: using guessed type int IDA__tile_center_tile;
// 1003D0F4: using guessed type int IDA__grid_width;
// 10064468: using guessed type int IDA__dialog_target;
// 100645B8: using guessed type int IDA__dialogueBackWindow;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000B2E0) --------------------------------------------------------
signed int __cdecl sub_1000B2E0(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v4; // ecx
  int v5; // ecx
  int v6; // ecx
  int v7; // eax

  sub_10001000(a3, a1);
  if ( *a1 > a2[2] )
    return -1;
  v4 = *a2;
  if ( *a2 > a1[2] )
    return -1;
  if ( a2[3] < a1[1] || a2[1] > a1[3] )
    return -1;
  if ( v4 > *a1 )
    *a3 = v4;
  v5 = a2[2];
  if ( v5 < a1[2] )
    a3[2] = v5;
  v6 = a2[1];
  if ( v6 > a1[1] )
    a3[1] = v6;
  v7 = a2[3];
  if ( v7 < a1[3] )
    a3[3] = v7;
  return 0;
}

//----- (1000B360) --------------------------------------------------------
char __cdecl sub_1000B360(_DWORD *a1)
{
  int v1; // edi
  int v2; // ST04_4
  unsigned int v3; // esi
  int v4; // eax
  int v5; // ecx
  int v6; // eax
  int v7; // ebx
  int v8; // edi
  int v9; // esi
  int v10; // ebp
  int v11; // ecx
  int v12; // ecx
  int v13; // eax
  int v14; // esi
  int v15; // edi
  char result; // al
  int v17; // [esp+10h] [ebp-Ch]
  int v18; // [esp+14h] [ebp-8h]
  int v19; // [esp+18h] [ebp-4h]

  v1 = *(_DWORD *)IDA__tile_center_tile % *(_DWORD *)IDA__grid_width;
  v2 = *(_DWORD *)IDA__display_win;
  v3 = (*(_DWORD *)IDA__tile_center_tile / *(_DWORD *)IDA__grid_width + (v1 >> 1)) & 0xFFFFFFFE;
  v4 = sub_1000EF10(*(void **)IDA__grid_width);
  v5 = (*(_DWORD *)(v4 + 24) >> 1) + 16 * (2 * v1 + 200 - v3);
  v6 = 12 * v3 - (*(_DWORD *)(v4 + 28) >> 1);
  v7 = v6 + a1[3];
  v8 = v5 - *a1;
  v9 = v6 + a1[1];
  v10 = v5 - a1[2];
  v11 = *(_DWORD *)IDA__grid_width;
  v18 = *(_DWORD *)IDA__grid_length;
  v19 = v11;
  v12 = (v8 >> 5) + v9 / 24 - 100;
  v13 = 2 * (v9 / 24) - (v12 >> 1);
  if ( v12 < 0 )
    goto LABEL_21;
  if ( v12 >= v19 )
    goto LABEL_21;
  if ( v13 < 0 )
    goto LABEL_21;
  if ( v13 >= v18 )
    goto LABEL_21;
  a1 = (_DWORD *)v10;
  v17 = v9;
  sub_1000A4D0((int *)&a1, &v17);
  if ( (signed int)a1 < 0 )
    goto LABEL_21;
  v14 = v19;
  if ( (signed int)a1 >= v19
    || v17 < 0
    || v17 >= v18
    || (a1 = (_DWORD *)v8, v17 = v7, sub_1000A4D0((int *)&a1, &v17), (signed int)a1 < 0)
    || (signed int)a1 >= v14
    || v17 < 0
    || (v15 = v18, v17 >= v18)
    || (a1 = (_DWORD *)v10, v17 = v7, sub_1000A4D0((int *)&a1, &v17), (signed int)a1 < 0)
    || (signed int)a1 >= v14
    || v17 < 0
    || v17 >= v15 )
  {
LABEL_21:
    result = 1;
  }
  else
  {
    result = 0;
  }
  return result;
}
// 1003D0E8: using guessed type int IDA__tile_center_tile;
// 1003D0F4: using guessed type int IDA__grid_width;
// 10064260: using guessed type int IDA__grid_length;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000B4F0) --------------------------------------------------------
signed int __cdecl sub_1000B4F0(_DWORD *a1, int *a2, _DWORD *a3)
{
  _DWORD *v3; // edi
  signed int result; // eax
  int v5; // edx
  unsigned int v6; // ecx
  int v7; // eax
  int v8; // ecx
  int v9; // eax
  int v10; // ecx
  char *v11; // edx
  unsigned int v12; // esi
  int v13; // [esp+0h] [ebp-4h]

  v3 = a3;
  result = sub_1000B2E0(a1, a2, a3);
  if ( result != -1 )
  {
    v5 = *(_DWORD *)IDA__tile_center_tile % *(_DWORD *)IDA__grid_width;
    v6 = (*(_DWORD *)IDA__tile_center_tile / *(_DWORD *)IDA__grid_width + (v5 >> 1)) & 0xFFFFFFFE;
    v7 = dword_10064474 + 16 * (2 * v5 + 200 - v6);
    dword_10064264 = v7 - *(_DWORD *)(dword_10064374 + 24);
    v8 = 12 * v6 - dword_10064478;
    dword_10064268 = *(_DWORD *)(dword_10064374 + 28) - v8;
    dword_1006426C = v7 - *(_DWORD *)(dword_10064374 + 32);
    dword_10064270 = *(_DWORD *)(dword_10064374 + 36) - v8;
    if ( edge_clipping_on )
    {
      if ( sub_1000B360(a3) )
      {
        v9 = sub_1000EF10(*(void **)IDA__display_win);
        v10 = a3[1];
        v11 = (char *)(*a3 + *(_DWORD *)(v9 + 44) + v10 * *(_DWORD *)(v9 + 24));
        v12 = a3[2] - *a3 + 1;
        if ( a3[3] - v10 + 1 > 0 )
        {
          v13 = a3[3] - v10 + 1;
          do
          {
            memset(v11, 0, v12);
            v11 += *(_DWORD *)(v9 + 24);
            --v13;
          }
          while ( v13 );
          v3 = a3;
        }
      }
      result = sub_1000B2E0(v3, &dword_10064264, v3);
    }
    else
    {
      result = 0;
    }
  }
  return result;
}
// 1003D0E8: using guessed type int IDA__tile_center_tile;
// 1003D0F4: using guessed type int IDA__grid_width;
// 10064264: using guessed type int dword_10064264;
// 10064268: using guessed type int dword_10064268;
// 1006426C: using guessed type int dword_1006426C;
// 10064270: using guessed type int dword_10064270;
// 10064374: using guessed type int dword_10064374;
// 10064474: using guessed type int dword_10064474;
// 10064478: using guessed type int dword_10064478;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000B620) --------------------------------------------------------
int __cdecl sub_1000B620(int a1, int a2, int a3, int *a4, int *a5)
{
  int v5; // edi
  int v6; // esi
  int v7; // edx
  int v8; // eax
  int v9; // edi
  int v10; // eax
  int v11; // eax
  int result; // eax

  v5 = a1 - *(_DWORD *)IDA__square_offx;
  v6 = a2 - *(_DWORD *)IDA__square_offy - 12;
  v7 = 3 * v5 - 4 * v6;
  *a4 = v7;
  if ( v7 >= 0 )
    v8 = v7 / 192;
  else
    v8 = (v7 + 1) / 192 - 1;
  *a4 = v8;
  v9 = 4 * v6 + v5;
  *a5 = v9;
  if ( v9 >= 0 )
    v10 = (v9 - (__CFSHL__(v9 >> 31, 7) + (v9 >> 31 << 7))) >> 7;
  else
    v10 = ((v9 + 1 - (__CFSHL__((v9 + 1) >> 31, 7) + ((v9 + 1) >> 31 << 7))) >> 7) - 1;
  *a5 = v10;
  *a4 += *(_DWORD *)IDA__square_x;
  v11 = *(_DWORD *)IDA__square_width;
  *a5 += *(_DWORD *)IDA__square_y;
  result = v11 - 1 - *a4;
  *a4 = result;
  return result;
}
// 1003D0E0: using guessed type int IDA__square_offx;
// 1003D0F0: using guessed type int IDA__square_x;
// 1003D0FC: using guessed type int IDA__square_y;
// 1003D100: using guessed type int IDA__square_offy;
// 10064408: using guessed type int IDA__square_width;

//----- (1000B6F0) --------------------------------------------------------
signed int __cdecl sub_1000B6F0(int a1, _DWORD *a2, _DWORD *a3)
{
  signed int result; // eax
  int v4; // ecx
  int v5; // edx
  int v6; // ebx
  int v7; // ecx
  int v8; // edx

  if ( a1 < 0 || a1 >= *(_DWORD *)IDA__square_size )
    return -1;
  v4 = *(_DWORD *)IDA__square_width - 1 - a1 % *(_DWORD *)IDA__square_width;
  v5 = a1 / *(_DWORD *)IDA__square_width;
  v6 = *(_DWORD *)IDA__square_x;
  *a2 = *(_DWORD *)IDA__square_offx;
  v7 = v4 - v6;
  *a3 = *(_DWORD *)IDA__square_offy;
  *a2 += 48 * v7;
  v8 = v5 - *(_DWORD *)IDA__square_y;
  *a3 -= 12 * v7;
  *a2 += 32 * v8;
  result = 0;
  *a3 += 24 * v8;
  return result;
}
// 1003D0E0: using guessed type int IDA__square_offx;
// 1003D0F0: using guessed type int IDA__square_x;
// 1003D0F8: using guessed type int IDA__square_size;
// 1003D0FC: using guessed type int IDA__square_y;
// 1003D100: using guessed type int IDA__square_offy;
// 10064408: using guessed type int IDA__square_width;

//----- (1000B7E0) --------------------------------------------------------
int __cdecl sub_1000B7E0(int a1, int a2, int a3)
{
  int result; // eax

  if ( byte_10064484
    && (a1 > *(_DWORD *)(dword_10064374 + 56)
     || a1 < *(_DWORD *)(dword_10064374 + 64)
     || a2 > *(_DWORD *)(dword_10064374 + 68)
     || a2 < *(_DWORD *)(dword_10064374 + 60)) )
  {
    result = sub_10005C60(4, 1, 0, 0, 0);
  }
  else
  {
    result = sub_10005C60(4, a3, 0, 0, 0);
  }
  return result;
}
// 10064374: using guessed type int dword_10064374;
// 10064484: using guessed type char byte_10064484;

//----- (1000B840) --------------------------------------------------------
int __cdecl sub_1000B840(int a1, int a2, int a3)
{
  int result; // eax

  if ( a2 < 0
    || a2 >= *(_DWORD *)IDA__square_length
    || a1 < 0
    || a1 >= *(_DWORD *)IDA__square_width
    || byte_10064484
    && (a1 > *(_DWORD *)(dword_10064374 + 56) + 2
     || a1 < *(_DWORD *)(dword_10064374 + 64) + 2
     || a2 > *(_DWORD *)(dword_10064374 + 68) + 3
     || a2 < *(_DWORD *)(dword_10064374 + 60) + 3) )
  {
    result = -1;
  }
  else
  {
    result = sub_10005C60(4, a3, 0, 0, 0);
  }
  return result;
}
// 10064374: using guessed type int dword_10064374;
// 10064404: using guessed type int IDA__square_length;
// 10064408: using guessed type int IDA__square_width;
// 10064484: using guessed type char byte_10064484;

//----- (1000B8C0) --------------------------------------------------------
char __cdecl sub_1000B8C0(int a1)
{
  _DWORD *v1; // ebx
  _DWORD *v2; // edi
  unsigned int v3; // esi
  int v4; // esi
  int v5; // eax
  int v6; // ecx
  int v7; // ecx

  if ( a1 < 0 || a1 >= *(_DWORD *)IDA__grid_size )
    return 1;
  v1 = *(_DWORD **)(IDA__objectTable + 4 * a1);
  v2 = dword_100643FC;
  if ( dword_100643FC )
  {
    v3 = *(_DWORD *)IDA__grid_size * *(_DWORD *)IDA__map_elevation + a1;
    if ( !sub_10009E20(dword_100643FC, v3) )
      sub_10009DF0(v2, v3);
  }
  if ( v1 )
  {
    v4 = *(_DWORD *)IDA__map_elevation;
    do
    {
      v5 = *v1;
      v6 = *(_DWORD *)(*v1 + 40);
      if ( v6 > v4 )
        break;
      if ( v6 == v4 )
      {
        v7 = *(_BYTE *)(v5 + 35) & 0xF;
        if ( (v7 == 3 || v7 == 2) && !(*(_DWORD *)(v5 + 36) & 0xA0008000) )
          return 1;
      }
      v1 = (_DWORD *)v1[1];
    }
    while ( v1 );
  }
  return 0;
}
// 1003C8D8: using guessed type int IDA__map_elevation;
// 1003D0DC: using guessed type int IDA__grid_size;
// 10064414: using guessed type int IDA__objectTable;

//----- (1000B9A0) --------------------------------------------------------
char __cdecl sub_1000B9A0(int a1, int a2)
{
  int v2; // ebx
  int v3; // ecx
  int v4; // edi
  int v5; // esi
  int v6; // ebp
  int v7; // edi
  int v8; // eax
  int v10; // ebp
  char v11; // al
  int v12; // ecx
  int v13; // eax
  int v14; // eax
  int v15; // edx
  bool v16; // zf
  bool v17; // sf
  unsigned __int8 v18; // of
  int v19; // esi
  int v20; // edi
  int v21; // esi
  int v22; // esi
  int v23; // esi
  int v24; // edx
  int v25; // ecx
  bool v26; // zf
  bool v27; // sf
  unsigned __int8 v28; // of
  int v29; // esi
  int v30; // ebp
  int v31; // esi
  int v32; // esi
  int v33; // esi
  int v34; // [esp+10h] [ebp-14h]
  int v35; // [esp+14h] [ebp-10h]
  int v36; // [esp+14h] [ebp-10h]
  int v37; // [esp+14h] [ebp-10h]
  int v38; // [esp+18h] [ebp-Ch]
  int v39; // [esp+18h] [ebp-Ch]
  int v40; // [esp+18h] [ebp-Ch]
  int v41; // [esp+1Ch] [ebp-8h]
  int v42; // [esp+20h] [ebp-4h]
  int v43; // [esp+28h] [ebp+4h]
  char v44; // [esp+28h] [ebp+4h]
  char v45; // [esp+28h] [ebp+4h]
  char v46; // [esp+28h] [ebp+4h]
  char v47; // [esp+28h] [ebp+4h]
  char v48; // [esp+28h] [ebp+4h]
  char v49; // [esp+28h] [ebp+4h]
  char v50; // [esp+28h] [ebp+4h]
  char v51; // [esp+28h] [ebp+4h]

  v2 = a1;
  v3 = 0;
  v41 = 0;
  v38 = 0;
  if ( a2 >= 0 && a2 < *(_DWORD *)IDA__grid_size )
  {
    v3 = 0;
    v38 = a2 / *(_DWORD *)IDA__grid_width;
    v41 = a2 % *(_DWORD *)IDA__grid_width;
  }
  v42 = 0;
  v35 = 0;
  if ( a1 >= 0 && a1 < *(_DWORD *)IDA__grid_size )
  {
    v3 = a1 % *(_DWORD *)IDA__grid_width;
    v35 = a1 / *(_DWORD *)IDA__grid_width;
    v42 = a1 % *(_DWORD *)IDA__grid_width;
  }
  v4 = *(_DWORD *)IDA__grid_width;
  v34 = v4;
  v5 = a2 / v4 + (a2 % v4 >> 1);
  v6 = 2 * (a2 % *(_DWORD *)IDA__grid_width) - v5;
  v7 = a1 / v4 + (a1 % v4 >> 1);
  v8 = 2 * (a1 % *(_DWORD *)IDA__grid_width) - v7;
  v43 = 2 * (a1 % *(_DWORD *)IDA__grid_width) - v7;
  if ( v3 == v41 )
  {
    if ( v2 != a2 )
    {
      while ( 1 )
      {
        if ( v35 >= v38 )
          v2 -= v34;
        else
          v2 += v34;
        if ( sub_1000B8C0(v2) )
          break;
        if ( v2 == a2 )
          return 0;
      }
      return 1;
    }
    return 0;
  }
  if ( v35 == v38 )
  {
    if ( v2 != a2 )
    {
      while ( 1 )
      {
        if ( v42 >= v41 )
          --v2;
        else
          ++v2;
        if ( sub_1000B8C0(v2) )
          break;
        if ( v2 == a2 )
          return 0;
      }
      return 1;
    }
    return 0;
  }
  if ( v7 == v5 )
  {
    if ( v2 != a2 )
    {
      while ( 1 )
      {
        if ( v8 <= v6 )
        {
          if ( v2 & 1 )
            v2 += 1 - v34;
          else
            ++v2;
        }
        else if ( v2 & 1 )
        {
          --v2;
        }
        else
        {
          v2 = v2 + v34 - 1;
        }
        if ( sub_1000B8C0(v2) )
          break;
        if ( v2 == a2 )
          return 0;
        v8 = v43;
      }
      return 1;
    }
    return 0;
  }
  if ( v8 != v6 )
  {
    if ( !(v5 + v8 - v7 - v6) )
    {
      if ( v2 != a2 )
      {
        while ( 1 )
        {
          if ( v8 >= v6 )
          {
            if ( v2 & 1 )
              v2 += -1 - v34;
            else
              --v2;
          }
          else if ( v2 & 1 )
          {
            ++v2;
          }
          else
          {
            v2 += v34 + 1;
          }
          if ( sub_1000B8C0(v2) )
            break;
          if ( v2 == a2 )
            return 0;
          v8 = v43;
        }
        return 1;
      }
      return 0;
    }
    v12 = abs(v5 - v7);
    v13 = abs(v6 - v43);
    if ( v12 > v13 )
    {
      v24 = v12 * v13;
      v25 = v13 * v13;
      v28 = __OFSUB__(v7, v5);
      v26 = v7 == v5;
      v27 = v7 - v5 < 0;
      v37 = v24;
      v40 = v13 * v13;
      if ( v7 < v5 )
      {
        if ( v43 < v6 )
        {
          v29 = v24 - v25;
          v48 = 1;
          if ( v2 != a2 )
          {
            v30 = v24;
            while ( !sub_1000B8C0(v2) )
            {
              if ( v29 <= v30 )
              {
                if ( v48 )
                {
                  if ( v2 & 1 )
                    ++v2;
                  else
                    v2 += v34 + 1;
                  v48 = 0;
                }
                else
                {
                  v2 += v34;
                  v48 = 1;
                }
                v29 += v40;
              }
              else
              {
                v29 -= v30;
                if ( v48 )
                {
                  if ( v2 & 1 )
                    v2 += 1 - v34;
                  else
                    ++v2;
                  v48 = 0;
                }
                else
                {
                  v48 = 1;
                }
              }
              if ( v2 == a2 )
                return 0;
            }
            return 1;
          }
          return 0;
        }
        if ( v43 > v6 )
        {
          v31 = v24 - v25;
          v49 = 0;
          if ( v2 != a2 )
          {
            while ( !sub_1000B8C0(v2) )
            {
              if ( v31 <= v37 )
              {
                if ( v49 )
                {
                  if ( v2 & 1 )
                    ++v2;
                  else
                    v2 += v34 + 1;
                  v49 = 0;
                }
                else
                {
                  v2 += v34;
                  v49 = 1;
                }
                v31 += v40;
              }
              else
              {
                v31 -= v37;
                if ( v49 )
                {
                  v49 = 0;
                }
                else
                {
                  if ( v2 & 1 )
                    --v2;
                  else
                    v2 = v2 + v34 - 1;
                  v49 = 1;
                }
              }
              if ( v2 == a2 )
                return 0;
            }
            return 1;
          }
          return 0;
        }
        v28 = __OFSUB__(v7, v5);
        v26 = v7 == v5;
        v27 = v7 - v5 < 0;
      }
      if ( !((unsigned __int8)(v27 ^ v28) | v26) )
      {
        if ( v43 > v6 )
        {
          v32 = v24 - v25;
          v50 = 0;
          if ( v2 != a2 )
          {
            while ( !sub_1000B8C0(v2) )
            {
              if ( v32 <= v37 )
              {
                if ( v50 )
                {
                  v2 -= v34;
                  v50 = 0;
                }
                else
                {
                  if ( v2 & 1 )
                    v2 += -1 - v34;
                  else
                    --v2;
                  v50 = 1;
                }
                v32 += v40;
              }
              else
              {
                v32 -= v37;
                if ( v50 )
                {
                  v50 = 0;
                }
                else
                {
                  if ( v2 & 1 )
                    --v2;
                  else
                    v2 = v2 + v34 - 1;
                  v50 = 1;
                }
              }
              if ( v2 == a2 )
                return 0;
            }
            return 1;
          }
          return 0;
        }
        if ( v43 < v6 )
        {
          v33 = v24 - v25;
          v51 = 1;
          if ( v2 != a2 )
          {
            while ( !sub_1000B8C0(v2) )
            {
              if ( v33 <= v37 )
              {
                if ( v51 )
                {
                  v2 -= v34;
                  v51 = 0;
                }
                else
                {
                  if ( v2 & 1 )
                    v2 += -1 - v34;
                  else
                    --v2;
                  v51 = 1;
                }
                v33 += v40;
              }
              else
              {
                v33 -= v37;
                if ( v51 )
                {
                  if ( v2 & 1 )
                    v2 += 1 - v34;
                  else
                    ++v2;
                  v51 = 0;
                }
                else
                {
                  v51 = 1;
                }
              }
              if ( v2 == a2 )
                return 0;
            }
            return 1;
          }
          return 0;
        }
      }
    }
    else
    {
      v14 = v12 * v13;
      v15 = v12 * v12;
      v18 = __OFSUB__(v7, v5);
      v16 = v7 == v5;
      v17 = v7 - v5 < 0;
      v36 = v12 * v12;
      v39 = v14;
      if ( v7 < v5 )
      {
        if ( v43 < v6 )
        {
          v19 = v14 - v15;
          v44 = 1;
          if ( v2 == a2 )
            return 0;
          v20 = v34;
          do
          {
            if ( v19 > v14 )
            {
              v19 -= v14;
              if ( v44 )
              {
                if ( v2 & 1 )
                  ++v2;
                else
                  v2 += v20 + 1;
                v44 = 0;
              }
              else
              {
                v2 += v20;
                v44 = 1;
              }
            }
            else
            {
              if ( sub_1000B8C0(v2) )
                return 1;
              if ( v44 )
              {
                if ( v2 & 1 )
                  v2 += 1 - v34;
                else
                  ++v2;
                v44 = 0;
              }
              else
              {
                v44 = 1;
              }
              v20 = v34;
              v19 += v36;
              v14 = v39;
            }
          }
          while ( v2 != a2 );
          return 0;
        }
        if ( v43 > v6 )
        {
          v21 = v14 - v15;
          v45 = 0;
          if ( v2 == a2 )
            return 0;
          do
          {
            if ( v21 > v39 )
            {
              v21 -= v39;
              if ( v45 )
              {
                if ( v2 & 1 )
                  ++v2;
                else
                  v2 += v34 + 1;
                v45 = 0;
              }
              else
              {
                v2 += v34;
                v45 = 1;
              }
            }
            else
            {
              if ( sub_1000B8C0(v2) )
                return 1;
              if ( v45 )
              {
                v45 = 0;
              }
              else
              {
                if ( v2 & 1 )
                  --v2;
                else
                  v2 = v2 + v34 - 1;
                v45 = 1;
              }
              v21 += v36;
            }
          }
          while ( v2 != a2 );
          return 0;
        }
        v18 = __OFSUB__(v7, v5);
        v16 = v7 == v5;
        v17 = v7 - v5 < 0;
      }
      if ( !((unsigned __int8)(v17 ^ v18) | v16) )
      {
        if ( v43 < v6 )
        {
          v22 = v14 - v15;
          v46 = 1;
          if ( v2 != a2 )
          {
            while ( !sub_1000B8C0(v2) )
            {
              if ( v22 <= v39 )
              {
                if ( v46 )
                {
                  if ( v2 & 1 )
                    v2 += 1 - v34;
                  else
                    ++v2;
                  v46 = 0;
                }
                else
                {
                  v46 = 1;
                }
                v22 += v36;
              }
              else
              {
                v22 -= v39;
                if ( v46 )
                {
                  v2 -= v34;
                  v46 = 0;
                }
                else
                {
                  if ( v2 & 1 )
                    v2 += -1 - v34;
                  else
                    --v2;
                  v46 = 1;
                }
              }
              if ( v2 == a2 )
                return 0;
            }
            return 1;
          }
          return 0;
        }
        if ( v43 > v6 )
        {
          v23 = v14 - v15;
          v47 = 0;
          if ( v2 != a2 )
          {
            while ( !sub_1000B8C0(v2) )
            {
              if ( v23 <= v39 )
              {
                if ( v47 )
                {
                  v47 = 0;
                }
                else
                {
                  if ( v2 & 1 )
                    --v2;
                  else
                    v2 = v2 + v34 - 1;
                  v47 = 1;
                }
                v23 += v36;
              }
              else
              {
                v23 -= v39;
                if ( v47 )
                {
                  v2 -= v34;
                  v47 = 0;
                }
                else
                {
                  if ( v2 & 1 )
                    v2 += -1 - v34;
                  else
                    --v2;
                  v47 = 1;
                }
              }
              if ( v2 == a2 )
                return 0;
            }
            return 1;
          }
          return 0;
        }
      }
    }
    return 1;
  }
  if ( v2 == a2 )
    return 0;
  do
  {
    if ( v7 >= v5 )
    {
      v10 = v2 - v34;
      v11 = sub_1000B8C0(v2 - v34);
      if ( v2 & 1 )
      {
        if ( v11 && sub_1000B8C0(v10 - 1) )
          return 1;
        v2 += -1 - 2 * v34;
      }
      else
      {
        if ( v11 && sub_1000B8C0(v2 - 1) )
          return 1;
        v2 = v10 - 1;
      }
    }
    else if ( v2 & 1 )
    {
      if ( sub_1000B8C0(v2 + v34) && sub_1000B8C0(v2 + 1) )
        return 1;
      v2 += v34 + 1;
    }
    else
    {
      if ( sub_1000B8C0(v2 + v34) && sub_1000B8C0(v2 + v34 + 1) )
        return 1;
      v2 += 2 * v34 + 1;
    }
    if ( sub_1000B8C0(v2) )
      return 1;
  }
  while ( v2 != a2 );
  return 0;
}
// 1003D0DC: using guessed type int IDA__grid_size;
// 1003D0F4: using guessed type int IDA__grid_width;

//----- (1000C1E0) --------------------------------------------------------
char __cdecl sub_1000C1E0(int a1, int a2)
{
  int v2; // ebx
  int v3; // esi
  int v4; // eax
  _DWORD *v5; // edi
  int v6; // esi
  int v7; // ecx
  int v8; // edx
  int v9; // edx
  int v10; // ST04_4
  int v11; // ecx
  int v13; // [esp+10h] [ebp-4h]

  v2 = a2;
  v3 = 0;
  v13 = 0;
  do
  {
    v4 = sub_1000A310(*(_DWORD *)(v2 + 4), v3, 1);
    v5 = *(_DWORD **)(IDA__objectTable + 4 * v4);
    if ( !v5 )
      goto LABEL_15;
    do
    {
      v6 = *v5;
      v4 = *(_DWORD *)(*v5 + 40);
      v7 = *(_DWORD *)(v2 + 40);
      if ( v4 > v7 )
        break;
      v8 = *(_BYTE *)(v6 + 35) & 0xF;
      if ( v4 == v7 )
      {
        v4 = *(_DWORD *)(v6 + 36);
        if ( !(v4 & 0x40000000) )
        {
          if ( v8 == 3 )
          {
            v9 = *(_DWORD *)(v6 + 4);
            *(_DWORD *)(v6 + 36) = v4 | 0x40000000;
            LOBYTE(v4) = sub_1000B9A0(*(_DWORD *)(a1 + 4), v9);
            goto LABEL_11;
          }
          if ( v8 == 2 )
          {
            v10 = *(_DWORD *)(v6 + 100);
            a2 = 0;
            sub_1000E220(v10, (int)&a2);
            LOBYTE(v4) = a2;
            if ( !*(_DWORD *)(a2 + 32) )
            {
              v11 = *(_DWORD *)(v6 + 4);
              *(_DWORD *)(v6 + 36) |= 0x40000000u;
              LOBYTE(v4) = sub_1000B9A0(*(_DWORD *)(a1 + 4), v11);
LABEL_11:
              if ( !(_BYTE)v4 )
                LOBYTE(v4) = sub_1000C1E0(a1, v6);
              goto LABEL_13;
            }
          }
        }
      }
LABEL_13:
      v5 = (_DWORD *)v5[1];
    }
    while ( v5 );
    v3 = v13;
LABEL_15:
    v13 = ++v3;
  }
  while ( v3 < 6 );
  return v4;
}
// 10064414: using guessed type int IDA__objectTable;

//----- (1000C2D0) --------------------------------------------------------
signed int __cdecl sub_1000C2D0(int a1)
{
  int v1; // ecx
  int v3; // ebp
  int v4; // edi
  int v5; // ebx
  int v6; // ebp
  int v7; // ST00_4
  int v8; // eax
  int v9; // eax
  int v10; // [esp+0h] [ebp-4h]

  v10 = v1;
  if ( !FOWEnable || !*(_DWORD *)IDA__refresh_enabled || !byte_10064400 )
    return 1;
  v3 = *(_DWORD *)IDA__obj_dude;
  v10 = v3;
  if ( a1 == v3 )
  {
    *(_DWORD *)(a1 + 36) |= 0x40000000u;
    return 1;
  }
  v4 = *(_BYTE *)(a1 + 35) & 0xF;
  if ( v4 != 1 )
  {
    if ( !(*(_DWORD *)(a1 + 36) & 0x40000000) )
    {
      if ( sub_1000B9A0(*(_DWORD *)(v3 + 4), *(_DWORD *)(a1 + 4)) )
      {
        v5 = *(_DWORD *)(a1 + 4);
        v6 = *(_DWORD *)(v3 + 4);
        if ( sub_1000A430(v6, *(_DWORD *)(a1 + 4)) >= 2 || v4 != 3 )
        {
          if ( sub_1000A430(v6, v5) >= 2 || v4 != 2 )
          {
            if ( v4 == 3 || v4 == 2 || v4 == 5 )
              return 0;
          }
          else
          {
            v7 = *(_DWORD *)(a1 + 100);
            v10 = 0;
            sub_1000E220(v7, (int)&v10);
            if ( !*(_DWORD *)(v10 + 32) )
            {
              *(_DWORD *)(a1 + 36) |= 0x40000000u;
              return 1;
            }
          }
          return -1;
        }
        v3 = v10;
      }
      *(_DWORD *)(a1 + 36) |= 0x40000000u;
      if ( v4 == 3 )
        sub_1000C1E0(v3, a1);
    }
    return 1;
  }
  v8 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 36) |= 0x40000000u;
  if ( !v8 )
    return 1;
  v9 = *(_DWORD *)(a1 + 116);
  if ( v9 & 0xFFFFFF )
  {
    if ( v9 >= 0 && !(v9 & 0x20) )
      return 1;
  }
  if ( !sub_1000B9A0(*(_DWORD *)(v3 + 4), *(_DWORD *)(a1 + 4)) )
    return 1;
  return -1;
}
// 10064388: using guessed type int IDA__refresh_enabled;
// 100643F8: using guessed type int FOWEnable;
// 10064400: using guessed type char byte_10064400;
// 10064460: using guessed type int IDA__obj_dude;

//----- (1000C450) --------------------------------------------------------
char __cdecl sub_1000C450(int a1)
{
  int v1; // eax
  int v2; // eax

  if ( FOWEnable )
  {
    v1 = *(_BYTE *)(a1 + 35) & 0xF;
    if ( v1 == 1 )
    {
      if ( *(_DWORD *)(a1 + 80) )
      {
        v2 = *(_DWORD *)(a1 + 116);
        if ( !(v2 & 0xFFFFFF) || v2 < 0 || v2 & 0x20 )
        {
          if ( sub_1000B9A0(*(_DWORD *)(*(_DWORD *)IDA__obj_dude + 4), *(_DWORD *)(a1 + 4)) )
            return 0;
        }
      }
    }
    else if ( (FOWLightLevel || v1 != 3 && v1 != 2 && v1 != 5) && !(*(_DWORD *)(a1 + 36) & 0x40000000) )
    {
      return 0;
    }
  }
  return 1;
}
// 1003B068: using guessed type int FOWLightLevel;
// 100643F8: using guessed type int FOWEnable;
// 10064460: using guessed type int IDA__obj_dude;

//----- (1000C4D0) --------------------------------------------------------
int __cdecl sub_1000C4D0(int a1, int a2, int a3, int a4, int *a5)
{
  int v5; // eax
  int v6; // esi
  int *v7; // edi
  int v8; // eax
  int v9; // ecx
  int v10; // ecx
  int v11; // ST14_4
  int v12; // ebx
  int v13; // eax
  bool v14; // sf
  unsigned __int8 v15; // of
  int result; // eax
  int v17; // [esp+10h] [ebp-14h]
  int v18; // [esp+18h] [ebp-Ch]
  int v19; // [esp+1Ch] [ebp-8h]
  char v20; // [esp+23h] [ebp-1h]

  *a5 = 0;
  v5 = 0;
  v6 = 0;
  v18 = 0;
  v20 = 0;
  v17 = 0;
  if ( *(_DWORD *)IDA__grid_size <= 0 )
  {
    result = 0;
    *a5 = 0;
  }
  else
  {
    do
    {
      v7 = *(int **)(IDA__objectTable + 4 * v5);
      v19 = 8 * v6 + 8;
      while ( v7 )
      {
        if ( v20 )
          break;
        v8 = *v7;
        v9 = *(_DWORD *)(*v7 + 40);
        if ( v9 > a3 )
        {
          v20 = 1;
        }
        else
        {
          if ( v9 == a3 && (a4 == -1 || (*(_BYTE *)(v8 + 35) & 0xF) == a4) && v8 != *(_DWORD *)IDA__obj_egg )
          {
            if ( sub_1000C450(*v7) )
            {
              v11 = *v7;
              if ( IDA_obj_intersects_with_ )
              {
                v12 = IDA_obj_intersects_with_(v10, a1);
                if ( v12 )
                {
                  v13 = sub_1000F190(v18, v19);
                  v18 = v13;
                  if ( v13 )
                  {
                    *(_DWORD *)(v13 + 8 * v6 + 4) = *v7;
                    *(_DWORD *)(v13 + 8 * v6++) = v12;
                    v19 += 8;
                  }
                }
              }
            }
          }
          v7 = (int *)v7[1];
        }
      }
      v5 = v17 + 1;
      v15 = __OFSUB__(v17 + 1, *(_DWORD *)IDA__grid_size);
      v14 = v17 + 1 - *(_DWORD *)IDA__grid_size < 0;
      v20 = 0;
      ++v17;
    }
    while ( v14 ^ v15 );
    *a5 = v18;
    result = v6;
  }
  return result;
}
// 100643D0: invalid function type has been ignored
// 100643D0: using guessed type int (__fastcall *IDA_obj_intersects_with_)(_DWORD, _DWORD);
// 10064414: using guessed type int IDA__objectTable;
// 1006446C: using guessed type int IDA__obj_egg;

//----- (1000C610) --------------------------------------------------------
int __cdecl sub_1000C610(int a1, int a2, int a3)
{
  int result; // eax
  int v4; // [esp+4h] [ebp-8h]
  int v5; // [esp+8h] [ebp-4h]

  v4 = 0;
  v5 = 0;
  sub_1000B620(a1, a2, a3, &v4, &v5);
  if ( v4 < 0 || v4 > *(_DWORD *)IDA__square_width || v5 < 0 || v5 > *(_DWORD *)IDA__square_length )
    result = -1;
  else
    result = v4 + v5 * *(_DWORD *)IDA__square_width;
  return result;
}
// 10064404: using guessed type int IDA__square_length;
// 10064408: using guessed type int IDA__square_width;

//----- (1000C750) --------------------------------------------------------
int __cdecl sub_1000C750(int a1, int a2)
{
  int v2; // ecx
  int result; // eax

  result = IDA__tile_refresh;
  if ( IDA__tile_refresh )
    result = (*(int (__fastcall **)(int, int))IDA__tile_refresh)(v2, a2);
  return result;
}
// 100643E0: using guessed type int IDA__tile_refresh;

//----- (1000C930) --------------------------------------------------------
signed int F_chkEnableFOWAndOthers()
{
  int v0; // eax
  int v1; // eax
  signed int result; // eax
  CHAR str_buffer; // [esp+0h] [ebp-100h]

  F_GetPrivateProfileStringA("MAPS", "SCROLL_DIST_X", "480", &str_buffer, 0xFFu);
  if ( !strncmp(&str_buffer, "HALF_SCRN", 9u) )
    v0 = scr_width / 2 + 32;
  else
    v0 = j__atol(&str_buffer);
  dword_1003B06C = v0;
  if ( v0 < 480 )
    dword_1003B06C = 480;
  F_GetPrivateProfileStringA("MAPS", "SCROLL_DIST_Y", "400", &str_buffer, 0xFFu);
  if ( !strncmp(&str_buffer, "HALF_SCRN", 9u) )
    v1 = newBytes / 2 + 24;
  else
    v1 = j__atol(&str_buffer);
  dword_1003B070 = v1;
  if ( v1 < 400 )
    dword_1003B070 = 400;
  if ( F_GetPrivateProfileIntA("MAPS", "EDGE_CLIPPING_ON", 0) )
    edge_clipping_on = 1;
  FOWEnable = F_GetPrivateProfileIntA("MAPS", "FOG_OF_WAR", 0) != 0;
  result = F_GetPrivateProfileIntA("MAPS", "FOG_LIGHT_LEVEL", 0);
  if ( result < 1 || result > 10 )
  {
    FOWLightLevel = 0;
  }
  else
  {
    result <<= 12;
    FOWLightLevel = result;
  }
  return result;
}
// 1003B068: using guessed type int FOWLightLevel;
// 1003B06C: using guessed type int dword_1003B06C;
// 1003B070: using guessed type int dword_1003B070;
// 100643F8: using guessed type int FOWEnable;

//----- (1000CA80) --------------------------------------------------------
int (__fastcall *F_initFunc9())(_DWORD, _DWORD, _DWORD)
{
  int (__fastcall *result)(_DWORD, _DWORD, _DWORD); // eax

  IDA_tile_num_ = F_ptrCorrection_(4843620);
  IDA__squares = F_ptrCorrection_(6721116);
  IDA__obj_egg = F_ptrCorrection_(6682144);
  IDA__ambient_light = F_ptrCorrection_(5265620);
  IDA__tile_intensity = F_ptrCorrection_(5885756);
  IDA__objectTable = F_ptrCorrection_(6521616);
  IDA__tile_mask = F_ptrCorrection_(6720036);
  IDA__gmouse_current_cursor = F_ptrCorrection_(5264224);
  IDA__map_elevation = F_ptrCorrection_(5266412);
  IDA__tile_center_tile = F_ptrCorrection_(6721140);
  IDA__grid_width = F_ptrCorrection_(6721112);
  IDA__grid_length = F_ptrCorrection_(6721124);
  IDA__grid_size = F_ptrCorrection_(6721128);
  IDA__square_length = F_ptrCorrection_(6721132);
  IDA__square_width = F_ptrCorrection_(6721136);
  IDA__square_size = F_ptrCorrection_(6721108);
  IDA__tile_offx = F_ptrCorrection_(6721064);
  IDA__tile_offy = F_ptrCorrection_(6721060);
  IDA__square_offx = F_ptrCorrection_(6721076);
  IDA__square_offy = F_ptrCorrection_(6721080);
  IDA__square_x = F_ptrCorrection_(6721072);
  IDA__square_y = F_ptrCorrection_(6721068);
  IDA__tile_x = F_ptrCorrection_(6721092);
  IDA__tile_y = F_ptrCorrection_(6721096);
  IDA__scroll_blocking_on = F_ptrCorrection_(5276708);
  IDA__scroll_limiting_o = F_ptrCorrection_(5276712);
  IDA__obj_dude = F_ptrCorrection_(6682168);
  IDA__main_ctd = F_ptrCorrection_(5684176);
  IDA__dialog_target = F_ptrCorrection_(5263624);
  IDA__display_buf = F_ptrCorrection_(6488812);
  IDA__buf = F_ptrCorrection_(6721120);
  IDA__map_display_rect = F_ptrCorrection_(6488788);
  IDA__buf_width_2 = F_ptrCorrection_(6721104);
  IDA__buf_length_2 = F_ptrCorrection_(6721084);
  IDA__buf_full_2 = F_ptrCorrection_(6721100);
  IDA__buf_rect_2 = F_ptrCorrection_(6718996);
  IDA__display_buffer = F_ptrCorrection_(6705800);
  IDA__display_width = F_ptrCorrection_(6705792);
  IDA__display_height = F_ptrCorrection_(6705796);
  IDA__buf_width = F_ptrCorrection_(6682164);
  IDA__buf_length = F_ptrCorrection_(6682156);
  IDA__back_buf = F_ptrCorrection_(6682152);
  IDA__buf_full = F_ptrCorrection_(6682160);
  IDA__buf_rect = F_ptrCorrection_(6521600);
  IDA__buf_size = F_ptrCorrection_(6682148);
  IDA_obj_intersects_with_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4710080);
  IDA_light_get_tile_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4640584);
  IDA_obj_render_object_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4721912);
  IDA_floor_draw_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4849780);
  IDA_obj_connect_to_tile_ = F_ptrCorrection_(4716188);
  IDA_obj_bound_ = F_ptrCorrection_(4707736);
  IDA_main_init_system_ = F_ptrCorrection_(4664592);
  IDA_map_init_ = F_ptrCorrection_(4669456);
  IDA_game_handle_input_ = F_ptrCorrection_(4438652);
  IDA_map_new_map_ = F_ptrCorrection_(4671780);
  IDA_map_load_dialog_ = F_ptrCorrection_(4671964);
  IDA_map_load_ = F_ptrCorrection_(4672084);
  IDA_map_save_as_ = F_ptrCorrection_(4676796);
  IDA_intface_hide_ = F_ptrCorrection_(4540376);
  IDA_gmouse_set_mapper_mode_ = F_ptrCorrection_(4475108);
  IDA_intface_init_ = F_ptrCorrection_(4535888);
  IDA_op_sub__3rdCall = F_ptrCorrection_(4580416);
  IDA__show_grid = F_ptrCorrection_(5276720);
  IDA_grid_render_ = F_ptrCorrection_(4849224);
  IDA__tile_refresh = F_ptrCorrection_(5276724);
  IDA__show_roof = F_ptrCorrection_(5276716);
  IDA__refresh_enabled = F_ptrCorrection_(5276728);
  IDA_map_set_elevation_ = F_ptrCorrection_(4669852);
  IDA_obj_blocking_at_ = F_ptrCorrection_(4708224);
  IDA_pick_hex_ = F_ptrCorrection_(4270048);
  IDA__art_mapper_blank_tile = F_ptrCorrection_(5238000);
  IDA__map_name = F_ptrCorrection_(6488820);
  IDA_map_save_file_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4676048);
  result = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4660972);
  IDA_copy_file_ = result;
  return result;
}
// 1003C8D8: using guessed type int IDA__map_elevation;
// 1003C8DC: using guessed type int IDA__tile_y;
// 1003C900: using guessed type int IDA__tile_mask;
// 1003D0D8: using guessed type int IDA__scroll_limiting_o;
// 1003D0E0: using guessed type int IDA__square_offx;
// 1003D0E4: using guessed type int IDA__tile_x;
// 1003D0E8: using guessed type int IDA__tile_center_tile;
// 1003D0EC: using guessed type int IDA__gmouse_current_cursor;
// 1003D0F0: using guessed type int IDA__square_x;
// 1003D0F4: using guessed type int IDA__grid_width;
// 1003D0F8: using guessed type int IDA__square_size;
// 1003D0FC: using guessed type int IDA__square_y;
// 1003D100: using guessed type int IDA__square_offy;
// 10064260: using guessed type int IDA__grid_length;
// 10064378: using guessed type int IDA__scroll_blocking_on;
// 1006437C: using guessed type int IDA__tile_offx;
// 10064380: using guessed type int IDA__tile_offy;
// 10064384: using guessed type int IDA__art_mapper_blank_tile;
// 10064388: using guessed type int IDA__refresh_enabled;
// 1006438C: using guessed type int IDA__show_roof;
// 10064390: using guessed type int IDA__show_grid;
// 10064394: using guessed type int IDA_tile_num_;
// 10064398: using guessed type int IDA_grid_render_;
// 1006439C: using guessed type int IDA_main_init_system_;
// 100643A0: using guessed type int IDA_map_init_;
// 100643A4: using guessed type int IDA_game_handle_input_;
// 100643A8: using guessed type int IDA_map_new_map_;
// 100643AC: using guessed type int IDA_map_load_dialog_;
// 100643B0: using guessed type int IDA_map_load_;
// 100643B4: using guessed type int IDA_map_save_as_;
// 100643B8: using guessed type int IDA_intface_hide_;
// 100643BC: using guessed type int IDA_gmouse_set_mapper_mode_;
// 100643C0: using guessed type int IDA_intface_init_;
// 100643C4: using guessed type int IDA_op_sub__3rdCall;
// 100643C8: using guessed type int (__fastcall *IDA_light_get_tile_)(_DWORD, _DWORD);
// 100643CC: using guessed type int (__fastcall *IDA_obj_render_object_)(_DWORD, _DWORD);
// 100643D0: using guessed type int (__fastcall *IDA_obj_intersects_with_)(_DWORD, _DWORD);
// 100643D4: using guessed type int IDA_obj_connect_to_tile_;
// 100643D8: using guessed type int IDA_obj_bound_;
// 100643DC: using guessed type int (__fastcall *IDA_floor_draw_)(_DWORD, _DWORD);
// 100643E0: using guessed type int IDA__tile_refresh;
// 100643E4: using guessed type int IDA_map_set_elevation_;
// 100643E8: using guessed type int IDA_pick_hex_;
// 100643EC: using guessed type int IDA_obj_blocking_at_;
// 100643F0: using guessed type int (__cdecl *IDA_map_save_file_)(_DWORD);
// 100643F4: using guessed type int (__fastcall *IDA_copy_file_)(_DWORD, _DWORD, _DWORD);
// 10064404: using guessed type int IDA__square_length;
// 10064408: using guessed type int IDA__square_width;
// 1006440C: using guessed type int IDA__ambient_light;
// 10064410: using guessed type int IDA__tile_intensity;
// 10064414: using guessed type int IDA__objectTable;
// 1006441C: using guessed type int IDA__squares;
// 10064420: using guessed type int IDA__display_buf;
// 10064424: using guessed type int IDA__map_display_rect;
// 10064428: using guessed type int IDA__buf;
// 1006442C: using guessed type int IDA__buf_width_2;
// 10064430: using guessed type int IDA__buf_length_2;
// 10064434: using guessed type int IDA__buf_full_2;
// 10064438: using guessed type int IDA__buf_rect_2;
// 1006443C: using guessed type int IDA__display_buffer;
// 10064440: using guessed type int IDA__display_width;
// 10064444: using guessed type int IDA__display_height;
// 10064448: using guessed type int IDA__back_buf;
// 1006444C: using guessed type int IDA__buf_width;
// 10064450: using guessed type int IDA__buf_length;
// 10064454: using guessed type int IDA__buf_full;
// 10064458: using guessed type int IDA__buf_rect;
// 1006445C: using guessed type int IDA__buf_size;
// 10064460: using guessed type int IDA__obj_dude;
// 10064464: using guessed type int IDA__main_ctd;
// 10064468: using guessed type int IDA__dialog_target;
// 1006446C: using guessed type int IDA__obj_egg;
// 10064488: using guessed type int IDA__map_name;

//----- (1000D100) --------------------------------------------------------
char __cdecl sub_1000D100(int a1)
{
  unsigned int v1; // edi
  char result; // al
  _DWORD *v3; // esi
  void *v4; // ebp
  char *v5; // eax
  void *v6; // ecx
  int v7; // esi
  unsigned int *v8; // eax
  void *v9; // ecx
  unsigned int *v10; // eax
  unsigned int *v11; // eax
  _DWORD *v12; // eax
  unsigned int v13; // [esp+4h] [ebp-104h]
  char v14; // [esp+8h] [ebp-100h]

  v1 = 0;
  if ( !FOWEnable )
    return 0;
  byte_10064400 = 1;
  dword_1003B0C4 = -*(_DWORD *)IDA__grid_width;
  dword_1003B0CC = *(_DWORD *)IDA__grid_width;
  dword_1003B0D8 = *(_DWORD *)IDA__grid_width;
  dword_1003B0DC = *(_DWORD *)IDA__grid_width;
  dword_1003B0E4 = *(_DWORD *)IDA__grid_width;
  dword_1003B0F4 = -*(_DWORD *)IDA__grid_width;
  dword_1003B0FC = -*(_DWORD *)IDA__grid_width;
  dword_1003B100 = -*(_DWORD *)IDA__grid_width;
  if ( dword_100643FC )
  {
    v3 = (char *)dword_100643FC + 4;
    v4 = dword_100643FC;
    free(*((void **)dword_100643FC + 1));
    *v3 = 0;
    j__free(v4);
    dword_100643FC = 0;
  }
  sprintf(&v14, "maps\\%s", a1);
  v5 = strchr(&v14, 46);
  *(_DWORD *)v5 = 1735353902;
  v5[4] = 0;
  v7 = sub_10009AF0((int)&v14, (int)"rb");
  if ( v7 )
  {
    v13 = 0;
    if ( !dword_100643FC )
    {
      sub_10009BA0(v7, (int)&v13);
      if ( v13 == 1179600719 )
      {
        sub_10009BA0(v7, (int)&v13);
        if ( v13 != 1180123474 || (sub_10009BA0(v7, (int)&v13), v13 != 1) )
        {
          sub_10009B20(v9);
          return 0;
        }
      }
      sub_10009BA0(v7, (int)&v13);
      v10 = (unsigned int *)operator new(0xCu);
      if ( v10 )
        v11 = sub_10009DB0(v10, v13);
      else
        v11 = 0;
      dword_100643FC = v11;
      sub_10009BA0(v7, (int)&v13);
      v12 = dword_100643FC;
      v6 = (void *)*((_DWORD *)dword_100643FC + 2);
      if ( (unsigned int)v6 > 0 )
      {
        do
        {
          sub_10009BA0(v7, v12[1] + 4 * v1);
          v12 = dword_100643FC;
          v6 = (void *)*((_DWORD *)dword_100643FC + 2);
          ++v1;
        }
        while ( v1 < (unsigned int)v6 );
      }
    }
    sub_10009B20(v6);
    result = 1;
  }
  else
  {
    v8 = (unsigned int *)operator new(0xCu);
    if ( v8 )
    {
      dword_100643FC = sub_10009DB0(v8, 3 * *(_DWORD *)IDA__grid_size);
      result = 0;
    }
    else
    {
      result = 0;
      dword_100643FC = 0;
    }
  }
  return result;
}
// 1003B0C4: using guessed type int dword_1003B0C4;
// 1003B0CC: using guessed type int dword_1003B0CC;
// 1003B0D8: using guessed type int dword_1003B0D8;
// 1003B0DC: using guessed type int dword_1003B0DC;
// 1003B0E4: using guessed type int dword_1003B0E4;
// 1003B0F4: using guessed type int dword_1003B0F4;
// 1003B0FC: using guessed type int dword_1003B0FC;
// 1003B100: using guessed type int dword_1003B100;
// 1003D0DC: using guessed type int IDA__grid_size;
// 1003D0F4: using guessed type int IDA__grid_width;
// 100643F8: using guessed type int FOWEnable;
// 10064400: using guessed type char byte_10064400;

//----- (1000D320) --------------------------------------------------------
int __thiscall sub_1000D320(void *this)
{
  int result; // eax

  result = *(_DWORD *)IDA__display_win;
  if ( *(_DWORD *)IDA__display_win != -1 )
  {
    result = sub_1000EF10(this);
    if ( result )
    {
      if ( *(_DWORD *)IDA__refresh_enabled )
      {
        result = IDA__tile_refresh;
        if ( IDA__tile_refresh )
          result = (*(int (__fastcall **)(_DWORD, _DWORD))IDA__tile_refresh)(
                     *(_DWORD *)IDA__map_elevation,
                     *(_DWORD *)IDA__map_elevation);
      }
    }
  }
  return result;
}
// 1003C8D8: using guessed type int IDA__map_elevation;
// 10064388: using guessed type int IDA__refresh_enabled;
// 100643E0: using guessed type int IDA__tile_refresh;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000D380) --------------------------------------------------------
signed int __cdecl sub_1000D380(int a1, int a2)
{
  int v2; // edi
  char v3; // bl
  int v4; // eax
  int v5; // ebx
  int v6; // ecx
  int v7; // esi
  int v8; // edx
  int v9; // edi
  int v10; // ebp
  int v11; // ecx
  int v12; // esi
  int v13; // edx
  int v14; // ebx
  int v15; // ST04_4
  signed int v16; // eax
  int v17; // esi
  int v18; // ecx
  _DWORD *v19; // edx

  v2 = a1;
  if ( a1 < 0 || a1 >= *(_DWORD *)IDA__grid_size )
    return -1;
  v3 = a2;
  if ( a2 )
  {
    a1 = sub_1000B020(a1, *(_DWORD *)IDA__map_elevation);
    v2 = a1;
  }
  v4 = a2 & 2;
  if ( !(a2 & 2) && *(_DWORD *)IDA__scroll_limiting_o )
  {
    v5 = *(_DWORD *)IDA__grid_width;
    v6 = v2 % *(_DWORD *)IDA__grid_width;
    v7 = v2 / *(_DWORD *)IDA__grid_width + (v2 % *(_DWORD *)IDA__grid_width >> 1);
    v8 = *(_DWORD *)(*(_DWORD *)IDA__obj_dude + 4) % *(_DWORD *)IDA__grid_width;
    v9 = *(_DWORD *)(*(_DWORD *)IDA__obj_dude + 4) / *(_DWORD *)IDA__grid_width + (v8 >> 1);
    v10 = 2 * v8 - v9;
    v11 = 16 * abs(2 * v6 - v10 - v7);
    v12 = 12 * abs(v7 - v9);
    if ( v11 >= dword_1003B06C || v12 >= dword_1003B070 )
    {
      v13 = *(_DWORD *)IDA__tile_center_tile % v5;
      v14 = *(_DWORD *)IDA__tile_center_tile / v5 + (v13 >> 1);
      if ( 16 * abs(2 * v13 - v14 - v10) < v11 || 12 * abs(v14 - v9) < v12 )
        return -1;
    }
    v3 = a2;
    v2 = a1;
    v4 = a2 & 2;
  }
  if ( !v4 && *(_DWORD *)IDA__scroll_blocking_on )
  {
    v15 = *(_DWORD *)IDA__map_elevation;
    v16 = sub_1000AF50(v2);
    if ( v16 == 1 )
    {
      v3 |= 1u;
    }
    else if ( !v16 )
    {
      return -1;
    }
  }
  v17 = *(_DWORD *)IDA__grid_width;
  v18 = sub_1000EF10(*(void **)IDA__display_win);
  *(_DWORD *)IDA__tile_offx = dword_10064474 + ((*(_DWORD *)(v18 + 24) - 32) >> 1);
  *(_DWORD *)IDA__tile_offy = dword_10064478 + ((*(_DWORD *)(v18 + 28) - 16) >> 1);
  *(_DWORD *)IDA__tile_x = v17 - v2 % v17 - 1;
  *(_DWORD *)IDA__tile_y = v2 / v17;
  v19 = (_DWORD *)IDA__tile_x;
  if ( *(_DWORD *)IDA__tile_x & 1 )
  {
    --*(_DWORD *)IDA__tile_x;
    *(_DWORD *)IDA__tile_offx -= 32;
    v19 = (_DWORD *)IDA__tile_x;
  }
  *(_DWORD *)IDA__square_x = *v19 >> 1;
  *(_DWORD *)IDA__square_y = *(_DWORD *)IDA__tile_y >> 1;
  *(_DWORD *)IDA__square_offx = *(_DWORD *)IDA__tile_offx - 16;
  *(_DWORD *)IDA__square_offy = *(_DWORD *)IDA__tile_offy - 2;
  if ( *(_BYTE *)IDA__tile_y & 1 )
  {
    *(_DWORD *)IDA__square_offy -= 12;
    *(_DWORD *)IDA__square_offx -= 16;
  }
  *(_DWORD *)IDA__tile_center_tile = v2;
  if ( v3 & 1 && *(_DWORD *)IDA__refresh_enabled )
  {
    sub_1000C750(v18 + 8, *(_DWORD *)IDA__map_elevation);
    return -1;
  }
  return 0;
}
// 1003B06C: using guessed type int dword_1003B06C;
// 1003B070: using guessed type int dword_1003B070;
// 1003C8D8: using guessed type int IDA__map_elevation;
// 1003C8DC: using guessed type int IDA__tile_y;
// 1003D0D8: using guessed type int IDA__scroll_limiting_o;
// 1003D0DC: using guessed type int IDA__grid_size;
// 1003D0E0: using guessed type int IDA__square_offx;
// 1003D0E4: using guessed type int IDA__tile_x;
// 1003D0E8: using guessed type int IDA__tile_center_tile;
// 1003D0F0: using guessed type int IDA__square_x;
// 1003D0F4: using guessed type int IDA__grid_width;
// 1003D0FC: using guessed type int IDA__square_y;
// 1003D100: using guessed type int IDA__square_offy;
// 10064378: using guessed type int IDA__scroll_blocking_on;
// 1006437C: using guessed type int IDA__tile_offx;
// 10064380: using guessed type int IDA__tile_offy;
// 10064388: using guessed type int IDA__refresh_enabled;
// 10064460: using guessed type int IDA__obj_dude;
// 10064474: using guessed type int dword_10064474;
// 10064478: using guessed type int dword_10064478;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000D5D0) --------------------------------------------------------
signed int __cdecl sub_1000D5D0(signed int a1, int a2, signed int a3)
{
  unsigned int v3; // eax
  signed int v4; // esi
  int v5; // ebx

  if ( a1 < 0 || a1 >= 3 )
    return 0;
  if ( a2 < 0 || a2 >= *(_DWORD *)IDA__grid_size )
    return 0;
  v3 = a2 + a1 * *(_DWORD *)IDA__grid_size;
  v4 = *(_DWORD *)(IDA__tile_intensity + 4 * v3);
  if ( v4 < a3 )
    v4 = a3;
  if ( FOWEnable )
  {
    if ( v4 > FOWLightLevel )
    {
      if ( FOWLightLevel )
      {
        v5 = *(_DWORD *)(*(_DWORD *)IDA__obj_dude + 4);
        if ( v5 != -1 && dword_100643FC && !sub_10009E20(dword_100643FC, v3) && sub_1000B9A0(v5, a2) )
          return FOWLightLevel;
      }
    }
  }
  if ( v4 <= 0x10000 )
    return v4;
  return 0x10000;
}
// 1003B068: using guessed type int FOWLightLevel;
// 1003D0DC: using guessed type int IDA__grid_size;
// 100643F8: using guessed type int FOWEnable;
// 10064410: using guessed type int IDA__tile_intensity;
// 10064460: using guessed type int IDA__obj_dude;

//----- (1000D690) --------------------------------------------------------
int __cdecl sub_1000D690(int *a1, int a2)
{
  int *v2; // esi
  int v3; // ST40_4
  int v4; // ST3C_4
  int v5; // edx
  int result; // eax
  int v7; // ecx
  int v8; // edi
  int v9; // esi
  int v10; // ecx
  int v11; // edi
  int v12; // ebx
  int v13; // esi
  bool v14; // zf
  bool v15; // sf
  unsigned __int8 v16; // of
  int v17; // [esp+Ch] [ebp-3Ch]
  int v18; // [esp+10h] [ebp-38h]
  int v19; // [esp+14h] [ebp-34h]
  int v20; // [esp+18h] [ebp-30h]
  int v21; // [esp+1Ch] [ebp-2Ch]
  int v22; // [esp+20h] [ebp-28h]
  int v23; // [esp+24h] [ebp-24h]
  int v24; // [esp+28h] [ebp-20h]
  int v25; // [esp+2Ch] [ebp-1Ch]
  int v26; // [esp+30h] [ebp-18h]
  int v27; // [esp+34h] [ebp-14h]
  int v28; // [esp+38h] [ebp-10h]
  int v29; // [esp+3Ch] [ebp-Ch]
  int v30; // [esp+40h] [ebp-8h]
  int v31; // [esp+44h] [ebp-4h]

  v2 = a1;
  v3 = a1[1];
  v4 = *a1;
  v31 = 0;
  sub_1000B620(v4, v3, a2, &v31, &v18);
  sub_1000B620(v2[2], v2[1], a2, &v19, &v31);
  sub_1000B620(*v2, v2[3], a2, &v17, &v31);
  sub_1000B620(v2[2], v2[3], a2, &v31, &v20);
  v5 = v19;
  if ( v19 >= 0 )
  {
    if ( v19 < *(_DWORD *)IDA__square_width )
      goto LABEL_6;
    v5 = *(_DWORD *)IDA__square_width - 1;
  }
  else
  {
    v5 = 0;
  }
  v19 = v5;
LABEL_6:
  result = v18;
  if ( v18 >= 0 )
  {
    if ( v18 < *(_DWORD *)IDA__square_length )
      goto LABEL_11;
    result = *(_DWORD *)IDA__square_length - 1;
  }
  else
  {
    result = 0;
  }
  v18 = result;
LABEL_11:
  v7 = *(_DWORD *)IDA__square_width;
  v8 = v17;
  if ( v17 > *(_DWORD *)IDA__square_width )
  {
    v17 = *(_DWORD *)IDA__square_width;
    v8 = v7;
  }
  if ( v20 > *(_DWORD *)IDA__square_length )
    v20 = *(_DWORD *)IDA__square_length;
  v9 = v20;
  if ( v20 >= result )
  {
    v24 = *(_DWORD *)IDA__squares;
    v29 = 0;
    v30 = 0;
    v10 = result * *(_DWORD *)IDA__square_width;
    v25 = result * *(_DWORD *)IDA__square_width;
    v27 = result;
    if ( result <= v20 )
    {
      do
      {
        if ( v5 <= v8 )
        {
          v11 = v10 + v5;
          v12 = v5;
          v26 = v5;
          v28 = 4 * (v10 + v5);
          do
          {
            if ( v11 >= 0 && v11 < *(_DWORD *)IDA__square_size )
            {
              v13 = *(_DWORD *)(v28 + *(_DWORD *)(v24 + 4 * a2));
              if ( !(v13 & 0x1000) )
              {
                sub_1000B6F0(v11, &v29, &v30);
                v23 = sub_1000B7E0(v12, v27, v13 & 0xFFF);
                v22 = v29;
                v21 = v30;
                if ( IDA_floor_draw_ )
                {
                  IDA_floor_draw_(a1, v22);
                  v12 = v26;
                }
                v5 = v19;
              }
            }
            ++v12;
            ++v11;
            v26 = v12;
            v28 += 4;
          }
          while ( v12 <= v17 );
          v10 = v25;
          v9 = v20;
          v8 = v17;
        }
        v10 += *(_DWORD *)IDA__square_width;
        result = v27 + 1;
        v16 = __OFSUB__(v27 + 1, v9);
        v14 = v27 + 1 == v9;
        v15 = v27 + 1 - v9 < 0;
        v25 = v10;
        ++v27;
      }
      while ( (unsigned __int8)(v15 ^ v16) | v14 );
    }
  }
  return result;
}
// 100643DC: invalid function type has been ignored
// 1003D0F8: using guessed type int IDA__square_size;
// 100643DC: using guessed type int (__fastcall *IDA_floor_draw_)(_DWORD, _DWORD);
// 10064404: using guessed type int IDA__square_length;
// 10064408: using guessed type int IDA__square_width;
// 1006441C: using guessed type int IDA__squares;

//----- (1000D870) --------------------------------------------------------
int __cdecl sub_1000D870(int *a1, int a2)
{
  int *v2; // esi
  int v3; // ST40_4
  int v4; // ST3C_4
  int result; // eax
  int v6; // esi
  bool v7; // sf
  int v8; // edx
  int v9; // ecx
  int v10; // ebx
  int v11; // edi
  int v12; // esi
  bool v13; // zf
  unsigned __int8 v14; // of
  int v15; // [esp+Ch] [ebp-38h]
  int v16; // [esp+10h] [ebp-34h]
  int v17; // [esp+14h] [ebp-30h]
  int v18; // [esp+18h] [ebp-2Ch]
  int v19; // [esp+1Ch] [ebp-28h]
  int v20; // [esp+20h] [ebp-24h]
  int v21; // [esp+24h] [ebp-20h]
  int v22; // [esp+28h] [ebp-1Ch]
  int *v23; // [esp+2Ch] [ebp-18h]
  int v24; // [esp+30h] [ebp-14h]
  int v25; // [esp+34h] [ebp-10h]
  int v26; // [esp+38h] [ebp-Ch]
  int v27; // [esp+3Ch] [ebp-8h]
  int v28; // [esp+40h] [ebp-4h]

  v2 = a1;
  v3 = a1[1];
  v4 = *a1;
  v28 = 0;
  sub_1000B620(v4, v3, 0, &v28, &v16);
  sub_1000B620(v2[2], v2[1], 0, &v17, &v28);
  sub_1000B620(*v2, v2[3], 0, &v15, &v28);
  sub_1000B620(v2[2], v2[3], 0, &v28, &v18);
  result = v16 - 1;
  v6 = v17 - 1;
  v7 = v17 - 1 < 0;
  ++v18;
  ++v15;
  --v16;
  --v17;
  v8 = *(_DWORD *)IDA__square_width;
  v9 = *(_DWORD *)IDA__square_length;
  v19 = *(_DWORD *)IDA__square_width;
  if ( v7 )
  {
    v17 = 0;
  }
  else if ( v6 >= v8 )
  {
    v17 = v8 - 1;
  }
  if ( result >= 0 )
  {
    if ( result < v9 )
      goto LABEL_10;
    result = v9 - 1;
  }
  else
  {
    result = 0;
  }
  v16 = result;
LABEL_10:
  if ( v15 > v8 )
    v15 = v8;
  if ( v18 > v9 )
    v18 = v9;
  if ( v18 >= result )
  {
    v10 = result * v8;
    v26 = 0;
    v27 = 0;
    v23 = (int *)(dword_10064374 + 56);
    v11 = dword_10064374 + 72;
    v24 = result * v8;
    v25 = result;
    if ( result <= v18 )
    {
      do
      {
        v12 = v17;
        if ( v15 >= v17 && v17 <= v15 )
        {
          do
          {
            if ( v12 > *v23 && (*(_BYTE *)(v11 + 3) & 1) == a2
              || v25 < v23[1] && (*(_BYTE *)(v11 + 2) & 1) == a2
              || v12 < v23[2] && ((*(_DWORD *)v11 >> 8) & 1) == a2
              || v25 > v23[3] && (*(_DWORD *)v11 & 1) == a2 )
            {
              sub_1000B6F0(v12 + v10, &v26, &v27);
              v20 = v27;
              v21 = v26;
              v22 = 67108865;
              if ( IDA_floor_draw_ )
              {
                IDA_floor_draw_(a1, v21);
                v10 = v24;
              }
            }
            ++v12;
          }
          while ( v12 <= v15 );
          v8 = v19;
        }
        v10 += v8;
        result = v25 + 1;
        v14 = __OFSUB__(v25 + 1, v18);
        v13 = v25 + 1 == v18;
        v7 = v25 + 1 - v18 < 0;
        v24 = v10;
        ++v25;
      }
      while ( (unsigned __int8)(v7 ^ v14) | v13 );
    }
  }
  return result;
}
// 10064374: using guessed type int dword_10064374;
// 100643DC: using guessed type int (__fastcall *IDA_floor_draw_)(_DWORD, _DWORD);
// 10064404: using guessed type int IDA__square_length;
// 10064408: using guessed type int IDA__square_width;

//----- (1000DA50) --------------------------------------------------------
char sub_1000DA50()
{
  int v0; // eax
  void *v1; // ecx
  int v2; // eax
  _DWORD *v4; // edi
  int v5; // edx
  int v6; // ebx
  int **v7; // ebp
  int *i; // esi
  int v9; // ST04_4
  int v10; // eax
  int v11; // ST00_4
  int v12; // [esp+0h] [ebp-110h]
  int v13; // [esp+4h] [ebp-10Ch]
  int v14; // [esp+8h] [ebp-108h]
  int v15; // [esp+Ch] [ebp-104h]
  CHAR ReturnedString; // [esp+10h] [ebp-100h]

  F_GetPrivateProfileStringA("MAPS", "SCROLL_DIST_X", "480", &ReturnedString, 0xFFu);
  if ( !strncmp(&ReturnedString, "HALF_SCRN", 9u) )
    v0 = scr_width / 2 + 32;
  else
    v0 = j__atol(&ReturnedString);
  dword_1003B06C = v0;
  if ( v0 < 480 )
    dword_1003B06C = 480;
  F_GetPrivateProfileStringA("MAPS", "SCROLL_DIST_Y", "400", &ReturnedString, 0xFFu);
  if ( !strncmp(&ReturnedString, "HALF_SCRN", 9u) )
    v2 = newBytes / 2 + 24;
  else
    v2 = j__atol(&ReturnedString);
  dword_1003B070 = v2;
  if ( v2 < 400 )
    dword_1003B070 = 400;
  if ( !byte_10064470 || *(_DWORD *)IDA__display_win == -1 )
    return 0;
  v4 = (_DWORD *)sub_1000EF10(v1);
  if ( !v4 )
    return 0;
  v15 = *(_DWORD *)IDA__tile_center_tile;
  v5 = *(_DWORD *)IDA__scroll_blocking_on;
  *(_DWORD *)IDA__scroll_blocking_on = 0;
  v13 = 0;
  v12 = 0;
  v14 = v5;
  sub_1000A650(&v13, &v12);
  v6 = v13;
  v7 = (int **)&unk_100642C8;
  do
  {
    sub_1000A6A0((int *)v7 - 20, v6, v12);
    for ( i = *v7; i; i = (int *)i[20] )
      sub_1000A6A0(i, v6, v12);
    v7 += 21;
  }
  while ( (signed int)v7 < (signed int)&IDA_op_sub__3rdCall );
  *(_DWORD *)IDA__display_buf = v4[11];
  *(_DWORD *)IDA__buf = v4[11];
  *(_DWORD *)IDA__buf_width_2 = v4[6];
  *(_DWORD *)IDA__buf_length_2 = v4[7];
  *(_DWORD *)IDA__buf_full_2 = v4[6];
  sub_10001000((_DWORD *)IDA__map_display_rect, v4 + 2);
  sub_10001000((_DWORD *)IDA__buf_rect_2, v4 + 2);
  *(_DWORD *)IDA__display_buffer = v4[11];
  *(_DWORD *)IDA__display_width = v4[6];
  *(_DWORD *)IDA__display_height = v4[7];
  *(_DWORD *)IDA__buf_width = v4[6];
  *(_DWORD *)IDA__buf_length = v4[7];
  *(_DWORD *)IDA__buf_full = v4[6];
  *(_DWORD *)IDA__back_buf = v4[11];
  sub_10001000((_DWORD *)IDA__buf_rect, v4 + 2);
  *(_DWORD *)IDA__buf_size = v4[6] * v4[7];
  v9 = v15;
  *(_DWORD *)IDA__scroll_blocking_on = v14;
  v10 = sub_1000D380(v9, 1);
  v11 = *(_DWORD *)IDA__display_win;
  sub_1000EFA0(v10);
  return 1;
}
// 1003B06C: using guessed type int dword_1003B06C;
// 1003B070: using guessed type int dword_1003B070;
// 1003D0E8: using guessed type int IDA__tile_center_tile;
// 10064374: using guessed type int dword_10064374;
// 10064378: using guessed type int IDA__scroll_blocking_on;
// 100643C4: using guessed type int IDA_op_sub__3rdCall;
// 10064420: using guessed type int IDA__display_buf;
// 10064424: using guessed type int IDA__map_display_rect;
// 10064428: using guessed type int IDA__buf;
// 1006442C: using guessed type int IDA__buf_width_2;
// 10064430: using guessed type int IDA__buf_length_2;
// 10064434: using guessed type int IDA__buf_full_2;
// 10064438: using guessed type int IDA__buf_rect_2;
// 1006443C: using guessed type int IDA__display_buffer;
// 10064440: using guessed type int IDA__display_width;
// 10064444: using guessed type int IDA__display_height;
// 10064448: using guessed type int IDA__back_buf;
// 1006444C: using guessed type int IDA__buf_width;
// 10064450: using guessed type int IDA__buf_length;
// 10064454: using guessed type int IDA__buf_full;
// 10064458: using guessed type int IDA__buf_rect;
// 1006445C: using guessed type int IDA__buf_size;
// 10064470: using guessed type char byte_10064470;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000DCD0) --------------------------------------------------------
int __cdecl FOW_sub_1000DCD0(int *a1, int a2)
{
  int v2; // ecx
  int v3; // ebx
  int v4; // esi
  int v5; // edi
  int *v6; // esi
  int v7; // eax
  signed int v8; // eax
  int v9; // ecx
  int v10; // eax
  int v11; // eax
  int v12; // ST1C_4
  int v13; // ecx
  int v14; // eax
  int *v15; // esi
  int v16; // edi
  int v17; // eax
  int v18; // ecx
  signed int v19; // eax
  int v20; // ecx
  int v21; // ecx
  int v22; // eax
  int v23; // eax
  int v25; // ST18_4
  int v26; // [esp+14h] [ebp-14h]
  int v27; // [esp+18h] [ebp-10h]
  int v28; // [esp+1Ch] [ebp-Ch]
  int v29; // [esp+20h] [ebp-8h]

  v2 = IDA__grid_size;
  v3 = *(_DWORD *)IDA__ambient_light;
  v4 = 0;
  FOW_dword_10064418 = 0;
  v27 = v3;
  v28 = 0;
  v29 = 0;
  if ( *(_DWORD *)IDA__grid_size > 0 )
  {
    while ( 1 )
    {
      v5 = 0;
      if ( IDA_light_get_tile_ )
        v5 = IDA_light_get_tile_(v2, v29);
      if ( v5 < v3 )
        v5 = v3;
      v6 = *(int **)(IDA__objectTable + 4 * v4);
      if ( v6 )
        break;
LABEL_29:
      v3 = v27;
      v4 = v29++ + 1;
      if ( v29 >= *(_DWORD *)IDA__grid_size )
        goto LABEL_30;
    }
    while ( 1 )
    {
      v7 = *v6;
      v2 = *(_DWORD *)(*v6 + 40);
      if ( v2 > a2 )
        goto LABEL_29;
      if ( v2 == a2 )
      {
        v2 = *(_DWORD *)(v7 + 36);
        if ( !(v2 & 8) )
        {
          FOW_dword_1003D160[v28++] = (int)v6;
          goto LABEL_29;
        }
        if ( !(v2 & 1) )
          break;
      }
LABEL_23:
      v6 = (int *)v6[1];
      if ( !v6 )
        goto LABEL_29;
    }
    v8 = sub_1000C2D0(v7);
    if ( v8 )
    {
      if ( v8 != 1 )
      {
LABEL_16:
        v2 = *v6;
        v10 = *(_DWORD *)(*v6 + 116);
        if ( v10 & 0xFFFFFF && v10 >= 0 && (!FOWEnable || !*(_DWORD *)(v2 + 80) || !(v10 & 0x20)) )
        {
          v11 = FOW_dword_10064418;
          if ( FOW_dword_10064418 < 500 )
          {
            FOW_dword_1003C908[FOW_dword_10064418] = v2;
            FOW_dword_10064418 = v11 + 1;
          }
        }
        goto LABEL_23;
      }
    }
    else if ( v5 >= FOWLightLevel && FOWLightLevel )
    {
      if ( IDA_obj_render_object_ )
        IDA_obj_render_object_(*v6, a1);
      goto LABEL_16;
    }
    v12 = *v6;
    if ( IDA_obj_render_object_ )
      IDA_obj_render_object_(v9, a1);
    goto LABEL_16;
  }
LABEL_30:
  sub_1000D870(a1, 0);
  v13 = v28;
  v14 = 0;
  v26 = 0;
  if ( v28 > 0 )
  {
    while ( 1 )
    {
      v15 = (int *)FOW_dword_1003D160[v14];
      v16 = 0;
      if ( v15 )
      {
        v13 = *v15;
        v29 = *(_DWORD *)(*v15 + 4);
      }
      if ( IDA_light_get_tile_ )
        v16 = IDA_light_get_tile_(v13, v29);
      if ( v16 < v3 )
        v16 = v3;
      if ( v15 )
        break;
LABEL_56:
      v13 = v28;
      v14 = v26++ + 1;
      if ( v26 >= v28 )
        return sub_1000D870(a1, 1);
      v3 = v27;
    }
    while ( 1 )
    {
      v17 = *v15;
      v18 = *(_DWORD *)(*v15 + 40);
      if ( v18 > a2 )
        goto LABEL_56;
      if ( v18 == a2 && !(*(_BYTE *)(v17 + 36) & 1) )
        break;
LABEL_55:
      v15 = (int *)v15[1];
      if ( !v15 )
        goto LABEL_56;
    }
    v19 = sub_1000C2D0(v17);
    if ( v19 )
    {
      if ( v19 != 1 )
      {
LABEL_48:
        v21 = *v15;
        v22 = *(_DWORD *)(*v15 + 116);
        if ( v22 & 0xFFFFFF && v22 >= 0 && (!FOWEnable || !*(_DWORD *)(v21 + 80) || !(v22 & 0x20)) )
        {
          v23 = FOW_dword_10064418;
          if ( FOW_dword_10064418 < 500 )
          {
            FOW_dword_1003C908[FOW_dword_10064418] = v21;
            FOW_dword_10064418 = v23 + 1;
          }
        }
        goto LABEL_55;
      }
    }
    else if ( v16 >= FOWLightLevel && FOWLightLevel )
    {
      if ( IDA_obj_render_object_ )
        IDA_obj_render_object_(*v15, a1);
      goto LABEL_48;
    }
    v25 = *v15;
    if ( IDA_obj_render_object_ )
      IDA_obj_render_object_(v20, a1);
    goto LABEL_48;
  }
  return sub_1000D870(a1, 1);
}
// 100643C8: invalid function type has been ignored
// 100643CC: invalid function type has been ignored
// 1003B068: using guessed type int FOWLightLevel;
// 1003D0DC: using guessed type int IDA__grid_size;
// 100643C8: using guessed type int (__fastcall *IDA_light_get_tile_)(_DWORD, _DWORD);
// 100643CC: using guessed type int (__fastcall *IDA_obj_render_object_)(_DWORD, _DWORD);
// 100643F8: using guessed type int FOWEnable;
// 1006440C: using guessed type int IDA__ambient_light;
// 10064414: using guessed type int IDA__objectTable;
// 10064418: using guessed type int FOW_dword_10064418;

//----- (1000E060) --------------------------------------------------------
int __thiscall sub_1000E060(void *this)
{
  return IDA_message_exit_(this);
}
// 10064498: invalid function type has been ignored
// 10064498: using guessed type int (__cdecl *IDA_message_exit_)(_DWORD);

//----- (1000E0A0) --------------------------------------------------------
int __cdecl sub_1000E0A0(int a1, int a2)
{
  int v2; // ecx

  return IDA_message_load_(v2, a2, v2);
}
// 100644A0: invalid function type has been ignored
// 100644A0: using guessed type int (__fastcall *IDA_message_load_)(_DWORD, _DWORD, _DWORD);

//----- (1000E0C0) --------------------------------------------------------
int __cdecl sub_1000E0C0(int *a1, unsigned int a2)
{
  int v2; // eax
  int v4; // edi
  int v5; // ecx
  int v6; // esi
  int v7; // eax
  unsigned int v8; // edx

  if ( !a1 )
    return 0;
  v2 = *a1;
  if ( *a1 <= 0 )
    return 0;
  v4 = a1[1];
  v5 = v2 - 1;
  v6 = 0;
  if ( v2 - 1 < 0 )
    return 0;
  while ( 1 )
  {
    v7 = (v6 + v5) / 2;
    v8 = *(_DWORD *)(v4 + 12 * v7);
    if ( a2 <= v8 )
      break;
    v6 = v7 + 1;
LABEL_9:
    if ( v6 > v5 )
      return 0;
  }
  if ( a2 < v8 )
  {
    v5 = v7 - 1;
    goto LABEL_9;
  }
  return v4 + 12 * v7;
}

//----- (1000E120) --------------------------------------------------------
const char *__cdecl sub_1000E120(int *a1, unsigned int a2, int a3)
{
  int v3; // eax
  const char *result; // eax

  v3 = sub_1000E0C0(a1, a2);
  if ( !v3 )
    goto LABEL_9;
  if ( a3 == 2 )
    return *(const char **)(v3 + 8);
  if ( a3 == 1 )
    result = *(const char **)(v3 + 4);
  else
LABEL_9:
    result = "Error";
  return result;
}

//----- (1000E160) --------------------------------------------------------
int F_initFunc5()
{
  int result; // eax

  IDA_message_exit_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4680468);
  IDA_message_save_ = F_ptrCorrection_(4680580);
  IDA_message_load_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4680788);
  result = F_ptrCorrection_(6696296);
  IDA__proto_msg_files = result;
  return result;
}
// 10064498: using guessed type int (__cdecl *IDA_message_exit_)(_DWORD);
// 1006449C: using guessed type int IDA_message_save_;
// 100644A0: using guessed type int (__fastcall *IDA_message_load_)(_DWORD, _DWORD, _DWORD);
// 100644A4: using guessed type int IDA__proto_msg_files;

//----- (1000E220) --------------------------------------------------------
int __cdecl sub_1000E220(int a1, int a2)
{
  int v2; // ecx

  return IDA_proto_ptr_(v2, a2, 0);
}
// 100644B8: invalid function type has been ignored
// 100644B8: using guessed type int (__fastcall *IDA_proto_ptr_)(_DWORD, _DWORD, _DWORD);

//----- (1000E280) --------------------------------------------------------
int sub_1000E280()
{
  int result; // eax

  if ( IDA_register_clear_ )
    result = IDA_register_clear_(0);
  else
    result = -1;
  return result;
}
// 100644C0: invalid function type has been ignored
// 100644C0: using guessed type int (__cdecl *IDA_register_clear_)(_DWORD);

//----- (1000E2B0) --------------------------------------------------------
int __cdecl sub_1000E2B0(int a1, int a2, int a3, int a4)
{
  int result; // eax

  if ( IDA_obj_move_to_tile_ )
    result = IDA_obj_move_to_tile_(a4, a2);
  else
    result = -1;
  return result;
}
// 100644C8: invalid function type has been ignored
// 100644C8: using guessed type int (__fastcall *IDA_obj_move_to_tile_)(_DWORD, _DWORD);

//----- (1000E2F0) --------------------------------------------------------
int __cdecl sub_1000E2F0(int a1, int a2)
{
  int v2; // ecx
  int result; // eax

  if ( IDA_obj_erase_object_ )
    result = IDA_obj_erase_object_(v2, a2, 0);
  else
    result = -1;
  return result;
}
// 100644CC: invalid function type has been ignored
// 100644CC: using guessed type int (__fastcall *IDA_obj_erase_object_)(_DWORD, _DWORD, _DWORD);

//----- (1000E330) --------------------------------------------------------
int __cdecl sub_1000E330(int a1, int a2)
{
  int v2; // ecx
  int result; // eax

  if ( IDA_obj_new_ )
    result = IDA_obj_new_(v2, a2);
  else
    result = -1;
  return result;
}
// 100644C4: invalid function type has been ignored
// 100644C4: using guessed type int (__fastcall *IDA_obj_new_)(_DWORD, _DWORD);

//----- (1000E370) --------------------------------------------------------
int F_initFunc7()
{
  int result; // eax

  IDA__obj_mouse = F_ptrCorrection_(5853740);
  IDA__obj_mouse_flat = F_ptrCorrection_(5853744);
  IDA_proto_max_id_ = F_ptrCorrection_(4786696);
  IDA_proto_ptr_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4786508);
  IDA_object_under_mouse_ = F_ptrCorrection_(4476344);
  IDA__protolists__plus12 = F_ptrCorrection_(5272908);
  IDA_register_clear_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4273928);
  IDA_obj_new_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4701448);
  IDA_obj_move_to_tile_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4703928);
  IDA_obj_erase_object_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4706676);
  result = F_ptrCorrection_(4704948);
  IDA_obj_change_fid_ = result;
  return result;
}
// 100644A8: using guessed type int IDA__protolists__plus12;
// 100644AC: using guessed type int IDA__obj_mouse;
// 100644B0: using guessed type int IDA__obj_mouse_flat;
// 100644B4: using guessed type int IDA_proto_max_id_;
// 100644B8: using guessed type int (__fastcall *IDA_proto_ptr_)(_DWORD, _DWORD, _DWORD);
// 100644BC: using guessed type int IDA_object_under_mouse_;
// 100644C0: using guessed type int (__cdecl *IDA_register_clear_)(_DWORD);
// 100644C4: using guessed type int (__fastcall *IDA_obj_new_)(_DWORD, _DWORD);
// 100644C8: using guessed type int (__fastcall *IDA_obj_move_to_tile_)(_DWORD, _DWORD);
// 100644CC: using guessed type int (__fastcall *IDA_obj_erase_object_)(_DWORD, _DWORD, _DWORD);
// 100644D0: using guessed type int IDA_obj_change_fid_;

//----- (1000E420) --------------------------------------------------------
int __cdecl sub_1000E420(int a1, int a2)
{
  int v2; // ecx
  int result; // eax

  if ( IDA_obj_sid_ )
    result = IDA_obj_sid_(v2, a2, -1);
  else
    result = -1;
  return result;
}
// 100644FC: invalid function type has been ignored
// 100644FC: using guessed type int (__fastcall *IDA_obj_sid_)(_DWORD, _DWORD, _DWORD);

//----- (1000E460) --------------------------------------------------------
int __cdecl sub_1000E460(int a1, int a2)
{
  int v2; // ecx
  int result; // eax

  if ( IDA_scr_ptr_ )
    result = IDA_scr_ptr_(v2, a2, -1);
  else
    result = -1;
  return result;
}
// 100644F8: invalid function type has been ignored
// 100644F8: using guessed type int (__fastcall *IDA_scr_ptr_)(_DWORD, _DWORD, _DWORD);

//----- (1000E530) --------------------------------------------------------
int F_initFunc8()
{
  int result; // eax

  IDA_obj_sid_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4760576);
  IDA_scr_ptr_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4801656);
  IDA_scr_set_dude_script_ = F_ptrCorrection_(4797880);
  IDA_scr_clear_dude_script_ = F_ptrCorrection_(4798060);
  IDA_scr_init_ = F_ptrCorrection_(4798160);
  IDA_scr_reset_ = F_ptrCorrection_(4798268);
  IDA_scr_exit_ = F_ptrCorrection_(4798624);
  IDA_scr_game_init_ = F_ptrCorrection_(4798292);
  IDA_scr_game_reset_ = F_ptrCorrection_(4798564);
  IDA_scr_game_exit_ = F_ptrCorrection_(4798820);
  result = F_ptrCorrection_(4798716);
  IDA_scr_message_free_ = result;
  return result;
}
// 100644D4: using guessed type int IDA_scr_set_dude_script_;
// 100644D8: using guessed type int IDA_scr_clear_dude_script_;
// 100644DC: using guessed type int IDA_scr_init_;
// 100644E0: using guessed type int IDA_scr_reset_;
// 100644E4: using guessed type int IDA_scr_exit_;
// 100644E8: using guessed type int IDA_scr_game_init_;
// 100644EC: using guessed type int IDA_scr_game_reset_;
// 100644F0: using guessed type int IDA_scr_game_exit_;
// 100644F4: using guessed type int IDA_scr_message_free_;
// 100644F8: using guessed type int (__fastcall *IDA_scr_ptr_)(_DWORD, _DWORD, _DWORD);
// 100644FC: using guessed type int (__fastcall *IDA_obj_sid_)(_DWORD, _DWORD, _DWORD);

//----- (1000E5E0) --------------------------------------------------------
int sub_1000E5E0()
{
  return IDA_text_font_();
}
// 10064500: invalid function type has been ignored
// 10064500: using guessed type int (*IDA_text_font_)(void);

//----- (1000E5F0) --------------------------------------------------------
int sub_1000E5F0()
{
  return *(_DWORD *)IDA__curr_font_num;
}
// 10064504: using guessed type int IDA__curr_font_num;

//----- (1000E600) --------------------------------------------------------
int __cdecl sub_1000E600(int a1, int a2, int a3, int a4, unsigned __int8 a5)
{
  return (*(int (__fastcall **)(int, int, _DWORD))IDA__text_to_buf)(a4, a2, a5);
}
// 10064508: using guessed type int IDA__text_to_buf;

//----- (1000E630) --------------------------------------------------------
int __cdecl sub_1000E630(int a1, int a2, int a3, int a4, int a5, int a6, unsigned __int8 a7)
{
  return (*(int (__fastcall **)(int, int, _DWORD))IDA__text_to_buf)(a6, a2, a7);
}
// 10064508: using guessed type int IDA__text_to_buf;

//----- (1000E670) --------------------------------------------------------
int __thiscall sub_1000E670(void *this)
{
  return (*(int (__cdecl **)(void *))IDA__text_height)(this);
}
// 1006450C: using guessed type int IDA__text_height;

//----- (1000E690) --------------------------------------------------------
int sub_1000E690()
{
  return (*(int (**)(void))IDA__text_width)();
}
// 10064510: using guessed type int IDA__text_width;

//----- (1000E730) --------------------------------------------------------
int sub_1000E730()
{
  return (*(int (__cdecl **)(_DWORD))IDA__text_max)(0);
}
// 10064524: using guessed type int IDA__text_max;

//----- (1000E750) --------------------------------------------------------
int F_initFunc4()
{
  int result; // eax

  IDA_text_font_ = (int (*)(void))F_ptrCorrection_(4988620);
  IDA__curr_font_num = F_ptrCorrection_(5481204);
  IDA__text_to_buf = F_ptrCorrection_(5481212);
  IDA__text_height = F_ptrCorrection_(5481216);
  IDA__text_width = F_ptrCorrection_(5481220);
  IDA__text_char_width = F_ptrCorrection_(5481224);
  IDA__text_mono_width = F_ptrCorrection_(5481228);
  IDA__text_spacing = F_ptrCorrection_(5481232);
  IDA__text_size = F_ptrCorrection_(5481236);
  result = F_ptrCorrection_(5481240);
  IDA__text_max = result;
  return result;
}
// 10064500: using guessed type int (*IDA_text_font_)(void);
// 10064504: using guessed type int IDA__curr_font_num;
// 10064508: using guessed type int IDA__text_to_buf;
// 1006450C: using guessed type int IDA__text_height;
// 10064510: using guessed type int IDA__text_width;
// 10064514: using guessed type int IDA__text_char_width;
// 10064518: using guessed type int IDA__text_mono_width;
// 1006451C: using guessed type int IDA__text_spacing;
// 10064520: using guessed type int IDA__text_size;
// 10064524: using guessed type int IDA__text_max;

//----- (1000E7F0) --------------------------------------------------------
int __cdecl sub_1000E7F0(_BYTE *a1, int a2)
{
  _BYTE *v2; // ebx
  int v3; // edi
  char v4; // al
  int result; // eax
  int v6; // [esp+Ch] [ebp-10h]
  signed int v7; // [esp+14h] [ebp-8h]
  int v8; // [esp+18h] [ebp-4h]

  v2 = a1;
  v3 = 0;
  v8 = 0;
  v7 = 0;
  v6 = (*(int (**)(void))IDA__text_spacing)();
  if ( !*a1 )
    return v8;
  while ( 1 )
  {
    if ( *v2 == 32 )
      v7 = 0;
    else
      ++v7;
    v3 += v6 + (*(int (**)(void))IDA__text_char_width)();
    if ( v3 > a2 )
      break;
    v4 = (v2++)[1];
    ++v8;
    if ( !v4 )
      return v8;
  }
  result = v8;
  if ( v7 > 1 && v7 - 1 != v8 )
    result = v8 - v7 + 1;
  return result;
}
// 10064514: using guessed type int IDA__text_char_width;
// 1006451C: using guessed type int IDA__text_spacing;

//----- (1000E930) --------------------------------------------------------
int __cdecl sub_1000E930(_BYTE *a1, int a2)
{
  _BYTE *v2; // edi
  int v3; // ebx
  char v4; // al
  int result; // eax
  int v6; // esi
  int v7; // [esp+Ch] [ebp-10h]
  signed int v8; // [esp+14h] [ebp-8h]
  int v9; // [esp+18h] [ebp-4h]

  v2 = a1;
  v3 = 0;
  v9 = 0;
  v8 = 0;
  v7 = (*(int (**)(void))IDA__text_spacing)();
  v4 = *a1;
  if ( !*a1 )
    return 0;
  while ( 1 )
  {
    if ( v4 == 32 || v4 == 10 )
      v8 = 0;
    else
      ++v8;
    v3 += v7 + (*(int (__cdecl **)(_DWORD))IDA__text_char_width)(0);
    if ( *v2 != 10 )
      break;
    a2 = v3;
LABEL_11:
    v4 = v2[1];
    v6 = v9 + 1;
    ++v2;
    ++v9;
    if ( !v4 )
      return v6;
  }
  if ( v3 <= a2 )
    goto LABEL_11;
  result = v9;
  if ( v8 > 1 )
    result = v9 - v8 + 1;
  return result;
}
// 10064514: using guessed type int IDA__text_char_width;
// 1006451C: using guessed type int IDA__text_spacing;

//----- (1000EA90) --------------------------------------------------------
int __cdecl sub_1000EA90(int a1, int a2, int a3, int a4, int a5, unsigned __int8 a6)
{
  void *v6; // ecx
  int result; // eax
  _DWORD *v8; // esi
  int v9; // edi
  int v10; // eax
  int v11; // edx
  int v12; // ecx
  int v13; // eax
  int v14; // ST18_4

  result = sub_1000EF10(v6);
  v8 = (_DWORD *)result;
  if ( result )
  {
    v9 = a4;
    if ( a4 >= 0 )
    {
      v10 = *(_DWORD *)(result + 24);
      if ( a4 > v10 )
        v9 = v10 - 1;
    }
    else
    {
      v9 = 0;
    }
    v8[6];
    v11 = (*(int (**)(void))IDA__text_height)();
    v12 = a5;
    v13 = v8[7];
    if ( v11 + a5 > v13 )
      v12 = v13 - v11;
    if ( v12 < 0 )
      v12 = 0;
    v14 = v9 + v8[11] + v12 * v8[6];
    result = (*(int (__fastcall **)(_DWORD, int, _DWORD))IDA__text_to_buf)(v8[6], a2, a6);
  }
  return result;
}
// 10064508: using guessed type int IDA__text_to_buf;
// 1006450C: using guessed type int IDA__text_height;

//----- (1000EB70) --------------------------------------------------------
int __cdecl sub_1000EB70(int a1, int a2)
{
  int v2; // ecx

  return IDA_mouse_set_position_(v2, a2);
}
// 100645FC: invalid function type has been ignored
// 100645FC: using guessed type int (__fastcall *IDA_mouse_set_position_)(_DWORD, _DWORD);

//----- (1000EBA0) --------------------------------------------------------
int sub_1000EBA0()
{
  return IDA_GNW_add_input_buffer_();
}
// 1006462C: invalid function type has been ignored
// 1006462C: using guessed type int (*IDA_GNW_add_input_buffer_)(void);

//----- (1000EBB0) --------------------------------------------------------
bool sub_1000EBB0()
{
  return *(_DWORD *)IDA__game_user_wants_to_quit != 0;
}
// 10064628: using guessed type int IDA__game_user_wants_to_quit;

//----- (1000EBC0) --------------------------------------------------------
int sub_1000EBC0()
{
  return IDA_palette_init__3rdCall();
}
// 10064620: invalid function type has been ignored
// 10064620: using guessed type int (*IDA_palette_init__3rdCall)(void);

//----- (1000EBD0) --------------------------------------------------------
#error "1000EBF1: positive sp value has been found (funcsize=9)"

//----- (1000EC30) --------------------------------------------------------
int __cdecl sub_1000EC30(int a1, int a2)
{
  int v2; // ecx

  return IDA_GNW_win_refresh_(v2, a2);
}
// 1006455C: invalid function type has been ignored
// 1006455C: using guessed type int (__fastcall *IDA_GNW_win_refresh_)(_DWORD, _DWORD);

//----- (1000ECB0) --------------------------------------------------------
#error "1000ECB6: call analysis failed (funcsize=6)"

//----- (1000ECC0) --------------------------------------------------------
int __cdecl sub_1000ECC0(int a1, _DWORD *a2)
{
  int v3; // [esp+0h] [ebp-10h]
  int v4; // [esp+4h] [ebp-Ch]
  int v5; // [esp+8h] [ebp-8h]
  int v6; // [esp+Ch] [ebp-4h]

  sub_10001000(&v3, a2);
  return IDA_win_refresh_all_(
           *(_DWORD *)(a1 + 8) + v3,
           *(_DWORD *)(a1 + 12) + v4,
           *(_DWORD *)(a1 + 8) + v5,
           *(_DWORD *)(a1 + 12) + v6);
}
// 10064580: using guessed type int (__cdecl *IDA_win_refresh_all_)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (1000ED10) --------------------------------------------------------
void __cdecl sub_1000ED10(int a1, int a2, int a3, int a4, char a5)
{
  int v5; // ecx
  int v6; // ebx
  int i; // eax

  if ( colour_bits == 8 && a3 > 0 )
  {
    v5 = a1;
    v6 = a3;
    do
    {
      for ( i = 0; i < a2; ++i )
      {
        if ( *(_BYTE *)(i + v5) > 0xFEu )
          *(_BYTE *)(i + v5) = a5;
      }
      v5 += a4;
      --v6;
    }
    while ( v6 );
  }
}

//----- (1000ED60) --------------------------------------------------------
char __cdecl sub_1000ED60(int a1)
{
  char result; // al
  unsigned __int8 *v2; // ebp
  unsigned __int8 v3; // al
  unsigned __int8 v4; // cl
  int v5; // ebx
  int v6; // edi
  unsigned __int8 v7; // cl
  signed int v8; // eax
  signed int v9; // eax
  unsigned __int8 v10; // [esp+0h] [ebp-14h]
  unsigned __int8 v11; // [esp+1h] [ebp-13h]
  unsigned __int8 v12; // [esp+2h] [ebp-12h]
  char v13; // [esp+3h] [ebp-11h]
  signed int v14; // [esp+4h] [ebp-10h]
  signed int v15; // [esp+8h] [ebp-Ch]

  v15 = 256;
  if ( colour_bits == 8 )
    v15 = 255;
  v12 = 63;
  v11 = 63;
  result = 0;
  v13 = 0;
  v14 = 0;
  if ( v15 > 0 )
  {
    v2 = (unsigned __int8 *)(a1 + 1);
    do
    {
      v3 = v2[1];
      v4 = *v2;
      LOBYTE(v5) = *(v2 - 1);
      v10 = v2[1];
      if ( *v2 > v3 )
        v10 = *v2;
      if ( (unsigned __int8)v5 > v10 )
        v10 = *(v2 - 1);
      v6 = v4;
      v5 = (unsigned __int8)v5;
      v7 = abs(v3 - v4);
      v8 = abs(v3 - (unsigned __int8)v5);
      if ( v8 > v7 )
        v7 = v8;
      v9 = abs(v6 - v5);
      if ( v9 > v7 )
        v7 = v9;
      if ( v10 <= v12 && v7 <= v11 )
      {
        v12 = v10;
        v11 = v7;
        v13 = v14;
      }
      v2 += 3;
      ++v14;
    }
    while ( v14 < v15 );
    result = v13;
  }
  return result;
}

//----- (1000EE60) --------------------------------------------------------
int __thiscall sub_1000EE60(void *this)
{
  return IDA_loadColorTable_(this);
}
// 10064548: invalid function type has been ignored
// 10064548: using guessed type int (__cdecl *IDA_loadColorTable_)(_DWORD);

//----- (1000EE80) --------------------------------------------------------
int sub_1000EE80()
{
  return IDA_palette_set_to_();
}
// 10064598: invalid function type has been ignored
// 10064598: using guessed type int (*IDA_palette_set_to_)(void);

//----- (1000EE90) --------------------------------------------------------
int sub_1000EE90()
{
  return IDA_palette_fade_to_();
}
// 10064578: invalid function type has been ignored
// 10064578: using guessed type int (*IDA_palette_fade_to_)(void);

//----- (1000EEA0) --------------------------------------------------------
bool sub_1000EEA0()
{
  return *(_DWORD *)IDA__mouse_is_hidden != 0;
}
// 100645F4: using guessed type int IDA__mouse_is_hidden;

//----- (1000EEB0) --------------------------------------------------------
int sub_1000EEB0()
{
  return *(_DWORD *)IDA__mouse_buttons;
}
// 10064530: using guessed type int IDA__mouse_buttons;

//----- (1000EEC0) --------------------------------------------------------
int __cdecl sub_1000EEC0(int a1, int a2)
{
  int v2; // ecx

  return IDA_mouse_get_position_(v2, a2);
}
// 10064574: invalid function type has been ignored
// 10064574: using guessed type int (__fastcall *IDA_mouse_get_position_)(_DWORD, _DWORD);

//----- (1000EEE0) --------------------------------------------------------
int __cdecl sub_1000EEE0(int a1, int a2, int a3, int a4)
{
  return IDA_mouse_click_in_(a4, a2);
}
// 100645F8: invalid function type has been ignored
// 100645F8: using guessed type int (__fastcall *IDA_mouse_click_in_)(_DWORD, _DWORD);

//----- (1000EF10) --------------------------------------------------------
int __thiscall sub_1000EF10(void *this)
{
  return IDA_GNW_find_(this);
}
// 10064594: using guessed type int (__cdecl *IDA_GNW_find_)(_DWORD);

//----- (1000EF30) --------------------------------------------------------
int __cdecl sub_1000EF30(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return IDA_win_add_(a4, a2, a5, a6);
}
// 100645A8: invalid function type has been ignored
// 100645A8: using guessed type int (__fastcall *IDA_win_add_)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (1000EF60) --------------------------------------------------------
int sub_1000EF60()
{
  return IDA_win_delete_();
}
// 10064588: invalid function type has been ignored
// 10064588: using guessed type int (*IDA_win_delete_)(void);

//----- (1000EF70) --------------------------------------------------------
int __thiscall sub_1000EF70(void *this)
{
  int result; // eax

  result = IDA_GNW_find_(this);
  if ( result )
    result = *(_DWORD *)(result + 44);
  return result;
}
// 10064594: using guessed type int (__cdecl *IDA_GNW_find_)(_DWORD);

//----- (1000EFA0) --------------------------------------------------------
int __usercall sub_1000EFA0@<eax>(int result@<eax>)
{
  if ( result != -1 )
    result = IDA_win_show_();
  return result;
}
// 10064584: invalid function type has been ignored
// 10064584: using guessed type int (*IDA_win_show_)(void);

//----- (1000EFC0) --------------------------------------------------------
int sub_1000EFC0()
{
  return IDA_win_hide_();
}
// 10064538: invalid function type has been ignored
// 10064538: using guessed type int (*IDA_win_hide_)(void);

//----- (1000EFD0) --------------------------------------------------------
int sub_1000EFD0()
{
  return IDA_win_draw_();
}
// 10064528: invalid function type has been ignored
// 10064528: using guessed type int (*IDA_win_draw_)(void);

//----- (1000EFE0) --------------------------------------------------------
int __cdecl sub_1000EFE0(int a1, int a2, int a3, int a4, int a5, int a6)
{
  return IDA_win_print_(a4, a2, a5, a6);
}
// 10064554: invalid function type has been ignored
// 10064554: using guessed type int (__fastcall *IDA_win_print_)(_DWORD, _DWORD, _DWORD, _DWORD);

//----- (1000F000) --------------------------------------------------------
int __cdecl sub_1000F000(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13)
{
  return IDA_win_register_button_(a4, a2, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}
// 10064560: invalid function type has been ignored
// 10064560: using guessed type int (__fastcall *IDA_win_register_button_)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (1000F040) --------------------------------------------------------
int __cdecl sub_1000F040(int a1, int a2, int a3, int a4, int a5)
{
  return IDA_win_register_button_func_(a4, a2, a5);
}
// 10064534: invalid function type has been ignored
// 10064534: using guessed type int (__fastcall *IDA_win_register_button_func_)(_DWORD, _DWORD, _DWORD);

//----- (1000F070) --------------------------------------------------------
int __cdecl sub_1000F070(int a1, int a2)
{
  int v2; // ecx

  return IDA_win_register_button_sound_func_(v2, a2);
}
// 100645A4: invalid function type has been ignored
// 100645A4: using guessed type int (__fastcall *IDA_win_register_button_sound_func_)(_DWORD, _DWORD);

//----- (1000F090) --------------------------------------------------------
int __thiscall sub_1000F090(void *this)
{
  return IDA_get_input_(this);
}
// 1006459C: invalid function type has been ignored
// 1006459C: using guessed type int (__cdecl *IDA_get_input_)(_DWORD);

//----- (1000F0B0) --------------------------------------------------------
int __cdecl sub_1000F0B0(int a1, int a2)
{
  int v2; // ecx

  return IDA_GNW_find_button_(v2, a2, v2);
}
// 1006456C: invalid function type has been ignored
// 1006456C: using guessed type int (__fastcall *IDA_GNW_find_button_)(_DWORD, _DWORD, _DWORD);

//----- (1000F0D0) --------------------------------------------------------
int __thiscall sub_1000F0D0(void *this)
{
  return IDA_gmouse_set_cursor_(this);
}
// 1006452C: invalid function type has been ignored
// 1006452C: using guessed type int (__cdecl *IDA_gmouse_set_cursor_)(_DWORD);

//----- (1000F110) --------------------------------------------------------
int __thiscall sub_1000F110(void *this)
{
  return IDA_gsound_play_sfx_file_(this);
}
// 10064570: invalid function type has been ignored
// 10064570: using guessed type int (__cdecl *IDA_gsound_play_sfx_file_)(_DWORD);

//----- (1000F170) --------------------------------------------------------
int sub_1000F170()
{
  return IDA_mem_malloc_(0);
}
// 10064604: invalid function type has been ignored
// 10064604: using guessed type int (__cdecl *IDA_mem_malloc_)(_DWORD);

//----- (1000F190) --------------------------------------------------------
int __cdecl sub_1000F190(int a1, int a2)
{
  int v2; // ecx

  return IDA_mem_realloc_(v2, a2);
}
// 10064608: invalid function type has been ignored
// 10064608: using guessed type int (__fastcall *IDA_mem_realloc_)(_DWORD, _DWORD);

//----- (1000F1C0) --------------------------------------------------------
int __usercall sub_1000F1C0@<eax>(int a1@<ebx>, int a2, int a3)
{
  _DWORD *v3; // eax
  int v4; // eax
  void *v5; // ecx
  void *v6; // ecx
  void *v7; // ecx
  void *v8; // ecx
  void *v9; // ecx
  void *v10; // ecx
  void *v11; // ecx
  int result; // eax
  signed int v13; // ecx
  int v14; // esi
  int *v15; // edx
  int v16; // eax
  int v17; // eax
  int v18; // eax
  int v19; // eax
  int v20; // eax
  int v21; // eax
  int v22; // eax

  v3 = *(_DWORD **)IDA__window;
  if ( *(_DWORD *)IDA__window )
  {
    v3[6] = scr_width;
    v3[7] = newBytes;
    v3[2] = 0;
    v3[3] = 0;
    v3[4] = scr_width - 1;
    v3[5] = newBytes - 1;
    v4 = *(_DWORD *)IDA__screen_buffer;
    *(_DWORD *)IDA__screen_buffer = IDA_mem_realloc_(IDA__screen_buffer, scr_width * newBytes);
  }
  sub_10012620();
  sub_10014140(v5, a1);
  sub_1000DA50();
  sub_10015160();
  sub_1000FF00(v6);
  sub_10016EF0();
  sub_10018450(v7);
  sub_10012C50(v8);
  sub_100105F0(v9);
  sub_10012080(v10, a1);
  sub_10011100(v11);
  sub_10017350();
  result = *(_DWORD *)IDA__num_windows;
  v13 = 1;
  if ( *(_DWORD *)IDA__num_windows > 1 )
  {
    v14 = IDA__window;
    while ( 1 )
    {
      v15 = *(int **)(v14 + 4 * v13);
      if ( !v15 )
        goto LABEL_35;
      v16 = *v15;
      if ( *v15 == -1
        || v16 == *(_DWORD *)IDA__display_win
        || v16 == *(_DWORD *)IDA__main_window
        || v16 == *(_DWORD *)IDA__endgame_window
        || v16 == *(_DWORD *)IDA__GNWWin
        || v16 == *(_DWORD *)IDA__interfaceWindow
        || v16 == dword_1003B118
        || v16 == dword_1003B11C
        || v16 == *(_DWORD *)IDA__bar_window
        || v16 == *(_DWORD *)IDA__skldxwin
        || v16 == *(_DWORD *)IDA__gOptionWin
        || v16 == *(_DWORD *)IDA__gReplyWin
        || v16 == *(_DWORD *)IDA__dialogueWindow )
      {
        goto LABEL_35;
      }
      if ( v15[6] <= 640 && scr_width != a2 )
      {
        v17 = a2 / 2 - scr_width / 2;
        *(_DWORD *)(*(_DWORD *)(v14 + 4 * v13) + 8) -= v17;
        *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 16) -= v17;
        v14 = IDA__window;
      }
      if ( *(_DWORD *)(*(_DWORD *)(v14 + 4 * v13) + 28) <= 480 && newBytes != a3 )
      {
        v18 = a3 / 2 - newBytes / 2;
        *(_DWORD *)(*(_DWORD *)(v14 + 4 * v13) + 12) -= v18;
        *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 20) -= v18;
        v14 = IDA__window;
      }
      v19 = *(_DWORD *)(v14 + 4 * v13);
      if ( *(_DWORD *)(v19 + 16) < scr_width )
      {
        if ( *(_DWORD *)(v19 + 8) >= 0 )
          goto LABEL_30;
        *(_DWORD *)(v19 + 8) = 0;
        *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 16) = *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 24)
                                                             + *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 8)
                                                             - 1;
      }
      else
      {
        v20 = *(_DWORD *)(v19 + 16) - scr_width;
        *(_DWORD *)(*(_DWORD *)(v14 + 4 * v13) + 8) -= v20;
        *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 16) -= v20;
      }
      v14 = IDA__window;
LABEL_30:
      v21 = *(_DWORD *)(v14 + 4 * v13);
      if ( *(_DWORD *)(v21 + 20) >= newBytes )
      {
        v22 = *(_DWORD *)(v21 + 20) - newBytes;
        *(_DWORD *)(*(_DWORD *)(v14 + 4 * v13) + 12) -= v22;
        *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 20) -= v22;
LABEL_34:
        v14 = IDA__window;
        goto LABEL_35;
      }
      if ( *(_DWORD *)(v21 + 12) < 0 )
      {
        *(_DWORD *)(v21 + 12) = 0;
        *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 20) = *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 28)
                                                             + *(_DWORD *)(*(_DWORD *)(IDA__window + 4 * v13) + 12)
                                                             - 1;
        goto LABEL_34;
      }
LABEL_35:
      result = IDA__num_windows;
      if ( ++v13 >= *(_DWORD *)IDA__num_windows )
      {
        byte_10064624 = 1;
        return result;
      }
    }
  }
  byte_10064624 = 1;
  return result;
}
// 1003B118: using guessed type int dword_1003B118;
// 1003B11C: using guessed type int dword_1003B11C;
// 1006453C: using guessed type int IDA__num_windows;
// 1006458C: using guessed type int IDA__GNWWin;
// 100645A0: using guessed type int IDA__window;
// 100645BC: using guessed type int IDA__gReplyWin;
// 100645C0: using guessed type int IDA__gOptionWin;
// 100645C4: using guessed type int IDA__dialogueWindow;
// 100645CC: using guessed type int IDA__endgame_window;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 100645D4: using guessed type int IDA__bar_window;
// 100645D8: using guessed type int IDA__skldxwin;
// 100645E0: using guessed type int IDA__main_window;
// 100645EC: using guessed type int IDA__display_win;
// 10064608: using guessed type int (__fastcall *IDA_mem_realloc_)(_DWORD, _DWORD);
// 10064624: using guessed type char byte_10064624;

//----- (1000F4B0) --------------------------------------------------------
int F_initFunc6_fadeTimeMod2()
{
  int result; // eax

  IDA_win_add_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD))F_ptrCorrection_(4991016);
  IDA_win_delete_ = (int (*)(void))F_ptrCorrection_(4991572);
  IDA_win_draw_ = (int (*)(void))F_ptrCorrection_(4994376);
  IDA_win_show_ = (int (*)(void))F_ptrCorrection_(4993944);
  IDA_win_hide_ = (int (*)(void))F_ptrCorrection_(4994128);
  IDA_GNW_find_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4996720);
  IDA_win_print_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD))F_ptrCorrection_(4992568);
  IDA_win_refresh_all_ = (int (__cdecl *)(_DWORD, _DWORD, _DWORD, _DWORD))F_ptrCorrection_(4995972);
  IDA_win_get_top_win_ = F_ptrCorrection_(4996788);
  IDA_refresh_game_ = F_ptrCorrection_(4843228);
  IDA_GNW_win_refresh_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4994500);
  IDA_win_register_button_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD))F_ptrCorrection_(4999248);
  IDA_win_register_button_func_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(5000512);
  IDA_win_register_button_sound_func_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(5000672);
  IDA_get_input_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4929784);
  IDA_GNW_find_button_ = (int (__fastcall *)(_DWORD, _DWORD, _DWORD))F_ptrCorrection_(4997060);
  IDA_gsound_play_sfx_file_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4495156);
  IDA_dialog_out_ = F_ptrCorrection_(4308976);
  IDA_mouse_show_ = (int (*)(void))F_ptrCorrection_(4935864);
  IDA_mouse_hide_ = (int (*)(void))F_ptrCorrection_(4936352);
  IDA__mouse_is_hidden = F_ptrCorrection_(6758200);
  IDA__mouse_buttons = F_ptrCorrection_(6758232);
  IDA_mouse_get_position_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4937624);
  IDA_mouse_click_in_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4937456);
  IDA_mouse_get_rect_ = F_ptrCorrection_(4937564);
  IDA_gmouse_set_cursor_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4474676);
  IDA_gmouse_3d_set_fid_ = F_ptrCorrection_(4475632);
  IDA_gmouse_get_cursor_ = F_ptrCorrection_(4475100);
  IDA_mem_malloc_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4911424);
  IDA_mem_realloc_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4911572);
  IDA_mem_free_ = F_ptrCorrection_(4911784);
  IDA__gCurrentFont = F_ptrCorrection_(5819436);
  IDA_loadColorTable_ = (int (__cdecl *)(_DWORD))F_ptrCorrection_(4983196);
  IDA_palette_set_to_ = (int (*)(void))F_ptrCorrection_(4740728);
  IDA_palette_fade_to_ = (int (*)(void))F_ptrCorrection_(4740612);
  IDA__black_palette = F_ptrCorrection_(6694208);
  IDA__cmap = F_ptrCorrection_(5480436);
  IDA__systemCmap = F_ptrCorrection_(6763232);
  IDA__edit_win = F_ptrCorrection_(5696660);
  IDA__select_window_id = F_ptrCorrection_(5274220);
  IDA__dialogueBackWindow = F_ptrCorrection_(5263648);
  IDA__gReplyWin = F_ptrCorrection_(5264016);
  IDA__gOptionWin = F_ptrCorrection_(5264020);
  IDA__dialogueWindow = F_ptrCorrection_(5263652);
  IDA__i_wid = F_ptrCorrection_(5885720);
  IDA__endgame_window = F_ptrCorrection_(5697248);
  IDA__interfaceWindow = F_ptrCorrection_(5265152);
  IDA__bar_window = F_ptrCorrection_(5265156);
  IDA__skldxwin = F_ptrCorrection_(6705576);
  IDA__lsgwin = F_ptrCorrection_(6368632);
  IDA__main_window = F_ptrCorrection_(5266296);
  IDA__GNWWin = F_ptrCorrection_(5266468);
  IDA__prfwin = F_ptrCorrection_(6692496);
  IDA__pip_win = F_ptrCorrection_(6696104);
  IDA__display_win = F_ptrCorrection_(6489064);
  IDA__world_win = F_ptrCorrection_(6754292);
  IDA__window = F_ptrCorrection_(6996488);
  IDA__num_windows = F_ptrCorrection_(6996692);
  IDA__screen_buffer = F_ptrCorrection_(5481280);
  IDA_palette_init_ = F_ptrCorrection_(4740400);
  IDA_palette_init__3rdCall = (int (*)(void))F_ptrCorrection_(4740476);
  if ( F_GetPrivateProfileIntA("OTHER_SETTINGS", "FADE_TIME_RECALCULATE_ON_FADE", 0) )
    fade_time_recalculate_on_fade = 1;
  F_writeMem8(4740613, 0x51u, 232);
  F_writeMem32(0x485606u, 1431787090, (int)sub_1000EBD0);
  IDA__game_user_wants_to_quit = F_ptrCorrection_(5263560);
  IDA_gmouse_3d_toggle_mode_ = F_ptrCorrection_(4475496);
  IDA_GNW_add_input_buffer_ = (int (*)(void))F_ptrCorrection_(4929924);
  IDA_mouse_set_position_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4937660);
  result = F_ptrCorrection_(4935196);
  IDA_mouse_set_shape_ = result;
  return result;
}
// 1000EBD0: using guessed type int sub_1000EBD0();
// 10064528: using guessed type int (*IDA_win_draw_)(void);
// 1006452C: using guessed type int (__cdecl *IDA_gmouse_set_cursor_)(_DWORD);
// 10064530: using guessed type int IDA__mouse_buttons;
// 10064534: using guessed type int (__fastcall *IDA_win_register_button_func_)(_DWORD, _DWORD, _DWORD);
// 10064538: using guessed type int (*IDA_win_hide_)(void);
// 1006453C: using guessed type int IDA__num_windows;
// 10064540: using guessed type int IDA_gmouse_3d_toggle_mode_;
// 10064544: using guessed type int IDA_win_get_top_win_;
// 10064548: using guessed type int (__cdecl *IDA_loadColorTable_)(_DWORD);
// 1006454C: using guessed type int IDA_gmouse_get_cursor_;
// 10064550: using guessed type int (*IDA_mouse_show_)(void);
// 10064554: using guessed type int (__fastcall *IDA_win_print_)(_DWORD, _DWORD, _DWORD, _DWORD);
// 10064558: using guessed type int IDA_mouse_get_rect_;
// 1006455C: using guessed type int (__fastcall *IDA_GNW_win_refresh_)(_DWORD, _DWORD);
// 10064560: using guessed type int (__fastcall *IDA_win_register_button_)(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);
// 10064564: using guessed type int IDA__gCurrentFont;
// 10064568: using guessed type int IDA_refresh_game_;
// 1006456C: using guessed type int (__fastcall *IDA_GNW_find_button_)(_DWORD, _DWORD, _DWORD);
// 10064570: using guessed type int (__cdecl *IDA_gsound_play_sfx_file_)(_DWORD);
// 10064574: using guessed type int (__fastcall *IDA_mouse_get_position_)(_DWORD, _DWORD);
// 10064578: using guessed type int (*IDA_palette_fade_to_)(void);
// 1006457C: using guessed type int IDA_dialog_out_;
// 10064580: using guessed type int (__cdecl *IDA_win_refresh_all_)(_DWORD, _DWORD, _DWORD, _DWORD);
// 10064584: using guessed type int (*IDA_win_show_)(void);
// 10064588: using guessed type int (*IDA_win_delete_)(void);
// 1006458C: using guessed type int IDA__GNWWin;
// 10064590: using guessed type int (*IDA_mouse_hide_)(void);
// 10064594: using guessed type int (__cdecl *IDA_GNW_find_)(_DWORD);
// 10064598: using guessed type int (*IDA_palette_set_to_)(void);
// 1006459C: using guessed type int (__cdecl *IDA_get_input_)(_DWORD);
// 100645A0: using guessed type int IDA__window;
// 100645A4: using guessed type int (__fastcall *IDA_win_register_button_sound_func_)(_DWORD, _DWORD);
// 100645A8: using guessed type int (__fastcall *IDA_win_add_)(_DWORD, _DWORD, _DWORD, _DWORD);
// 100645B0: using guessed type int IDA__edit_win;
// 100645B4: using guessed type int IDA__select_window_id;
// 100645B8: using guessed type int IDA__dialogueBackWindow;
// 100645BC: using guessed type int IDA__gReplyWin;
// 100645C0: using guessed type int IDA__gOptionWin;
// 100645C4: using guessed type int IDA__dialogueWindow;
// 100645C8: using guessed type int IDA__i_wid;
// 100645CC: using guessed type int IDA__endgame_window;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 100645D4: using guessed type int IDA__bar_window;
// 100645D8: using guessed type int IDA__skldxwin;
// 100645DC: using guessed type int IDA__lsgwin;
// 100645E0: using guessed type int IDA__main_window;
// 100645E4: using guessed type int IDA__prfwin;
// 100645E8: using guessed type int IDA__pip_win;
// 100645EC: using guessed type int IDA__display_win;
// 100645F0: using guessed type int IDA__world_win;
// 100645F4: using guessed type int IDA__mouse_is_hidden;
// 100645F8: using guessed type int (__fastcall *IDA_mouse_click_in_)(_DWORD, _DWORD);
// 100645FC: using guessed type int (__fastcall *IDA_mouse_set_position_)(_DWORD, _DWORD);
// 10064600: using guessed type int IDA_gmouse_3d_set_fid_;
// 10064604: using guessed type int (__cdecl *IDA_mem_malloc_)(_DWORD);
// 10064608: using guessed type int (__fastcall *IDA_mem_realloc_)(_DWORD, _DWORD);
// 1006460C: using guessed type int IDA_mem_free_;
// 10064610: using guessed type int IDA__black_palette;
// 10064614: using guessed type int IDA__cmap;
// 10064618: using guessed type int IDA__systemCmap;
// 1006461C: using guessed type int IDA_palette_init_;
// 10064620: using guessed type int (*IDA_palette_init__3rdCall)(void);
// 10064628: using guessed type int IDA__game_user_wants_to_quit;
// 1006462C: using guessed type int (*IDA_GNW_add_input_buffer_)(void);
// 10064630: using guessed type int IDA_mouse_set_shape_;

//----- (1000F920) --------------------------------------------------------
char __cdecl sub_1000F920(unsigned int a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  int v4; // eax
  int v5; // eax
  char result; // al

  if ( *(_DWORD *)IDA__display_win != -1
    && *(_DWORD *)IDA__interfaceWindow != -1
    && (v4 = ((int (__cdecl *)())IDA_GNW_find_)()) != 0
    && !(*(_BYTE *)(v4 + 4) & 8)
    && (v5 = IDA_GNW_find_(*(_DWORD *)IDA__display_win)) != 0 )
  {
    *a3 = (*(_DWORD *)(v5 + 24) >> 1) - (a1 >> 1);
    *a4 = (*(_DWORD *)(v5 + 28) >> 1) - (a2 >> 1);
    result = 1;
  }
  else
  {
    *a3 = (scr_width >> 1) - (a1 >> 1);
    *a4 = (newBytes >> 1) - (a2 >> 1);
    result = 0;
  }
  return result;
}
// 10064594: using guessed type int (__cdecl *IDA_GNW_find_)(_DWORD);
// 100645D0: using guessed type int IDA__interfaceWindow;
// 100645EC: using guessed type int IDA__display_win;

//----- (1000F9D0) --------------------------------------------------------
int __cdecl sub_1000F9D0(int a1, _DWORD *a2)
{
  int v2; // eax
  int v3; // esi
  int v4; // ecx
  int v6; // [esp+8h] [ebp-18h]
  int v7; // [esp+Ch] [ebp-14h]
  int v8; // [esp+10h] [ebp-10h]
  int v9; // [esp+14h] [ebp-Ch]
  int v10; // [esp+18h] [ebp-8h]
  int v11; // [esp+1Ch] [ebp-4h]

  v2 = ((int (__cdecl *)())IDA_GNW_find_)();
  v11 = v2;
  v3 = v2;
  sub_10001000(&v6, a2);
  v6 += *(_DWORD *)(v3 + 8);
  v7 += *(_DWORD *)(v3 + 12);
  v4 = *(_DWORD *)(v3 + 8);
  v8 += v4;
  v9 += *(_DWORD *)(v3 + 12);
  v10 = (int)&v6;
  return IDA_GNW_win_refresh_(v4, &v6);
}
// 1006455C: using guessed type int (__fastcall *IDA_GNW_win_refresh_)(_DWORD, _DWORD);
// 10064594: using guessed type int (__cdecl *IDA_GNW_find_)(_DWORD);

//----- (1000FA50) --------------------------------------------------------
bool __cdecl sub_1000FA50(int *a1)
{
  int v2; // [esp+8h] [ebp-8h]
  int v3; // [esp+Ch] [ebp-4h]

  v3 = 0;
  v2 = 0;
  IDA_mouse_get_position_(&v3, &v2);
  return v3 >= *a1 && v3 <= a1[2] && v2 >= a1[1] && v2 <= a1[3];
}
// 10064574: using guessed type int (__fastcall *IDA_mouse_get_position_)(_DWORD, _DWORD);

//----- (1000FAA0) --------------------------------------------------------
int __cdecl sub_1000FAA0(_DWORD *a1, _DWORD *a2)
{
  int v2; // esi
  int result; // eax

  v2 = sub_1000EF10(*(void **)IDA__edit_win);
  sub_1000EEC0((int)a1, (int)a2);
  *a1 -= *(_DWORD *)(v2 + 8);
  result = *(_DWORD *)(v2 + 12);
  *a2 -= result;
  return result;
}
// 100645B0: using guessed type int IDA__edit_win;

//----- (1000FAE0) --------------------------------------------------------
int __usercall sub_1000FAE0@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edx>)
{
  return sub_1000FAA0(a1, a2);
}

//----- (1000FB50) --------------------------------------------------------
int __cdecl sub_1000FB50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39, int a40, int a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50, int a51, int a52, int a53, int a54, int a55, int a56, int a57, int a58, int a59, int a60, int a61, int a62, int a63)
{
  void *v129; // ecx
  int v130; // ST00_4
  int v131; // eax

  v130 = *(_DWORD *)IDA__edit_win;
  v131 = sub_1000EF10(v129);
  if ( v131 )
  {
    a128 += *(_DWORD *)(v131 + 8);
    a129 += *(_DWORD *)(v131 + 12);
  }
  return sub_1000E5F0();
}
// 1000FB50: too many input arguments, some ignored
// 100645B0: using guessed type int IDA__edit_win;

//----- (1000FB90) --------------------------------------------------------
int __cdecl sub_1000FB90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, int a24, int a25, int a26, int a27, int a28, int a29, int a30, int a31, int a32, int a33, int a34, int a35, int a36, int a37, int a38, int a39, int a40, int a41, int a42, int a43, int a44, int a45, int a46, int a47, int a48, int a49, int a50, int a51, int a52, int a53, int a54, int a55, int a56, int a57, int a58, int a59, int a60, int a61, int a62, int a63)
{
  void *v152; // ecx
  int v153; // ST00_4
  int v154; // eax

  v153 = *(_DWORD *)IDA__edit_win;
  v154 = sub_1000EF10(v152);
  if ( v154 )
  {
    a151 += *(_DWORD *)(v154 + 8);
    a152 += *(_DWORD *)(v154 + 12);
  }
  return sub_1000E5F0();
}
// 1000FB90: too many input arguments, some ignored
// 100645B0: using guessed type int IDA__edit_win;

//----- (1000FBD0) --------------------------------------------------------
int F_initFunc17()
{
  F_writeMem24(0x435110u, 525956, (int)sub_1000FAE0);
  F_writeMem24(0x4351D8u, 525756, (int)sub_1000FAE0);
  F_writeMem24(0x436A50u, 519492, (int)sub_1000FAE0);
  F_writeMem24(0x432407u, 590877, (int)dword_1000FB30);
  F_writeMem24(0x4364B1u, 574323, (int)dword_1000FB30);
  F_writeMem24(0x43120Bu, 595481, (int)dword_1000FB30);
  F_writeMem24(0x4315AAu, 594554, (int)dword_1000FB30);
  F_writeMem24(0x431B18u, 593164, (int)dword_1000FB30);
  F_writeMem24(0x41CDE6u, 676058, (int)sub_1000FB50);
  return F_writeMem24(0x41D94Au, 673142, (int)sub_1000FB90);
}
// 1000FB30: using guessed type int dword_1000FB30[8];

//----- (1000FCA0) --------------------------------------------------------
int __stdcall sub_1000FCA0(int a1, int a2)
{
  void *v2; // ecx
  int v3; // ecx
  int result; // eax

  dword_1003B108 = sub_1000EF30(0, 0, scr_width, newBytes, a1, a2);
  v3 = *(_DWORD *)(sub_1000EF10(v2) + 44);
  result = dword_1003B108;
  dword_10064634 = v3;
  return result;
}
// 1000FCA0: using guessed type int __stdcall sub_1000FCA0(int, int);
// 1003B108: using guessed type int dword_1003B108;
// 10064634: using guessed type int dword_10064634;

//----- (1000FCE0) --------------------------------------------------------
char *__cdecl sub_1000FCE0(int a1, unsigned int a2, int a3, int a4)
{
  void *v4; // ecx

  sub_1000EF10(v4);
  return sub_1001D1B0(
           (char *)dword_1006463C,
           a2,
           (char *)newBytes,
           a4,
           (char *)((scr_width >> 1) + dword_10064634 - 320),
           scr_width);
}
// 1003B108: using guessed type int dword_1003B108;
// 10064634: using guessed type int dword_10064634;
// 1006463C: using guessed type int dword_1006463C;

//----- (1000FD30) --------------------------------------------------------
char *__cdecl sub_1000FD30(int a1, unsigned int a2, int a3, int a4)
{
  return sub_1001D1B0(
           (char *)dword_10064638,
           a2,
           (char *)newBytes,
           a4,
           (char *)((scr_width >> 1) + dword_10064634 - 320),
           scr_width);
}
// 10064634: using guessed type int dword_10064634;
// 10064638: using guessed type int dword_10064638;

//----- (1000FD70) --------------------------------------------------------
int sub_1000FD70()
{
  int result; // eax

  result = sub_1000F170();
  dword_10064638 = result;
  return result;
}
// 1000FD70: using guessed type int sub_1000FD70();
// 10064638: using guessed type int dword_10064638;

//----- (1000FDA0) --------------------------------------------------------
int sub_1000FDA0()
{
  int result; // eax

  result = sub_1000F170();
  dword_10064640 = result + 640;
  dword_1006463C = result;
  dword_10064644 = 640 * newBytes + result - 640;
  return result;
}
// 1006463C: using guessed type int dword_1006463C;
// 10064640: using guessed type int dword_10064640;
// 10064644: using guessed type int dword_10064644;

//----- (1000FDE0) --------------------------------------------------------
int sub_1000FDE0()
{
  return sub_1000FDA0();
}
// 1000FDE0: using guessed type int sub_1000FDE0();

//----- (1000FE00) --------------------------------------------------------
char *__usercall sub_1000FE00@<eax>(int a1@<ebx>, char *a2, char a3, unsigned int a4)
{
  int v4; // eax

  LOBYTE(a1) = a3;
  BYTE1(a1) = a3;
  v4 = a1 << 16;
  LOWORD(v4) = a1;
  memset32(a2, v4, a4 >> 2);
  memset(&a2[4 * (a4 >> 2)], a3, a4 & 3);
  return a2;
}

//----- (1000FE40) --------------------------------------------------------
char *__usercall sub_1000FE40@<eax>(char *a1@<eax>, char a2@<dl>)
{
  return sub_1000FE00(640 * newBytes, a1, a2, 640 * newBytes);
}

//----- (1000FE70) --------------------------------------------------------
void *__cdecl sub_1000FE70(void *a1, const void *a2)
{
  void *result; // eax

  result = a1;
  qmemcpy(a1, a2, (5 * newBytes - 5) << 7);
  return result;
}

//----- (1000FEA0) --------------------------------------------------------
void *__usercall sub_1000FEA0@<eax>(void *a1@<eax>, const void *a2@<edx>)
{
  return sub_1000FE70(a1, a2);
}

//----- (1000FEC0) --------------------------------------------------------
void sub_1000FEC0()
{
  ;
}
// 10064644: using guessed type int dword_10064644;

//----- (1000FED0) --------------------------------------------------------
int sub_1000FED0()
{
  int result; // eax

  if ( dword_1003B108 != -1 )
  {
    result = sub_1000EF60();
    dword_1003B108 = -1;
  }
  return result;
}
// 1000FED0: using guessed type int sub_1000FED0();
// 1003B108: using guessed type int dword_1003B108;

//----- (1000FF00) --------------------------------------------------------
void __thiscall sub_1000FF00(void *this)
{
  int v1; // eax
  _DWORD *v2; // ebx
  int v3; // ebp
  char *v4; // eax
  int v5; // eax
  int v6; // eax
  void *v7; // eax
  char v8; // al
  char *v9; // edi
  char *v10; // edi
  char *v11; // esi
  char v12; // cl
  int v13; // edi
  char *v14; // esi
  unsigned int v15; // ecx
  char *v16; // [esp+0h] [ebp-8h]
  unsigned int v17; // [esp+4h] [ebp-4h]

  if ( dword_1003B108 != -1 )
  {
    v1 = sub_1000EF10(this);
    v2 = (_DWORD *)v1;
    if ( v1 )
    {
      v3 = *(_DWORD *)(v1 + 28);
      v17 = 640 * v3;
      v4 = (char *)operator new(640 * v3);
      v16 = v4;
      qmemcpy(v4, (const void *)dword_1006463C, 640 * v3);
      v2[6] = scr_width;
      v2[7] = newBytes;
      v2[2] = 0;
      v2[3] = 0;
      v2[4] = scr_width - 1;
      v5 = v2[11];
      v2[5] = newBytes - 1;
      if ( v5 )
      {
        v6 = sub_1000F190(v5, scr_width * newBytes);
        v2[11] = v6;
        dword_10064634 = v6;
        memset((void *)v2[11], 0, scr_width * newBytes);
      }
      if ( dword_10064638 )
      {
        dword_10064638 = sub_1000F190(dword_10064638, 640 * newBytes);
        memset((void *)dword_10064638, 0, 640 * newBytes);
      }
      if ( dword_1006463C )
      {
        v7 = (void *)sub_1000F190(dword_1006463C, 640 * newBytes);
        dword_1006463C = (int)v7;
        memset(v7, 0, 640 * newBytes);
        v8 = newBytes;
        if ( newBytes <= v3 )
        {
          v13 = dword_1006463C;
          v14 = &v16[640 * (v3 - newBytes)];
          v15 = (unsigned int)(640 * newBytes) >> 2;
          qmemcpy((void *)dword_1006463C, v14, 4 * v15);
          v11 = &v14[4 * v15];
          v10 = (char *)(v13 + 4 * v15);
          v12 = v8 << 7;
        }
        else
        {
          v9 = (char *)(dword_1006463C + 640 * (newBytes - v3));
          qmemcpy(v9, v16, 4 * (v17 >> 2));
          v11 = &v16[4 * (v17 >> 2)];
          v10 = &v9[4 * (v17 >> 2)];
          v12 = (_BYTE)v3 << 7;
        }
        qmemcpy(v10, v11, v12 & 3);
        dword_10064640 = dword_1006463C + 640;
        dword_10064644 = 640 * newBytes + dword_1006463C - 640;
      }
      if ( v16 )
        j__free(v16);
    }
  }
}
// 1003B108: using guessed type int dword_1003B108;
// 10064634: using guessed type int dword_10064634;
// 10064638: using guessed type int dword_10064638;
// 1006463C: using guessed type int dword_1006463C;
// 10064640: using guessed type int dword_10064640;
// 10064644: using guessed type int dword_10064644;

//----- (100100F0) --------------------------------------------------------
int F_initFunc18()
{
  F_writeMem24(0x4279A9u, 635047, (int)sub_1000FED0);
  F_writeMem24(0x4276AFu, 701456, (int)sub_1000FEA0);
  F_writeMem24(0x4278D3u, 700908, (int)sub_1000FEA0);
  F_writeMem8(4355751, 0x8Bu, 144);
  func_writeMem16(4355752, 0x24BCu, 59536);
  F_writeMem32(0x4276AAu, 584, (int)sub_1000FEC0);
  F_writeMem8(4355581, 0x8Bu, 144);
  func_writeMem16(4355582, 0x2494u, 5515);
  F_writeMemUnk(0x427600u, 552, (int)&dword_10064644);
  F_writeMem8(4355723, 0x8Bu, 144);
  func_writeMem16(4355724, 0x2494u, 5515);
  F_writeMemUnk(0x42768Eu, 576, (int)&dword_10064640);
  F_writeMem8(4356028, 0x8Bu, 144);
  func_writeMem16(4356029, 0x24B4u, 13707);
  F_writeMemUnk(0x4277BFu, 604, (int)&dword_10064634);
  func_writeMem16(4356481, 0x848Bu, 37008);
  F_writeMem8(4356483, 0x24u, 161);
  F_writeMemUnk(0x427984u, 592, (int)&dword_10064638);
  func_writeMem16(4355730, 0x848Bu, 37008);
  F_writeMem8(4355732, 0x24u, 161);
  F_writeMemUnk(0x427695u, 596, (int)&dword_1006463C);
  func_writeMem16(4356239, 0x848Bu, 37008);
  F_writeMem8(4356241, 0x24u, 161);
  F_writeMemUnk(0x427892u, 596, (int)&dword_1006463C);
  F_writeMem8(4356246, 0x8Bu, 144);
  func_writeMem16(4356247, 0x24BCu, 15755);
  F_writeMemUnk(0x427899u, 596, (int)&dword_10064644);
  F_writeMemUnk(0x4278A6u, 306560, 0);
  func_writeMem16(4356299, 0x848Bu, 37008);
  F_writeMem8(4356301, 0x24u, 161);
  F_writeMemUnk(0x4278CEu, 596, (int)&dword_1006463C);
  func_writeMem16(4356469, 0x848Bu, 37008);
  F_writeMem8(4356471, 0x24u, 161);
  F_writeMemUnk(0x427978u, 596, (int)&dword_1006463C);
  F_writeMem24(0x427380u, 556476, (int)sub_1000FD70);
  F_writeMem24(0x4273AAu, 702306, (int)sub_1000FE40);
  F_writeMem24(0x427442u, 556282, (int)sub_1000FDE0);
  F_writeMem24(0x42745Fu, 702125, (int)sub_1000FE40);
  F_writeMemUnk(0x4273EFu, 480, newBytes);
  F_writeMem24(0x427349u, 636123, (int)sub_1000FCA0);
  F_writeMem24(0x4276E8u, 617896, (int)sub_1000FD30);
  F_writeMem24(0x427714u, 617900, (int)sub_1000FCE0);
  F_writeMem24(0x42790Au, 617350, (int)sub_1000FD30);
  return F_writeMem24(0x427936u, 617354, (int)sub_1000FCE0);
}
// 1000FCA0: using guessed type int __stdcall sub_1000FCA0(int, int);
// 1000FD70: using guessed type int sub_1000FD70();
// 1000FDE0: using guessed type int sub_1000FDE0();
// 1000FED0: using guessed type int sub_1000FED0();
// 10064634: using guessed type int dword_10064634;
// 10064638: using guessed type int dword_10064638;
// 1006463C: using guessed type int dword_1006463C;
// 10064640: using guessed type int dword_10064640;
// 10064644: using guessed type int dword_10064644;

//----- (10010470) --------------------------------------------------------
char *__cdecl sub_10010470(char *a1, int a2, int a3, int a4, int a5)
{
  char v5; // al

  v5 = sub_1000ED60(IDA__cmap);
  sub_1000ED10((int)a1, a2, a3, a4, v5);
  if ( death_scrn_size == 1 || dword_1006464C > scr_width || dword_10064650 > newBytes )
    return (char *)sub_1001D260(
                     (int)a1,
                     dword_1006464C,
                     dword_10064650,
                     dword_1006464C,
                     a5,
                     scr_width,
                     newBytes,
                     COERCE_FLOAT(1),
                     1);
  if ( death_scrn_size == 2 )
    return (char *)sub_1001D260(
                     (int)a1,
                     dword_1006464C,
                     dword_10064650,
                     dword_1006464C,
                     a5,
                     scr_width,
                     newBytes,
                     0.0,
                     0);
  return sub_1001D1B0(
           a1,
           dword_1006464C,
           (char *)dword_10064650,
           dword_1006464C,
           (char *)(a5 + scr_width * ((newBytes >> 1) - (dword_10064650 >> 1)) - (dword_1006464C >> 1) + (scr_width >> 1)),
           scr_width);
}
// 10064614: using guessed type int IDA__cmap;
// 10064648: using guessed type int death_scrn_size;

//----- (10010550) --------------------------------------------------------
int __cdecl sub_10010550(int a1, int a2)
{
  int v2; // esi

  v2 = sub_10005CD0(a1, a2);
  dword_1006464C = sub_10005CF0(v2, 0);
  dword_10064650 = sub_10005D10(v2, 0);
  return sub_10005D30(v2, 0);
}

//----- (10010590) --------------------------------------------------------
int __usercall sub_10010590@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return sub_10010550(a1, a2);
}

//----- (100105A0) --------------------------------------------------------
int __stdcall sub_100105A0(int a1, int a2)
{
  int result; // eax

  result = sub_1000EF30(0, 0, scr_width, newBytes, a1, a2);
  dword_1003B10C = result;
  return result;
}
// 100105A0: using guessed type int __stdcall sub_100105A0(int, int);
// 1003B10C: using guessed type int dword_1003B10C;

//----- (100105D0) --------------------------------------------------------
int sub_100105D0()
{
  int result; // eax

  result = sub_1000EF60();
  dword_1003B10C = -1;
  return result;
}
// 100105D0: using guessed type int sub_100105D0();
// 1003B10C: using guessed type int dword_1003B10C;

//----- (100105F0) --------------------------------------------------------
_DWORD *__thiscall sub_100105F0(void *this)
{
  _DWORD *result; // eax
  _DWORD *v2; // esi
  int v3; // ebx
  int v4; // edx
  char *v5; // edi
  char v6; // al
  char v7; // dl
  unsigned int v8; // ecx
  int v9; // eax
  int v10; // eax
  int v11; // edi
  char *v12; // ebp
  int v13; // ebx
  int v14; // eax
  int v15; // [esp+4h] [ebp-4h]

  result = (_DWORD *)dword_1003B10C;
  if ( dword_1003B10C != -1 )
  {
    result = (_DWORD *)sub_1000EF10(this);
    v2 = result;
    HIWORD(v3) = 0;
    if ( result )
    {
      result[6] = scr_width;
      result[7] = newBytes;
      result[2] = 0;
      result[3] = 0;
      result[4] = scr_width - 1;
      v4 = result[11];
      result[5] = newBytes - 1;
      v5 = (char *)sub_1000F190(v4, scr_width * newBytes);
      v6 = *((_BYTE *)v2 + 32);
      LOBYTE(v3) = v6;
      v2[11] = v5;
      BYTE1(v3) = v6;
      v7 = scr_width * newBytes;
      v8 = (unsigned int)(scr_width * newBytes) >> 2;
      v9 = v3 << 16;
      LOWORD(v9) = v3;
      memset32(v5, v9, v8);
      memset(&v5[4 * v8], v3, v7 & 3);
      v10 = sub_10005C60(6, 309, 0, 0, 0);
      v11 = sub_10005CD0(v10, (int)&v15);
      v12 = (char *)sub_10005D30(v11, 0);
      v13 = sub_10005CF0(v11, 0);
      v14 = sub_10005D10(v11, 0);
      sub_10010470(v12, v13, v14, v13, v2[11]);
      result = (_DWORD *)sub_10005C90();
    }
  }
  return result;
}
// 1003B10C: using guessed type int dword_1003B10C;

//----- (10010700) --------------------------------------------------------
int F_initFunc22_resStuf4()
{
  death_scrn_size = F_GetPrivateProfileIntA("STATIC_SCREENS", "DEATH_SCRN_SIZE", 0);
  F_writeMem24(0x47329Fu, 307697, (int)sub_10010470);
  F_writeMem24(0x473260u, -370860, (int)sub_10010590);
  F_writeMem24(0x473224u, 325120, (int)sub_100105A0);
  return F_writeMem24(0x473384u, 325324, (int)sub_100105D0);
}
// 100105A0: using guessed type int __stdcall sub_100105A0(int, int);
// 100105D0: using guessed type int sub_100105D0();
// 10064648: using guessed type int death_scrn_size;

//----- (10010790) --------------------------------------------------------
signed int __cdecl sub_10010790(signed int a1)
{
  signed int result; // eax
  _DWORD *v2; // eax
  int v3; // eax
  _DWORD *v4; // esi
  _DWORD *v5; // ecx
  int v6; // eax
  _DWORD *v7; // eax
  int v8; // eax

  result = a1;
  switch ( a1 )
  {
    case 327:
      *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack) = 0;
      v6 = *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack);
      IDA_display_inventory_(IDA__stack_offset, -1);
      result = -1;
      break;
    case 329:
      *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack) -= *(_DWORD *)IDA__inven_cur_disp;
      v2 = (_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack);
      if ( *v2 < 0 )
        *v2 = 0;
      v3 = *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack);
      IDA_display_inventory_(IDA__stack_offset, -1);
      result = -1;
      break;
    case 335:
      *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack) = **(_DWORD **)IDA__pud
                                                                      - *(_DWORD *)IDA__inven_cur_disp;
      v7 = (_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack);
      if ( *v7 < 0 )
        *v7 = 0;
      v8 = *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack);
      IDA_display_inventory_(IDA__stack_offset, -1);
      result = -1;
      break;
    case 337:
      v4 = *(_DWORD **)IDA__pud;
      *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack) += *(_DWORD *)IDA__inven_cur_disp;
      v5 = (_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack);
      if ( *(_DWORD *)IDA__inven_cur_disp + *v5 >= *v4 )
      {
        *v5 = *v4 - *(_DWORD *)IDA__inven_cur_disp;
        if ( *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack) < 0 )
          *(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack) = 0;
      }
      IDA_display_inventory_(*(_DWORD *)(IDA__stack_offset + 4 * *(_DWORD *)IDA__curr_stack), -1);
      result = -1;
      break;
    default:
      return result;
  }
  return result;
}
// 100646EC: invalid function type has been ignored
// 10064688: using guessed type int IDA__inven_cur_disp;
// 100646E0: using guessed type int IDA__stack_offset;
// 100646E4: using guessed type int IDA__pud;
// 100646E8: using guessed type int IDA__curr_stack;
// 100646EC: using guessed type int (__fastcall *IDA_display_inventory_)(_DWORD, _DWORD);

//----- (10010980) --------------------------------------------------------
void sub_10010980()
{
  signed int v0; // [esp-4h] [ebp-20h]

  sub_10010790(v0);
}

//----- (10010A00) --------------------------------------------------------
int __cdecl sub_10010A00(int a1, int a2, int a3, int a4, _DWORD *a5)
{
  void *v5; // ecx
  int v7; // eax

  if ( *a5 == -1 )
    return 0;
  v7 = sub_1000EF10(v5);
  return sub_1000EEE0(
           a1 + *(_DWORD *)(v7 + 8),
           a2 + *(_DWORD *)(v7 + 12),
           *(_DWORD *)(v7 + 8) + a3,
           *(_DWORD *)(v7 + 12) + a4);
}

//----- (10010A40) --------------------------------------------------------
signed int __cdecl sub_10010A40(int a1, signed int *a2)
{
  signed int v2; // ebp
  signed int v3; // esi
  signed int v4; // edi
  char v5; // bl
  int v6; // eax
  int v7; // eax
  signed int result; // eax
  int v9; // [esp-10h] [ebp-20h]
  int v10; // [esp-Ch] [ebp-1Ch]
  int v11; // [esp-8h] [ebp-18h]
  _DWORD *v12; // [esp-4h] [ebp-14h]

  v2 = 1;
  v3 = 328;
  v4 = 336;
  v5 = 0;
  if ( F_GetPrivateProfileIntA("INPUT", "SCROLLWHEEL_FOCUS_PRIMARY_MENU", 1) )
    v5 = 1;
  if ( byte_10064684 )
  {
    v2 = *(_DWORD *)IDA__inven_cur_disp;
    switch ( dword_1006466C )
    {
      case 0:
      case 1:
        if ( v5 )
          goto LABEL_22;
        v12 = (_DWORD *)IDA__i_wid;
        v11 = *(_DWORD *)IDA_inven_pickup___someMov2 + 48 * v2;
        v10 = *(_DWORD *)IDA_inven_pickup___someMov1 - 80;
        v9 = *(_DWORD *)IDA_inven_pickup___someMov2;
        v6 = *(_DWORD *)IDA_inven_pickup___someMov3 - 80;
        goto LABEL_7;
      case 2:
        if ( sub_10010A00(
               *(_DWORD *)IDA_inven_pickup___someMov6 - 80,
               *(_DWORD *)IDA_inven_pickup___someMov5,
               *(_DWORD *)IDA_inven_pickup___someMov4 - 80,
               *(_DWORD *)IDA_inven_pickup___someMov5 + 48 * v2,
               (_DWORD *)IDA__i_wid) )
        {
          v3 = 397;
          v4 = 401;
          break;
        }
        if ( v5 )
          goto LABEL_22;
        v7 = sub_10010A00(
               *(_DWORD *)IDA_inven_pickup___someMov9 - 80,
               *(_DWORD *)IDA_inven_pickup___someMov8,
               *(_DWORD *)IDA_inven_pickup___someMov7 - 80,
               *(_DWORD *)IDA_inven_pickup___someMov8 + 48 * *(_DWORD *)IDA__inven_cur_disp,
               (_DWORD *)IDA__i_wid);
        goto LABEL_8;
      case 3:
        if ( sub_10010A00(
               *(_DWORD *)IDA_inven_pickup___someMov21,
               *(_DWORD *)IDA_inven_pickup___someMov20,
               *(_DWORD *)IDA_inven_pickup___someMov19,
               *(_DWORD *)IDA_inven_pickup___someMov20 + 48 * v2,
               (_DWORD *)IDA__dialogueBackWindow) )
        {
          v3 = 397;
          v4 = 401;
        }
        else if ( sub_10010A00(
                    *(_DWORD *)IDA_inven_pickup___someMov12,
                    *(_DWORD *)IDA_inven_pickup___someMov11,
                    *(_DWORD *)IDA_inven_pickup___someMov10,
                    *(_DWORD *)IDA_inven_pickup___someMov11 + 48 * *(_DWORD *)IDA__inven_cur_disp,
                    (_DWORD *)IDA__dialogueBackWindow) )
        {
          v3 = 329;
          v4 = 337;
        }
        else if ( sub_10010A00(
                    *(_DWORD *)IDA_inven_pickup___someMov15,
                    *(_DWORD *)IDA_inven_pickup___someMov14,
                    *(_DWORD *)IDA_inven_pickup___someMov13,
                    *(_DWORD *)IDA_inven_pickup___someMov14 + 48 * *(_DWORD *)IDA__inven_cur_disp,
                    (_DWORD *)IDA__dialogueBackWindow) )
        {
          v3 = 388;
          v4 = 374;
        }
        else
        {
          if ( v5 )
            goto LABEL_22;
          v12 = (_DWORD *)IDA__dialogueBackWindow;
          v11 = *(_DWORD *)IDA_inven_pickup___someMov17 + 48 * *(_DWORD *)IDA__inven_cur_disp;
          v10 = *(_DWORD *)IDA_inven_pickup___someMov16;
          v9 = *(_DWORD *)IDA_inven_pickup___someMov17;
          v6 = *(_DWORD *)IDA_inven_pickup___someMov18;
LABEL_7:
          v7 = sub_10010A00(v6, v9, v10, v11, v12);
LABEL_8:
          if ( v7 )
          {
LABEL_22:
            v3 = 328;
            v4 = 336;
          }
          else
          {
            v3 = -1;
            v4 = -1;
          }
        }
        break;
      default:
        goto LABEL_22;
    }
  }
  if ( a1 <= 0 )
  {
    if ( a1 >= 0 )
      *a2 = -1;
    else
      *a2 = v4;
    result = v2;
  }
  else
  {
    *a2 = v3;
    result = v2;
  }
  return result;
}
// 100645B8: using guessed type int IDA__dialogueBackWindow;
// 100645C8: using guessed type int IDA__i_wid;
// 1006466C: using guessed type int dword_1006466C;
// 10064684: using guessed type char byte_10064684;
// 10064688: using guessed type int IDA__inven_cur_disp;
// 1006468C: using guessed type int IDA_inven_pickup___someMov1;
// 10064690: using guessed type int IDA_inven_pickup___someMov2;
// 10064694: using guessed type int IDA_inven_pickup___someMov3;
// 10064698: using guessed type int IDA_inven_pickup___someMov7;
// 1006469C: using guessed type int IDA_inven_pickup___someMov8;
// 100646A0: using guessed type int IDA_inven_pickup___someMov9;
// 100646A4: using guessed type int IDA_inven_pickup___someMov4;
// 100646A8: using guessed type int IDA_inven_pickup___someMov5;
// 100646AC: using guessed type int IDA_inven_pickup___someMov6;
// 100646B0: using guessed type int IDA_inven_pickup___someMov13;
// 100646B4: using guessed type int IDA_inven_pickup___someMov14;
// 100646B8: using guessed type int IDA_inven_pickup___someMov15;
// 100646BC: using guessed type int IDA_inven_pickup___someMov10;
// 100646C0: using guessed type int IDA_inven_pickup___someMov11;
// 100646C4: using guessed type int IDA_inven_pickup___someMov12;
// 100646C8: using guessed type int IDA_inven_pickup___someMov19;
// 100646CC: using guessed type int IDA_inven_pickup___someMov20;
// 100646D0: using guessed type int IDA_inven_pickup___someMov21;
// 100646D4: using guessed type int IDA_inven_pickup___someMov16;
// 100646D8: using guessed type int IDA_inven_pickup___someMov17;
// 100646DC: using guessed type int IDA_inven_pickup___someMov18;

//----- (10010CF0) --------------------------------------------------------
int __usercall sub_10010CF0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>)
{
  return sub_10010A00(a1, a2, a4, a3, (_DWORD *)IDA__dialogueBackWindow);
}
// 100645B8: using guessed type int IDA__dialogueBackWindow;

//----- (10010D10) --------------------------------------------------------
int __usercall sub_10010D10@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>)
{
  return sub_10010A00(a1 - 80, a2, a4 - 80, a3, (_DWORD *)IDA__i_wid);
}
// 100645C8: using guessed type int IDA__i_wid;

//----- (10010D30) --------------------------------------------------------
int __cdecl sub_10010D30(int a1, int a2, unsigned int a3, signed int a4, int a5, int a6, int a7)
{
  int v7; // ecx
  int v8; // esi
  void *v9; // ecx
  int v10; // eax
  int result; // eax

  v7 = dword_10064654[a7];
  dword_1006466C = a7;
  *(_DWORD *)(v7 + 12) = scr_width / 2 - 240;
  if ( *(_DWORD *)IDA__display_win == -1 )
    *(_DWORD *)(dword_10064654[a7] + 16) = newBytes / 2 - a4 / 2;
  else
    sub_1000F920(a3, a4, (_DWORD *)(dword_10064654[a7] + 12), (_DWORD *)(dword_10064654[a7] + 16));
  v8 = sub_1000EF30(*(_DWORD *)(dword_10064654[a7] + 12), *(_DWORD *)(dword_10064654[a7] + 16), a3, a4, a5, a6);
  v10 = sub_1000EF10(v9);
  dword_10064674 = v10;
  *(_DWORD *)(dword_10064664 + 12) = *(_DWORD *)(v10 + 8) + 60;
  *(_DWORD *)(dword_10064664 + 16) = *(_DWORD *)(dword_10064674 + 12) + 80;
  *(_DWORD *)(dword_10064668 + 12) = *(_DWORD *)(dword_10064674 + 8) + 60;
  *(_DWORD *)(dword_10064668 + 16) = *(_DWORD *)(dword_10064674 + 12) + 80;
  result = v8;
  if ( v8 != -1 )
    byte_10064684 = 1;
  return result;
}
// 100645EC: using guessed type int IDA__display_win;
// 10064654: using guessed type int dword_10064654[];
// 10064664: using guessed type int dword_10064664;
// 10064668: using guessed type int dword_10064668;
// 1006466C: using guessed type int dword_1006466C;
// 10064674: using guessed type int dword_10064674;
// 10064684: using guessed type char byte_10064684;

//----- (10010E30) --------------------------------------------------------
int __userpurge sub_10010E30@<eax>(int a1@<eax>, int a2@<edx>, signed int a3@<ecx>, unsigned int a4@<ebx>, int a5, int a6)
{
  int v7; // [esp+0h] [ebp-4h]

  return sub_10010D30(a1, a2, a4, a3, a5, a6, v7);
}

//----- (10010E50) --------------------------------------------------------
int sub_10010E50()
{
  int result; // eax

  result = sub_1000EF60();
  byte_10064684 = 0;
  return result;
}
// 10010E50: using guessed type int sub_10010E50();
// 10064684: using guessed type char byte_10064684;

//----- (10010F10) --------------------------------------------------------
void sub_10010F10()
{
  int v0; // edx

  v0 = *(_DWORD *)(dword_10064674 + 16) + 1;
}
// 10064674: using guessed type int dword_10064674;

//----- (10010F20) --------------------------------------------------------
void sub_10010F20()
{
  int v0; // edx

  v0 = *(_DWORD *)(dword_10064674 + 20) + 1;
}
// 10064674: using guessed type int dword_10064674;

//----- (100110A0) --------------------------------------------------------
int sub_100110A0()
{
  int result; // eax
  int v1; // ST00_4
  int v2; // ST00_4

  result = sub_1000EF60();
  if ( dialog_scrn_background == 1 )
  {
    v1 = *(_DWORD *)IDA__display_win;
    sub_1000EFA0(IDA__display_win);
    v2 = *(_DWORD *)IDA__display_win;
    sub_1000EFD0();
    result = sub_10013A20();
  }
  return result;
}
// 100110A0: using guessed type int sub_100110A0();
// 100645EC: using guessed type int IDA__display_win;
// 10064678: using guessed type int dialog_scrn_background;

//----- (100110E0) --------------------------------------------------------
#error "100110E1: positive sp value has been found (funcsize=1)"

//----- (10011100) --------------------------------------------------------
_DWORD *__fastcall sub_10011100(void *a1)
{
  int v1; // eax
  _DWORD *result; // eax
  _DWORD *v3; // esi
  int v4; // edx
  int v5; // ecx
  int v6; // ecx
  int v7; // edx
  int v8; // ecx
  int v9; // edx
  int v10; // esi

  if ( *(_DWORD *)IDA__i_wid != -1 )
  {
    v1 = sub_1000EF10(a1);
    if ( v1 )
    {
      *(_DWORD *)(dword_10064654[dword_1006466C] + 12) = *(_DWORD *)(v1 + 8);
      *(_DWORD *)(dword_10064654[dword_1006466C] + 16) = *(_DWORD *)(v1 + 12);
      *(_DWORD *)(dword_10064664 + 12) = *(_DWORD *)(v1 + 8) + 60;
      *(_DWORD *)(dword_10064664 + 16) = *(_DWORD *)(v1 + 12) + 80;
      *(_DWORD *)(dword_10064668 + 12) = *(_DWORD *)(v1 + 8) + 60;
      a1 = (void *)dword_10064668;
      *(_DWORD *)(dword_10064668 + 16) = *(_DWORD *)(v1 + 12) + 80;
    }
  }
  result = *(_DWORD **)IDA__dialogueBackWindow;
  if ( *(_DWORD *)IDA__dialogueBackWindow != -1 )
  {
    result = (_DWORD *)sub_1000EF10(a1);
    v3 = result;
    if ( result )
    {
      *(_DWORD *)(dword_10064660 + 12) = result[2] + 80;
      *(_DWORD *)(dword_10064660 + 16) = result[3] + 290;
      *(_DWORD *)IDA__i_wid_max_x = result[2] + 560;
      *(_DWORD *)IDA__i_wid_max_y = result[3] + 470;
      *(_DWORD *)(dword_10064664 + 12) = result[2] + 140;
      *(_DWORD *)(dword_10064664 + 16) = result[3] + 80;
      *(_DWORD *)(dword_10064668 + 12) = result[2] + 140;
      *(_DWORD *)(dword_10064668 + 16) = result[3] + 80;
      result = 0;
      if ( *(_DWORD *)IDA__gReplyWin != -1 )
      {
        result = (_DWORD *)sub_1000EF10(*(void **)IDA__gReplyWin);
        if ( result )
        {
          result[2] = v3[2] + 135;
          v4 = result[6];
          result[3] = v3[3] + 225;
          v5 = result[7];
          result[4] = v4 + result[2] - 1;
          result[5] = v5 + result[3] - 1;
        }
      }
      if ( *(_DWORD *)IDA__gOptionWin != -1 )
        result = (_DWORD *)sub_1000EF10(*(void **)IDA__gOptionWin);
      if ( result )
      {
        result[2] = v3[2] + 127;
        v6 = result[6];
        result[3] = v3[3] + 335;
        v7 = result[7];
        result[4] = v6 + result[2] - 1;
        result[5] = v7 + result[3] - 1;
      }
      if ( *(_DWORD *)IDA__dialogueWindow != -1 )
        result = (_DWORD *)sub_1000EF10(*(void **)IDA__dialogueWindow);
      if ( result )
      {
        v8 = result[7];
        result[2] = v3[2];
        v9 = v3[5];
        v10 = result[2];
        result[3] = v9 - v8 + 1;
        result[4] = result[6] + v10 - 1;
        result[5] = result[3] + v8 - 1;
      }
    }
  }
  return result;
}
// 100645B8: using guessed type int IDA__dialogueBackWindow;
// 100645BC: using guessed type int IDA__gReplyWin;
// 100645C0: using guessed type int IDA__gOptionWin;
// 100645C4: using guessed type int IDA__dialogueWindow;
// 100645C8: using guessed type int IDA__i_wid;
// 10064654: using guessed type int dword_10064654[];
// 10064660: using guessed type int dword_10064660;
// 10064664: using guessed type int dword_10064664;
// 10064668: using guessed type int dword_10064668;
// 1006466C: using guessed type int dword_1006466C;
// 1006467C: using guessed type int IDA__i_wid_max_x;
// 10064680: using guessed type int IDA__i_wid_max_y;

//----- (10011300) --------------------------------------------------------
void __cdecl sub_10011300(char *a1, unsigned int a2, char *a3, int a4, char *a5, int a6)
{
  char *v6; // eax
  char *v7; // esi
  char *v8; // eax
  char *v9; // edi

  v6 = sub_10005DF0((int)"HR_ALLTLK.frm", 6u);
  v7 = v6;
  if ( v6 )
  {
    sub_1001D1B0(*(char **)(*((_DWORD *)v6 + 16) + 12), a2, a3, **((unsigned __int16 **)v6 + 16), a5, a6);
    v8 = (char *)*((_DWORD *)v7 + 16);
    if ( v8 )
    {
      v9 = v8 - 4;
      `eh vector destructor iterator'(v8, 0x10u, *((_DWORD *)v8 - 1), sub_10005680);
      j__free(v9);
    }
    j__free(v7);
  }
  else
  {
    sub_1001D1B0(a1, a2, a3, a4, a5, a6);
  }
}

//----- (10011380) --------------------------------------------------------
UINT F_initFunc185_gameFixes()
{
  int v0; // edi
  int *v1; // esi
  int v2; // eax
  int v3; // eax
  signed int v4; // esi
  int v5; // eax
  UINT result; // eax
  DWORD flOldProtect; // [esp+8h] [ebp-B0h]
  int v8; // [esp+Ch] [ebp-ACh]
  int v9; // [esp+10h] [ebp-A8h]
  int v10; // [esp+14h] [ebp-A4h]
  int v11; // [esp+18h] [ebp-A0h]
  int v12; // [esp+1Ch] [ebp-9Ch]
  int v13; // [esp+20h] [ebp-98h]
  int v14; // [esp+24h] [ebp-94h]
  int v15; // [esp+28h] [ebp-90h]
  int v16; // [esp+2Ch] [ebp-8Ch]
  int v17; // [esp+30h] [ebp-88h]
  int v18; // [esp+34h] [ebp-84h]
  int v19; // [esp+38h] [ebp-80h]
  int v20; // [esp+3Ch] [ebp-7Ch]
  int v21; // [esp+40h] [ebp-78h]
  int v22; // [esp+44h] [ebp-74h]
  int v23; // [esp+48h] [ebp-70h]
  int v24; // [esp+4Ch] [ebp-6Ch]
  int v25; // [esp+50h] [ebp-68h]
  int v26; // [esp+54h] [ebp-64h]
  int v27; // [esp+58h] [ebp-60h]
  int v28; // [esp+5Ch] [ebp-5Ch]
  int v29; // [esp+60h] [ebp-58h]
  int v30; // [esp+64h] [ebp-54h]
  int v31; // [esp+68h] [ebp-50h]
  int v32; // [esp+6Ch] [ebp-4Ch]
  int v33; // [esp+70h] [ebp-48h]
  int v34; // [esp+74h] [ebp-44h]
  int v35; // [esp+78h] [ebp-40h]
  int v36; // [esp+7Ch] [ebp-3Ch]
  int v37; // [esp+80h] [ebp-38h]
  int v38; // [esp+84h] [ebp-34h]
  int v39; // [esp+88h] [ebp-30h]
  int v40; // [esp+8Ch] [ebp-2Ch]
  int v41; // [esp+90h] [ebp-28h]
  int v42; // [esp+94h] [ebp-24h]
  int v43; // [esp+98h] [ebp-20h]
  int v44; // [esp+9Ch] [ebp-1Ch]
  int v45; // [esp+A0h] [ebp-18h]
  int v46; // [esp+A4h] [ebp-14h]
  int v47; // [esp+A8h] [ebp-10h]
  int v48; // [esp+ACh] [ebp-Ch]
  int v49; // [esp+B0h] [ebp-8h]
  int v50; // [esp+B4h] [ebp-4h]

  dialog_scrn_background = F_GetPrivateProfileIntA("OTHER_SETTINGS", "DIALOG_SCRN_BACKGROUND", 0);
  IDA__inven_cur_disp = F_ptrCorrection_(5265200);
  v0 = 5265220;
  v1 = dword_10064654;
  do
  {
    *v1 = F_ptrCorrection_(v0);
    ++v1;
    v0 += 20;
  }
  while ( (signed int)v1 < (signed int)&dword_1006466C );
  IDA__stack_offset = F_ptrCorrection_(5885332);
  IDA__pud = F_ptrCorrection_(5885520);
  IDA__curr_stack = F_ptrCorrection_(5885672);
  IDA_display_inventory_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4602808);
  func_writeMem16(4598382, 0xFB81u, 59536);
  F_writeMem32(0x462A70u, 336, (int)sub_10010980);
  func_writeMem16(4608979, 0xFB81u, 59536);
  F_writeMem32(0x4653D5u, 336, (int)sub_10010980);
  if ( F_GetPrivateProfileIntA("OTHER_SETTINGS", "INV_ADD_ITEMS_AT_TOP", 0) )
  {
    F_writeMem8(4629435, 0x8Bu, 232);
    F_writeMem32(0x46A3BCu, 139561729, (int)dword_100109E0);
    func_writeMem16(4629440, 0x3C89u, 4843);
    F_writeMem8(4629442, 0xC2u, 144);
  }
  func_writeMem16(4599035, 0x968Bu, 59536);
  v2 = F_ptrCorrection_(5265224);
  F_writeMem32(0x462CFDu, v2, (int)sub_10010F10);
  func_writeMem16(4599057, 0x968Bu, 59536);
  v3 = F_ptrCorrection_(5265228);
  F_writeMem32(0x462D13u, v3, (int)sub_10010F20);
  F_writeMem24(0x464D01u, 330219, (int)sub_10010D10);
  F_writeMem24(0x464E2Bu, 329921, (int)sub_10010D10);
  F_writeMem24(0x464EB4u, 329784, (int)sub_10010D10);
  F_writeMem24(0x464F3Du, 329647, (int)sub_10010D10);
  F_writeMem24(0x467D6Eu, 317822, (int)sub_10010D10);
  F_writeMem24(0x467E31u, 317627, (int)sub_10010D10);
  IDA_inven_pickup___someMov1 = F_ptrCorrection_(4607215);
  IDA_inven_pickup___someMov2 = F_ptrCorrection_(4607223);
  IDA_inven_pickup___someMov3 = F_ptrCorrection_(4607228);
  IDA_inven_pickup___someMov4 = F_ptrCorrection_(4619613);
  IDA_inven_pickup___someMov5 = F_ptrCorrection_(4619618);
  IDA_inven_pickup___someMov6 = F_ptrCorrection_(4619625);
  IDA_inven_pickup___someMov7 = F_ptrCorrection_(4619808);
  IDA_inven_pickup___someMov8 = F_ptrCorrection_(4619813);
  IDA_inven_pickup___someMov9 = F_ptrCorrection_(4619820);
  F_writeMem24(0x462CF7u, 391981, (int)sub_10010E30);
  F_writeMem24(0x462DB2u, 391794, (int)dword_10010EC0);
  F_writeMem24(0x463A75u, 389083, (int)sub_10010E50);
  F_writeMem24(0x43F504u, 537376, (int)dword_10010EA0);
  F_writeMem24(0x43F5DCu, 537160, (int)dword_10010EA0);
  F_writeMem24(0x442653u, 524753, (int)dword_10010EA0);
  F_writeMem24(0x43FF19u, 517495, (int)sub_100110E0);
  F_writeMem24(0x440061u, 517167, (int)sub_100110E0);
  F_writeMem8(4599222, 0xBBu, 144);
  F_writeMemUnk(0x462DB7u, 560, -1869574000);
  F_writeMem8(4599227, 0xB9u, 144);
  F_writeMemUnk(0x462DBCu, 470, -1869574000);
  F_writeMem24(0x4681FBu, 316657, (int)sub_10010CF0);
  F_writeMem24(0x468274u, 316536, (int)sub_10010CF0);
  F_writeMem24(0x4684B0u, 315964, (int)sub_10010CF0);
  F_writeMem24(0x46852Au, 315842, (int)sub_10010CF0);
  IDA_inven_pickup___someMov10 = F_ptrCorrection_(4620778);
  IDA_inven_pickup___someMov11 = F_ptrCorrection_(4620783);
  IDA_inven_pickup___someMov12 = F_ptrCorrection_(4620790);
  IDA_inven_pickup___someMov13 = F_ptrCorrection_(4620899);
  IDA_inven_pickup___someMov14 = F_ptrCorrection_(4620904);
  IDA_inven_pickup___someMov15 = F_ptrCorrection_(4620911);
  IDA_inven_pickup___someMov16 = F_ptrCorrection_(4621471);
  IDA_inven_pickup___someMov17 = F_ptrCorrection_(4621476);
  IDA_inven_pickup___someMov18 = F_ptrCorrection_(4621483);
  IDA_inven_pickup___someMov19 = F_ptrCorrection_(4621593);
  IDA_inven_pickup___someMov20 = F_ptrCorrection_(4621598);
  IDA_inven_pickup___someMov21 = F_ptrCorrection_(4621605);
  if ( F_GetPrivateProfileIntA("OTHER_SETTINGS", "BARTER_PC_INV_DROP_FIX", 1) )
  {
    F_writeMemUnk(0x46849Fu, 144, 164);
    F_writeMemUnk(0x4684ABu, 80, 100);
  }
  flOldProtect = 4457535;
  v8 = 4457585;
  v9 = 4457694;
  v10 = 4457722;
  v11 = 4458132;
  v12 = 4458160;
  v13 = 4458919;
  v14 = 4458961;
  v15 = 4460372;
  v16 = 4460422;
  v17 = 4460980;
  v18 = 4462060;
  v19 = 4462110;
  v20 = 4462986;
  v21 = 4463096;
  v22 = 4463126;
  v23 = 4463353;
  v24 = 4463424;
  v25 = 4465147;
  v26 = 4465480;
  v27 = 4465545;
  v28 = 4465609;
  v29 = 4599276;
  v30 = 4603421;
  v31 = 4603474;
  v32 = 4604163;
  v33 = 4604231;
  v34 = 4605120;
  v35 = 4614740;
  v36 = 4614831;
  v37 = 4620473;
  v38 = 4620538;
  v39 = 4621168;
  v40 = 4621226;
  v41 = 4621830;
  v42 = 4621886;
  v43 = 4622212;
  v44 = 4622285;
  v45 = 4457393;
  v46 = 4462825;
  v47 = 4464943;
  v48 = 4465212;
  v49 = 4465335;
  v50 = 4458014;
  v4 = 0;
  do
  {
    v5 = F_ptrCorrection_(6758808);
    F_writeMemUnk(*(&flOldProtect + v4++), v5, (int)&dword_1003B110);
  }
  while ( v4 < 44 );
  F_writeMem24(0x441A88u, 527772, (int)dword_10011080);
  F_writeMem24(0x441BD1u, 527999, (int)sub_100110A0);
  F_writeMem24(0x44063Cu, 532968, (int)dword_10010EA0);
  F_writeMem24(0x440F66u, 530622, (int)dword_10010EA0);
  F_writeMem24(0x4415FEu, 528934, (int)dword_10010EA0);
  IDA__i_wid_max_x = F_ptrCorrection_(5885732);
  IDA__i_wid_max_y = F_ptrCorrection_(5885728);
  result = F_GetPrivateProfileIntA("OTHER_SETTINGS", "DIALOG_SCRN_ART_FIX", 1);
  if ( result )
  {
    F_writeMem24(0x441A26u, 510570, (int)sub_10011300);
    func_writeMem16(4463437, 0x48Du, 53865);
    F_writeMemUnk(0x441B4Fu, 213, 19);
    F_writeMem8(4463443, 0, 144);
    func_writeMem16(4463444, 0xD029u, 1003);
    F_writeMem8(4465489, 0xFu, 20);
    F_writeMemUnk(0x44239Fu, 214, 219);
    F_writeMemUnk(0x4422FBu, 14, 19);
    F_writeMemUnk(0x442305u, 214, 219);
    F_writeMemUnk(0x50512Cu, 14, 19);
    F_writeMemUnk(0x505134u, 40, 45);
    F_writeMemUnk(0x50513Cu, 14, 19);
    F_writeMemUnk(0x505144u, 40, 45);
    F_writeMemUnk(0x50514Cu, 188, 193);
    F_writeMemUnk(0x505154u, 214, 219);
    F_writeMemUnk(0x50515Cu, 188, 193);
    F_writeMemUnk(0x505164u, 214, 219);
    F_writeMemUnk(0x50516Cu, 14, 19);
    F_writeMemUnk(0x505174u, 24, 29);
    F_writeMemUnk(0x50517Cu, 204, 209);
    F_writeMemUnk(0x505184u, 214, 219);
    F_writeMemUnk(0x50518Cu, 40, 45);
    F_writeMemUnk(0x505194u, 188, 193);
    F_writeMemUnk(0x50519Cu, 40, 45);
    result = F_writeMemUnk(0x5051A4u, 188, 193);
  }
  return result;
}
// 100109E0: using guessed type int dword_100109E0[8];
// 10010E50: using guessed type int sub_10010E50();
// 10010EA0: using guessed type int dword_10010EA0[8];
// 10010EC0: using guessed type int dword_10010EC0[6];
// 10011080: using guessed type int dword_10011080[8];
// 100110A0: using guessed type int sub_100110A0();
// 100110E0: using guessed type int sub_100110E0();
// 1003B110: using guessed type int dword_1003B110;
// 10064654: using guessed type int dword_10064654[];
// 1006466C: using guessed type int dword_1006466C;
// 10064678: using guessed type int dialog_scrn_background;
// 1006467C: using guessed type int IDA__i_wid_max_x;
// 10064680: using guessed type int IDA__i_wid_max_y;
// 10064688: using guessed type int IDA__inven_cur_disp;
// 1006468C: using guessed type int IDA_inven_pickup___someMov1;
// 10064690: using guessed type int IDA_inven_pickup___someMov2;
// 10064694: using guessed type int IDA_inven_pickup___someMov3;
// 10064698: using guessed type int IDA_inven_pickup___someMov7;
// 1006469C: using guessed type int IDA_inven_pickup___someMov8;
// 100646A0: using guessed type int IDA_inven_pickup___someMov9;
// 100646A4: using guessed type int IDA_inven_pickup___someMov4;
// 100646A8: using guessed type int IDA_inven_pickup___someMov5;
// 100646AC: using guessed type int IDA_inven_pickup___someMov6;
// 100646B0: using guessed type int IDA_inven_pickup___someMov13;
// 100646B4: using guessed type int IDA_inven_pickup___someMov14;
// 100646B8: using guessed type int IDA_inven_pickup___someMov15;
// 100646BC: using guessed type int IDA_inven_pickup___someMov10;
// 100646C0: using guessed type int IDA_inven_pickup___someMov11;
// 100646C4: using guessed type int IDA_inven_pickup___someMov12;
// 100646C8: using guessed type int IDA_inven_pickup___someMov19;
// 100646CC: using guessed type int IDA_inven_pickup___someMov20;
// 100646D0: using guessed type int IDA_inven_pickup___someMov21;
// 100646D4: using guessed type int IDA_inven_pickup___someMov16;
// 100646D8: using guessed type int IDA_inven_pickup___someMov17;
// 100646DC: using guessed type int IDA_inven_pickup___someMov18;
// 100646E4: using guessed type int IDA__pud;
// 100646E8: using guessed type int IDA__curr_stack;
// 100646EC: using guessed type int (__fastcall *IDA_display_inventory_)(_DWORD, _DWORD);

//----- (10011CB0) --------------------------------------------------------
char *__usercall sub_10011CB0@<eax>(int a1@<ebx>, char *a2, int a3, int a4, int a5, char *a6)
{
  char v6; // dl
  unsigned int v7; // ecx
  int v8; // eax

  LOBYTE(a1) = byte_100646FC;
  BYTE1(a1) = byte_100646FC;
  v6 = scr_width * newBytes;
  v7 = (unsigned int)(scr_width * newBytes) >> 2;
  v8 = a1 << 16;
  LOWORD(v8) = a1;
  memset32(a6, v8, v7);
  memset(&a6[4 * v7], a1, v6 & 3);
  if ( LODWORD(end_slide_size) == 1 || dword_100646F4 > scr_width || dword_100646F8 > newBytes )
    return (char *)sub_1001D260(
                     (int)a2,
                     dword_100646F4,
                     dword_100646F8,
                     dword_100646F4,
                     (int)a6,
                     scr_width,
                     newBytes,
                     COERCE_FLOAT(1),
                     1);
  if ( LODWORD(end_slide_size) == 2 )
    return (char *)sub_1001D260(
                     (int)a2,
                     dword_100646F4,
                     dword_100646F8,
                     dword_100646F4,
                     (int)a6,
                     scr_width,
                     newBytes,
                     0.0,
                     0);
  return sub_1001D1B0(
           a2,
           dword_100646F4,
           (char *)dword_100646F8,
           dword_100646F4,
           &a6[scr_width * ((newBytes >> 1) - (dword_100646F8 >> 1)) - (dword_100646F4 >> 1) + (scr_width >> 1)],
           scr_width);
}
// 100646FC: using guessed type char byte_100646FC;

//----- (10011D80) --------------------------------------------------------
char *__cdecl sub_10011D80(char *a1, unsigned int a2, int a3, int a4, int a5)
{
  if ( LODWORD(end_slide_size) == 1 )
    return (char *)sub_1001D260(
                     (int)a1,
                     a2,
                     dword_100646F8,
                     dword_100646F4,
                     a5,
                     scr_width,
                     newBytes,
                     end_slide_size,
                     SLOBYTE(end_slide_size));
  if ( LODWORD(end_slide_size) == 2 )
    return (char *)sub_1001D260((int)a1, a2, dword_100646F8, dword_100646F4, a5, scr_width, newBytes, 0.0, 0);
  return sub_1001D1B0(
           a1,
           a2,
           (char *)dword_100646F8,
           dword_100646F4,
           (char *)(a5 + scr_width * ((newBytes >> 1) - (dword_100646F8 >> 1)) - (a2 >> 1) + (scr_width >> 1)),
           scr_width);
}

//----- (10011E50) --------------------------------------------------------
__int16 __usercall sub_10011E50@<ax>(int a1@<ebx>, int a2)
{
  _DWORD *v2; // eax
  char *v3; // edi
  unsigned int v4; // edx
  int v5; // eax

  byte_100646FC = sub_1000ED60(a2);
  sub_1000EE80();
  v2 = (_DWORD *)sub_1000EF10(*(void **)IDA__endgame_window);
  v3 = (char *)v2[11];
  LOBYTE(a1) = byte_100646FC;
  BYTE1(a1) = byte_100646FC;
  v4 = v2[6] * v2[7];
  v5 = a1 << 16;
  LOWORD(v5) = a1;
  memset32(v3, v5, v4 >> 2);
  memset(&v3[4 * (v4 >> 2)], a1, v4 & 3);
  return v5;
}
// 100645CC: using guessed type int IDA__endgame_window;
// 100646FC: using guessed type char byte_100646FC;

//----- (10011EB0) --------------------------------------------------------
__int16 __usercall sub_10011EB0@<ax>(int a1@<eax>, int a2@<ebx>)
{
  return sub_10011E50(a2, a1);
}

//----- (10011ED0) --------------------------------------------------------
int __usercall sub_10011ED0@<eax>(int a1@<ebx>, char *a2, int a3)
{
  _DWORD *v3; // esi
  char *v4; // edi
  unsigned int v5; // edx
  int v6; // eax
  int v7; // esi
  int v8; // ST20_4

  v3 = (_DWORD *)sub_1000EF10(*(void **)IDA__endgame_window);
  byte_100646FC = sub_1000ED60(a3);
  v4 = (char *)v3[11];
  LOBYTE(a1) = byte_100646FC;
  BYTE1(a1) = byte_100646FC;
  v5 = v3[6] * v3[7];
  v6 = a1 << 16;
  LOWORD(v6) = a1;
  memset32(v4, v6, v5 >> 2);
  memset(&v4[4 * (v5 >> 2)], a1, v5 & 3);
  sub_1000ED10((int)a2, dword_100646F4, dword_100646F8, dword_100646F4, byte_100646FC);
  v7 = v3[11];
  if ( LODWORD(end_slide_size) == 1 || dword_100646F4 > scr_width || dword_100646F8 > newBytes )
  {
    sub_1001D260((int)a2, dword_100646F4, dword_100646F8, dword_100646F4, v7, scr_width, newBytes, COERCE_FLOAT(1), 1);
  }
  else if ( LODWORD(end_slide_size) == 2 )
  {
    sub_1001D260((int)a2, dword_100646F4, dword_100646F8, dword_100646F4, v7, scr_width, newBytes, 0.0, 0);
  }
  else
  {
    sub_1001D1B0(
      a2,
      dword_100646F4,
      (char *)dword_100646F8,
      dword_100646F4,
      (char *)(v7 + scr_width * ((newBytes >> 1) - (dword_100646F8 >> 1)) - (dword_100646F4 >> 1) + (scr_width >> 1)),
      scr_width);
  }
  v8 = *(_DWORD *)IDA__endgame_window;
  sub_1000EFD0();
  return sub_1000EE90();
}
// 100645CC: using guessed type int IDA__endgame_window;
// 100646FC: using guessed type char byte_100646FC;

//----- (10011FD0) --------------------------------------------------------
int __usercall sub_10011FD0@<eax>(int a1@<eax>, int a2@<ebx>, char *a3@<edi>)
{
  return sub_10011ED0(a2, a3, a1);
}

//----- (10011FF0) --------------------------------------------------------
int __cdecl sub_10011FF0(int a1, int a2)
{
  int v2; // esi

  v2 = sub_10005CD0(a1, a2);
  dword_100646F4 = sub_10005CF0(v2, 0);
  dword_100646F8 = sub_10005D10(v2, 0);
  return v2;
}

//----- (10012030) --------------------------------------------------------
int __usercall sub_10012030@<eax>(int a1@<eax>, int a2@<edx>)
{
  return sub_10011FF0(a1, a2);
}

//----- (10012040) --------------------------------------------------------
int __stdcall sub_10012040(int a1, int a2)
{
  LODWORD(end_slide_size) = F_GetPrivateProfileIntA("STATIC_SCREENS", "END_SLIDE_SIZE", 0);
  return sub_1000EF30(0, 0, scr_width, newBytes, a1, a2);
}
// 10012040: using guessed type int __stdcall sub_10012040(int, int);

//----- (10012080) --------------------------------------------------------
int __usercall sub_10012080@<eax>(void *a1@<ecx>, int a2@<ebx>)
{
  int result; // eax
  int v3; // esi
  int v4; // edx
  int v5; // eax
  int v6; // eax
  char *v7; // edi
  char v8; // dl
  unsigned int v9; // ecx
  int v10; // eax

  result = *(_DWORD *)IDA__endgame_window;
  if ( *(_DWORD *)IDA__endgame_window != -1 )
  {
    v3 = sub_1000EF10(a1);
    result = 0;
    if ( v3 )
    {
      *(_DWORD *)(v3 + 24) = scr_width;
      v4 = newBytes;
      *(_DWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 12) = 0;
      *(_DWORD *)(v3 + 28) = v4;
      *(_DWORD *)(v3 + 16) = scr_width - 1;
      v5 = *(_DWORD *)(v3 + 44);
      *(_DWORD *)(v3 + 20) = newBytes - 1;
      v6 = sub_1000F190(v5, scr_width * newBytes);
      v7 = (char *)v6;
      LOBYTE(a2) = *(_BYTE *)(v3 + 32);
      *(_DWORD *)(v3 + 44) = v6;
      BYTE1(a2) = a2;
      v8 = scr_width * newBytes;
      v9 = (unsigned int)(scr_width * newBytes) >> 2;
      v10 = a2 << 16;
      LOWORD(v10) = a2;
      memset32(v7, v10, v9);
      memset(&v7[4 * v9], a2, v8 & 3);
      result = *(_DWORD *)(v3 + 44);
      *(_DWORD *)IDA__endgame_window_buffer = result;
    }
  }
  return result;
}
// 100645CC: using guessed type int IDA__endgame_window;
// 10064700: using guessed type int IDA__endgame_window_buffer;

//----- (10012130) --------------------------------------------------------
void sub_10012130()
{
  ;
}

//----- (10012140) --------------------------------------------------------
void sub_10012140()
{
  ;
}

//----- (10012170) --------------------------------------------------------
int F_initFunc20()
{
  int v0; // esi
  int v1; // eax
  int v2; // esi
  int v3; // eax
  int result; // eax

  F_writeMem8(4430198, 0xBAu, 232);
  F_writeMem32(0x439977u, 480, (int)sub_10012130);
  F_writeMem8(4430357, 0xB9u, 232);
  F_writeMem32(0x439A16u, 640, (int)sub_10012140);
  F_writeMem8(4430412, 0xB9u, 232);
  F_writeMem32(0x439A4Du, 640, (int)sub_10012140);
  F_writeMem8(4430332, 0xBAu, 232);
  F_writeMem32(0x4399FDu, 640, (int)dword_10012150);
  F_writeMem24(0x438FEAu, -132702, (int)sub_10012030);
  F_writeMem24(0x4391DFu, 545457, (int)sub_10011D80);
  F_writeMem24(0x43940Bu, -133759, (int)sub_10012030);
  F_writeMem24(0x439522u, 544622, (int)sub_10011CB0);
  F_writeMem24(0x43949Au, 311654, (int)sub_10011FD0);
  F_writeMem8(4428870, 0xE8u, 144);
  v0 = -4 - F_ptrCorrection_(4428871);
  v1 = F_ptrCorrection_(4973716);
  F_writeMemUnk(0x439447u, v1 + v0, -1869574000);
  F_writeMem8(4428883, 0xE8u, 144);
  v2 = -4 - F_ptrCorrection_(4428884);
  v3 = F_ptrCorrection_(4994376);
  F_writeMemUnk(0x439454u, v3 + v2, -1869574000);
  F_writeMem24(0x4392AFu, 312261, (int)sub_10011EB0);
  F_writeMem24(0x438E19u, 563723, (int)sub_10012040);
  result = F_ptrCorrection_(5697240);
  IDA__endgame_window_buffer = result;
  return result;
}
// 10012040: using guessed type int __stdcall sub_10012040(int, int);
// 10012150: using guessed type int dword_10012150[2];
// 10064700: using guessed type int IDA__endgame_window_buffer;

//----- (100124F0) --------------------------------------------------------
int __stdcall sub_100124F0(int a1, int a2)
{
  int v2; // eax

  v2 = newBytes;
  dword_10064704 = 0;
  dword_10064708 = 0;
  dword_1006470C = scr_width;
  dword_10064710 = newBytes;
  if ( !iface_bar_mode && byte_1003B1F8 )
  {
    v2 = newBytes - 99;
    dword_10064710 = newBytes - 99;
  }
  dword_10064714 = scr_width;
  dword_10064718 = v2;
  return sub_1000EF30(0, 0, scr_width, v2, a1, a2);
}
// 100124F0: using guessed type int __stdcall sub_100124F0(int, int);
// 1003B1F8: using guessed type char byte_1003B1F8;
// 10064704: using guessed type int dword_10064704;
// 10064708: using guessed type int dword_10064708;
// 1006470C: using guessed type int dword_1006470C;
// 10064710: using guessed type int dword_10064710;
// 10064714: using guessed type int dword_10064714;
// 10064718: using guessed type int dword_10064718;
// 1006AB2C: using guessed type int iface_bar_mode;

//----- (10012560) --------------------------------------------------------
int sub_10012560()
{
  int *v0; // eax
  int *v1; // eax

  v0 = (int *)sub_1000EF10(*(void **)IDA__display_win);
  if ( iface_bar_mode != 1 )
    return sub_1000EEE0(v0[2], v0[3], v0[4], v0[5]);
  if ( *(_DWORD *)IDA__interfaceWindow == -1 )
    return sub_1000EEE0((scr_width >> 1) - 320, newBytes - 100, (scr_width >> 1) + 320, newBytes);
  v1 = (int *)sub_1000EF10((void *)iface_bar_mode);
  return sub_1000EEE0(v1[2], v1[3], v1[4], v1[5]);
}
// 100645D0: using guessed type int IDA__interfaceWindow;
// 100645EC: using guessed type int IDA__display_win;
// 1006AB2C: using guessed type int iface_bar_mode;

//----- (100125F0) --------------------------------------------------------
int sub_100125F0()
{
  int result; // eax

  result = sub_10012560();
  if ( iface_bar_mode )
    result = result == 0;
  return result;
}
// 100125F0: using guessed type int sub_100125F0();
// 1006AB2C: using guessed type int iface_bar_mode;

//----- (10012620) --------------------------------------------------------
char sub_10012620()
{
  int v0; // eax
  _DWORD *v2; // eax
  _DWORD *v3; // esi
  int v4; // eax

  v0 = newBytes;
  dword_10064704 = 0;
  dword_10064708 = 0;
  dword_1006470C = scr_width;
  dword_10064710 = newBytes;
  if ( !iface_bar_mode && byte_1003B1F8 )
  {
    v0 = newBytes - 99;
    dword_10064710 = newBytes - 99;
  }
  dword_10064718 = v0;
  dword_10064714 = scr_width;
  if ( *(_DWORD *)IDA__display_win == -1 )
    return 0;
  v2 = (_DWORD *)sub_1000EF10((void *)scr_width);
  v3 = v2;
  if ( !v2 )
    return 0;
  v2[6] = dword_10064714;
  v2[7] = dword_10064718;
  v2[2] = 0;
  v2[3] = 0;
  v2[4] = dword_10064714 - 1;
  v4 = v2[11];
  v3[5] = dword_10064718 - 1;
  v3[11] = sub_1000F190(v4, dword_10064714 * dword_10064718);
  return 1;
}
// 1003B1F8: using guessed type char byte_1003B1F8;
// 100645EC: using guessed type int IDA__display_win;
// 10064704: using guessed type int dword_10064704;
// 10064708: using guessed type int dword_10064708;
// 1006470C: using guessed type int dword_1006470C;
// 10064710: using guessed type int dword_10064710;
// 10064714: using guessed type int dword_10064714;
// 10064718: using guessed type int dword_10064718;
// 1006AB2C: using guessed type int iface_bar_mode;

//----- (100126E0) --------------------------------------------------------
int sub_100126E0()
{
  int result; // eax

  result = dword_10064710;
  if ( dword_10064710 > dword_10064270 )
    result = dword_10064270 + 1;
  return result;
}
// 100126E0: using guessed type int sub_100126E0();
// 10064270: using guessed type int dword_10064270;
// 10064710: using guessed type int dword_10064710;

//----- (10012700) --------------------------------------------------------
int sub_10012700()
{
  int result; // eax

  result = dword_1006470C;
  if ( dword_1006470C > dword_1006426C )
    result = dword_1006426C + 1;
  return result;
}
// 10012700: using guessed type int sub_10012700();
// 1006426C: using guessed type int dword_1006426C;
// 1006470C: using guessed type int dword_1006470C;

//----- (10012720) --------------------------------------------------------
int F_initFunc14()
{
  int v0; // eax
  int v1; // eax
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int v7; // eax
  int v8; // eax
  int v9; // eax
  int v10; // eax
  int v11; // eax
  int v12; // eax
  int v13; // eax

  v0 = F_ptrCorrection_(6758808);
  F_writeMemUnk(0x473E26u, v0, (int)&dword_1006470C);
  F_writeMem8(4668981, 1u, 0);
  v1 = F_ptrCorrection_(6758812);
  F_writeMemUnk(0x473E3Du, v1, (int)&dword_10064710);
  func_writeMem16(4669001, 0xE883u, 37008);
  F_writeMem8(4669003, 0x63u, 144);
  v2 = F_ptrCorrection_(6758808);
  F_writeMemUnk(0x473E97u, v2, (int)&dword_1006470C);
  F_writeMem8(4669091, 1u, 0);
  v3 = F_ptrCorrection_(6758812);
  F_writeMemUnk(0x473EABu, v3, (int)&dword_10064710);
  F_writeMem8(4669110, 0x9Du, 0);
  v4 = F_ptrCorrection_(6758808);
  F_writeMemUnk(0x474791u, v4, (int)&dword_1006470C);
  F_writeMem8(4671389, 1u, 0);
  v5 = F_ptrCorrection_(6758812);
  F_writeMemUnk(0x4747A5u, v5, (int)&dword_10064710);
  func_writeMem16(4671403, 0xE883u, 37008);
  F_writeMem8(4671405, 0x63u, 144);
  v6 = F_ptrCorrection_(6758812);
  F_writeMemUnk(0x474847u, v6, (int)&dword_10064710);
  F_writeMem8(4671567, 0x64u, 1);
  v7 = F_ptrCorrection_(6758808);
  F_writeMemUnk(0x4747E6u, v7, (int)&dword_1006470C);
  F_writeMem8(4671476, 0x40u, 144);
  v8 = F_ptrCorrection_(6758808);
  F_writeMemUnk(0x474820u, v8, (int)&dword_1006470C);
  F_writeMem8(4671530, 0x40u, 144);
  v9 = F_ptrCorrection_(6758808);
  F_writeMemUnk(0x474870u, v9, (int)&dword_1006470C);
  F_writeMem8(4671610, 0x40u, 144);
  F_writeMem8(4471408, 0xA1u, 232);
  v10 = F_ptrCorrection_(6758812);
  F_writeMem32(0x443A71u, v10, (int)sub_100126E0);
  func_writeMem16(4471419, 0xE883u, 37008);
  F_writeMem8(4471421, 0x63u, 144);
  F_writeMem8(4471429, 0xA1u, 232);
  v11 = F_ptrCorrection_(6758808);
  F_writeMem32(0x443A86u, v11, (int)sub_10012700);
  F_writeMem8(4471445, 1u, 0);
  F_writeMem8(4474017, 0xA1u, 232);
  v12 = F_ptrCorrection_(6758812);
  F_writeMem32(0x4444A2u, v12, (int)sub_100126E0);
  func_writeMem16(4474028, 0xE883u, 37008);
  F_writeMem8(4474030, 0x63u, 144);
  F_writeMem8(4474038, 0xA1u, 232);
  v13 = F_ptrCorrection_(6758808);
  F_writeMem32(0x4444B7u, v13, (int)sub_10012700);
  F_writeMem8(4474049, 0x40u, 144);
  F_writeMem24(0x443F71u, 464763, (int)sub_100125F0);
  F_writeMem24(0x473D84u, 322208, (int)sub_100124F0);
  func_writeMem16(4481851, 0xC031u, 59536);
  return F_writeMem32(0x44633Du, -919481807, (int)dword_10012480);
}
// 10012480: using guessed type int dword_10012480[11];
// 100124F0: using guessed type int __stdcall sub_100124F0(int, int);
// 100125F0: using guessed type int sub_100125F0();
// 100126E0: using guessed type int sub_100126E0();
// 10012700: using guessed type int sub_10012700();
// 1006470C: using guessed type int dword_1006470C;
// 10064710: using guessed type int dword_10064710;

//----- (10012AB0) --------------------------------------------------------
int __stdcall sub_10012AB0(int a1, int a2)
{
  void *v2; // ecx
  unsigned __int8 v3; // al
  int result; // eax

  help_scrn_size = F_GetPrivateProfileIntA("STATIC_SCREENS", "HELP_SCRN_SIZE", 0);
  sub_1000EE60(v2);
  v3 = sub_1000ED60(IDA__cmap);
  result = sub_1000EF30(0, 0, scr_width, newBytes, v3, a2);
  dword_1003B114 = result;
  return result;
}
// 10012AB0: using guessed type int __stdcall sub_10012AB0(int, int);
// 1003B114: using guessed type int dword_1003B114;
// 10064614: using guessed type int IDA__cmap;
// 1006471C: using guessed type int help_scrn_size;

//----- (10012B10) --------------------------------------------------------
char *__cdecl sub_10012B10(char *a1, int a2, int a3, int a4, int a5)
{
  char v5; // al

  v5 = sub_1000ED60(IDA__cmap);
  sub_1000ED10((int)a1, a2, a3, a4, v5);
  if ( help_scrn_size == 1 || dword_10064720 > scr_width || dword_10064724 > newBytes )
    return (char *)sub_1001D260(
                     (int)a1,
                     dword_10064720,
                     dword_10064724,
                     dword_10064720,
                     a5,
                     scr_width,
                     newBytes,
                     COERCE_FLOAT(1),
                     1);
  if ( help_scrn_size == 2 )
    return (char *)sub_1001D260(
                     (int)a1,
                     dword_10064720,
                     dword_10064724,
                     dword_10064720,
                     a5,
                     scr_width,
                     newBytes,
                     0.0,
                     0);
  return sub_1001D1B0(
           a1,
           dword_10064720,
           (char *)dword_10064724,
           dword_10064720,
           (char *)(a5 + scr_width * ((newBytes >> 1) - (dword_10064724 >> 1)) - (dword_10064720 >> 1) + (scr_width >> 1)),
           scr_width);
}
// 10064614: using guessed type int IDA__cmap;
// 1006471C: using guessed type int help_scrn_size;

//----- (10012BD0) --------------------------------------------------------
int __cdecl sub_10012BD0(int a1, int a2)
{
  int v2; // esi

  v2 = sub_10005CD0(a1, a2);
  dword_10064720 = sub_10005CF0(v2, 0);
  dword_10064724 = sub_10005D10(v2, 0);
  return sub_10005D30(v2, 0);
}

//----- (10012C10) --------------------------------------------------------
int __usercall sub_10012C10@<eax>(int a1@<eax>, int a2@<ecx>)
{
  return sub_10012BD0(a1, a2);
}

//----- (10012C20) --------------------------------------------------------
int sub_10012C20()
{
  int result; // eax

  result = sub_1000EF60();
  dword_1003B114 = -1;
  return result;
}
// 10012C20: using guessed type int sub_10012C20();
// 1003B114: using guessed type int dword_1003B114;

//----- (10012C50) --------------------------------------------------------
_DWORD *__thiscall sub_10012C50(void *this)
{
  _DWORD *result; // eax
  _DWORD *v2; // esi
  int v3; // ebx
  int v4; // edx
  char *v5; // edi
  char v6; // al
  char v7; // dl
  unsigned int v8; // ecx
  int v9; // eax
  int v10; // eax
  int v11; // edi
  char *v12; // ebp
  int v13; // ebx
  int v14; // eax
  int v15; // [esp+4h] [ebp-4h]

  result = (_DWORD *)dword_1003B114;
  if ( dword_1003B114 != -1 )
  {
    result = (_DWORD *)sub_1000EF10(this);
    v2 = result;
    HIWORD(v3) = 0;
    if ( result )
    {
      result[6] = scr_width;
      result[7] = newBytes;
      result[2] = 0;
      result[3] = 0;
      result[4] = scr_width - 1;
      v4 = result[11];
      result[5] = newBytes - 1;
      v5 = (char *)sub_1000F190(v4, scr_width * newBytes);
      v6 = *((_BYTE *)v2 + 32);
      LOBYTE(v3) = v6;
      v2[11] = v5;
      BYTE1(v3) = v6;
      v7 = scr_width * newBytes;
      v8 = (unsigned int)(scr_width * newBytes) >> 2;
      v9 = v3 << 16;
      LOWORD(v9) = v3;
      memset32(v5, v9, v8);
      memset(&v5[4 * v8], v3, v7 & 3);
      v10 = sub_10005C60(6, 297, 0, 0, 0);
      v11 = sub_10005CD0(v10, (int)&v15);
      v12 = (char *)sub_10005D30(v11, 0);
      v13 = sub_10005CF0(v11, 0);
      v14 = sub_10005D10(v11, 0);
      sub_10012B10(v12, v13, v14, v13, v2[11]);
      result = (_DWORD *)sub_10005C90();
    }
  }
  return result;
}
// 1003B114: using guessed type int dword_1003B114;

//----- (10012D60) --------------------------------------------------------
int sub_10012D60()
{
  void *v0; // ecx

  sub_1000EE80();
  return sub_1000D320(v0);
}
// 10012D60: using guessed type int sub_10012D60();

//----- (10012D80) --------------------------------------------------------
int F_initFunc28()
{
  F_writeMem24(0x43D51Fu, 545541, (int)sub_10012AB0);
  F_writeMem24(0x43D58Au, 528134, (int)sub_10012B10);
  F_writeMem24(0x43D55Bu, -150439, (int)sub_10012C10);
  F_writeMem24(0x43D5E4u, 545900, (int)sub_10012C20);
  return F_writeMem24(0x43D5F8u, 295036, (int)sub_10012D60);
}
// 10012AB0: using guessed type int __stdcall sub_10012AB0(int, int);
// 10012C20: using guessed type int sub_10012C20();
// 10012D60: using guessed type int sub_10012D60();

//----- (10012DF0) --------------------------------------------------------
int sub_10012DF0()
{
  int result; // eax
  int v1; // ST24_4
  int v2; // ebx
  int v3; // ST18_4
  int v4; // esi
  int v5; // ebp
  int v6; // edx
  int i; // edi

  result = IDA__disp_init;
  if ( *(_DWORD *)IDA__disp_init )
  {
    v1 = *(_DWORD *)IDA__interfaceWindow;
    result = sub_1000EF10((void *)IDA__interfaceWindow);
    v2 = result;
    if ( result )
    {
      result = *(_DWORD *)(result + 44);
      if ( result )
      {
        sub_1000E5F0();
        v3 = *(_DWORD *)IDA_display_redraw___someCall1;
        sub_1000E5E0();
        v4 = dword_1006AB84 + *(_DWORD *)(v2 + 44) + dword_1006AB88 * *(_DWORD *)(v2 + 24);
        v5 = dword_1006AB8C;
        sub_1001D1B0(
          (char *)dword_1006AB6C,
          dword_1006AB8C,
          (char *)dword_1006AB90,
          dword_1006AB8C,
          (char *)(dword_1006AB84 + *(_DWORD *)(v2 + 44) + dword_1006AB88 * *(_DWORD *)(v2 + 24)),
          *(_DWORD *)(v2 + 24));
        v6 = *(_DWORD *)IDA__max_disp;
        for ( i = 0; i < *(_DWORD *)IDA__max_disp; ++i )
        {
          sub_1000E600(
            v4 + i * (dword_1006AB80 * *(_DWORD *)(v2 + 24) + 1),
            (int)&unk_10064728
          + dword_1003B128 * ((i + dword_1003B12C + *(_DWORD *)IDA__disp_curr - v6) % dword_1003B12C),
            v5,
            *(_DWORD *)(v2 + 24),
            **(_BYTE **)IDA__dn_bid);
          v6 = *(_DWORD *)IDA__max_disp;
        }
        sub_1000F9D0(*(_DWORD *)IDA__interfaceWindow, (_DWORD *)IDA__disp_rect);
        result = sub_1000E5E0();
      }
    }
  }
  return result;
}
// 1003B128: using guessed type int dword_1003B128;
// 1003B12C: using guessed type int dword_1003B12C;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB3C: using guessed type int IDA__disp_rect;
// 1006AB48: using guessed type int IDA__dn_bid;
// 1006AB4C: using guessed type int IDA_display_redraw___someCall1;
// 1006AB58: using guessed type int IDA__disp_curr;
// 1006AB5C: using guessed type int IDA__max_disp;
// 1006AB6C: using guessed type int dword_1006AB6C;
// 1006AB70: using guessed type int IDA__disp_init;
// 1006AB80: using guessed type int dword_1006AB80;
// 1006AB84: using guessed type int dword_1006AB84;
// 1006AB88: using guessed type int dword_1006AB88;
// 1006AB8C: using guessed type int dword_1006AB8C;
// 1006AB90: using guessed type int dword_1006AB90;

//----- (10012F10) --------------------------------------------------------
int sub_10012F10()
{
  return sub_10012DF0();
}
// 10012F10: using guessed type int sub_10012F10();

//----- (10012F30) --------------------------------------------------------
int __cdecl sub_10012F30(char *a1)
{
  int result; // eax
  char v2; // bl
  int v3; // eax
  int v4; // ST10_4
  int v5; // eax
  int v6; // ST08_4
  int v7; // esi
  char v8; // al
  int v9; // edi
  int v10; // esi
  void *v11; // ecx
  char *v12; // ebp
  char *v13; // esi
  int v14; // edi
  char v15; // [esp+0h] [ebp-Ch]
  char v16; // [esp+1h] [ebp-Bh]
  int v17; // [esp+4h] [ebp-8h]
  int v18; // [esp+8h] [ebp-4h]

  result = IDA__disp_init;
  if ( *(_DWORD *)IDA__disp_init )
  {
    v2 = -107;
    v3 = sub_1000E5F0();
    v4 = *(_DWORD *)IDA_display_redraw___someCall1;
    v18 = v3;
    sub_1000E5E0();
    v15 = -107;
    v16 = 0;
    v5 = sub_1000E690();
    v6 = *(_DWORD *)IDA__interfaceWindow;
    v7 = v5;
    result = sub_1000EF10((void *)IDA__interfaceWindow);
    if ( result )
    {
      v8 = *(_BYTE *)IDA__combat_state;
      v9 = dword_1006AB8C - *(_DWORD *)IDA__max_disp - v7;
      v17 = dword_1006AB8C - *(_DWORD *)IDA__max_disp - v7;
      if ( !(v8 & 1) )
      {
        v10 = *(_DWORD *)IDA__bk_process_time;
        v11 = *(void **)IDA__lastTime;
        if ( *(_DWORD *)IDA__lastTime >= *(_DWORD *)IDA__bk_process_time || v10 - (signed int)v11 >= 500 )
        {
          sub_1000F110(v11);
          *(_DWORD *)IDA__lastTime = v10;
        }
      }
      v12 = a1;
      if ( *a1 )
      {
        while ( 1 )
        {
          v13 = (char *)&unk_10064728 + dword_1003B128 * *(_DWORD *)IDA__disp_start;
          if ( v2 )
            *v13++ = v2;
          v14 = sub_1000E7F0(v12, v9);
          if ( v12[v14] == 32 )
            ++v14;
          strncpy(v13, v12, v14);
          v13[v14] = 0;
          if ( v14 )
            v12 += v14;
          else
            *v12 = 0;
          v2 = 0;
          *(_DWORD *)IDA__disp_start = (*(_DWORD *)IDA__disp_start + 1) % dword_1003B12C;
          if ( !*v12 )
            break;
          v9 = v17;
        }
      }
      *(_DWORD *)IDA__disp_curr = *(_DWORD *)IDA__disp_start;
      sub_1000E5E0();
      result = sub_10012DF0();
    }
  }
  return result;
}
// 1003B128: using guessed type int dword_1003B128;
// 1003B12C: using guessed type int dword_1003B12C;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB4C: using guessed type int IDA_display_redraw___someCall1;
// 1006AB50: using guessed type int alternate_ammo_metre;
// 1006AB54: using guessed type int IDA__disp_start;
// 1006AB58: using guessed type int IDA__disp_curr;
// 1006AB5C: using guessed type int IDA__max_disp;
// 1006AB60: using guessed type int IDA__lastTime;
// 1006AB64: using guessed type int IDA__bk_process_time;
// 1006AB70: using guessed type int IDA__disp_init;
// 1006AB74: using guessed type int IDA__combat_state;
// 1006AB8C: using guessed type int dword_1006AB8C;

//----- (10013090) --------------------------------------------------------
#error "1001309A: positive sp value has been found (funcsize=4)"

//----- (100130A0) --------------------------------------------------------
int sub_100130A0()
{
  int result; // eax
  int v1; // ecx
  _BYTE *i; // eax

  result = IDA__disp_init;
  if ( *(_DWORD *)IDA__disp_init )
  {
    v1 = 0;
    for ( i = &unk_10064728; v1 < dword_1003B12C; ++v1 )
    {
      *i = 0;
      i += dword_1003B128;
    }
    *(_DWORD *)IDA__disp_start = 0;
    *(_DWORD *)IDA__disp_curr = 0;
    result = sub_10012DF0();
  }
  return result;
}
// 1003B128: using guessed type int dword_1003B128;
// 1003B12C: using guessed type int dword_1003B12C;
// 1006AB54: using guessed type int IDA__disp_start;
// 1006AB58: using guessed type int IDA__disp_curr;
// 1006AB70: using guessed type int IDA__disp_init;

//----- (10013100) --------------------------------------------------------
int sub_10013100()
{
  sub_100130A0();
  return 0;
}
// 10013100: using guessed type int sub_10013100();

//----- (10013110) --------------------------------------------------------
#error "1001311A: positive sp value has been found (funcsize=0)"

//----- (10013130) --------------------------------------------------------
int __thiscall sub_10013130(void *this)
{
  return sub_1000F0D0(this);
}

//----- (10013140) --------------------------------------------------------
int __thiscall sub_10013140(void *this)
{
  return sub_1000F0D0(this);
}

//----- (10013150) --------------------------------------------------------
int sub_10013150()
{
  int v0; // edx

  v0 = (*(_DWORD *)IDA__disp_curr + dword_1003B12C - 1) % dword_1003B12C;
  if ( v0 != *(_DWORD *)IDA__disp_start )
    *(_DWORD *)IDA__disp_curr = v0;
  return sub_10012DF0();
}
// 1003B12C: using guessed type int dword_1003B12C;
// 1006AB50: using guessed type int alternate_ammo_metre;
// 1006AB54: using guessed type int IDA__disp_start;
// 1006AB58: using guessed type int IDA__disp_curr;

//----- (10013180) --------------------------------------------------------
int sub_10013180()
{
  int result; // eax

  result = *(_DWORD *)IDA__disp_curr;
  if ( *(_DWORD *)IDA__disp_curr != *(_DWORD *)IDA__disp_start )
  {
    *(_DWORD *)IDA__disp_curr = (result + 1) % dword_1003B12C;
    result = sub_10012DF0();
  }
  return result;
}
// 1003B12C: using guessed type int dword_1003B12C;
// 1006AB54: using guessed type int IDA__disp_start;
// 1006AB58: using guessed type int IDA__disp_curr;

//----- (100131B0) --------------------------------------------------------
char __cdecl sub_100131B0(int a1, char a2)
{
  int v2; // ST0C_4
  int v3; // eax
  signed int v5; // esi
  int *v6; // ecx
  signed int v7; // ebx
  int v8; // edx
  int v9; // [esp+0h] [ebp-10h]
  int v10; // [esp+4h] [ebp-Ch]
  int v11; // [esp+8h] [ebp-8h]
  int v12; // [esp+Ch] [ebp-4h]

  if ( !*(_DWORD *)IDA__disp_init )
    return 0;
  v2 = *(_DWORD *)IDA__interfaceWindow;
  v3 = sub_1000EF10((void *)IDA__interfaceWindow);
  if ( !v3 || *(_BYTE *)(v3 + 4) & 8 )
    return 0;
  v9 = *(_DWORD *)IDA__disp_rect + *(_DWORD *)(v3 + 8);
  v10 = *(_DWORD *)(v3 + 12) + *(_DWORD *)(IDA__disp_rect + 4);
  v11 = *(_DWORD *)(v3 + 8) + *(_DWORD *)(IDA__disp_rect + 8);
  v12 = *(_DWORD *)(v3 + 12) + *(_DWORD *)(IDA__disp_rect + 12);
  v5 = 1;
  if ( a2 )
    v5 = *(_DWORD *)IDA__max_disp;
  if ( !sub_1000FA50(&v9) )
    return 0;
  if ( v5 > 0 )
  {
    v6 = (int *)IDA__disp_curr;
    v7 = v5;
    while ( a1 > 0 )
    {
      v8 = (*v6 + dword_1003B12C - 1) % dword_1003B12C;
      if ( v8 != *(_DWORD *)IDA__disp_start )
        goto LABEL_16;
LABEL_17:
      sub_10012DF0();
      v6 = (int *)IDA__disp_curr;
LABEL_18:
      if ( !--v7 )
        return 1;
    }
    if ( a1 >= 0 || *v6 == *(_DWORD *)IDA__disp_start )
      goto LABEL_18;
    v8 = (*v6 + 1) % dword_1003B12C;
LABEL_16:
    *v6 = v8;
    goto LABEL_17;
  }
  return 1;
}
// 1003B12C: using guessed type int dword_1003B12C;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB3C: using guessed type int IDA__disp_rect;
// 1006AB54: using guessed type int IDA__disp_start;
// 1006AB58: using guessed type int IDA__disp_curr;
// 1006AB5C: using guessed type int IDA__max_disp;
// 1006AB70: using guessed type int IDA__disp_init;

//----- (100132A0) --------------------------------------------------------
signed int sub_100132A0()
{
  int v0; // ST44_4
  void *v1; // ecx
  void *v2; // ecx
  int v3; // ST3C_4
  int v4; // eax
  int v5; // esi
  int v6; // ecx
  _DWORD *v8; // eax
  int v9; // ecx
  int v10; // edx
  _DWORD *v11; // eax
  int v12; // edx
  int v13; // ecx

  sub_1000E5F0();
  v0 = *(_DWORD *)IDA_display_redraw___someCall1;
  sub_1000E5E0();
  dword_1006AB80 = sub_1000E670(v1);
  sub_1000E5E0();
  v3 = *(_DWORD *)IDA__interfaceWindow;
  v4 = sub_1000EF10(v2);
  v5 = v4;
  if ( !v4 )
    return -1;
  dword_1006AB84 = 23;
  v6 = *(_DWORD *)(v4 + 24);
  dword_1006AB90 = 60;
  dword_1006AB8C = v6 - 473;
  dword_1006AB88 = 24;
  *(_DWORD *)IDA__max_disp = 60 / dword_1006AB80;
  *(_DWORD *)IDA__disp_start = 0;
  *(_DWORD *)IDA__disp_curr = 0;
  dword_1006AB6C = sub_1000F190(dword_1006AB6C, dword_1006AB8C * dword_1006AB90);
  *(_DWORD *)IDA__disp_buf = dword_1006AB6C;
  if ( !dword_1006AB6C )
    return -1;
  sub_1001D1B0(
    (char *)(dword_1006AB84 + *(_DWORD *)(v5 + 44) + dword_1006AB88 * *(_DWORD *)(v5 + 24)),
    dword_1006AB8C,
    (char *)dword_1006AB90,
    *(_DWORD *)(v5 + 24),
    (char *)dword_1006AB6C,
    dword_1006AB8C);
  if ( *(_DWORD *)IDA__disp_init )
  {
    v8 = (_DWORD *)sub_1000F0B0(*(_DWORD *)IDA__up_bid, 0);
    if ( v8 )
    {
      v9 = dword_1006AB84;
      v8[2] = dword_1006AB84;
      v8[4] = dword_1006AB8C + v9;
      v10 = dword_1006AB88 + 30;
      v8[3] = dword_1006AB88;
      v8[5] = v10;
    }
    v11 = (_DWORD *)sub_1000F0B0(*(_DWORD *)dword_1006AB7C, 0);
    if ( v11 )
    {
      v12 = dword_1006AB84;
      v11[2] = dword_1006AB84;
      v11[4] = dword_1006AB8C + v12;
      v13 = dword_1006AB88 + 30;
      v11[3] = dword_1006AB88 + 30;
      v11[5] = v13 + 30;
    }
  }
  else
  {
    *(_DWORD *)IDA__up_bid = sub_1000F000(
                               *(_DWORD *)IDA__interfaceWindow,
                               dword_1006AB84,
                               dword_1006AB88,
                               dword_1006AB8C,
                               30,
                               -1,
                               -1,
                               -1,
                               -1,
                               0,
                               0,
                               0,
                               0);
    sub_1000F040(*(_DWORD *)IDA__up_bid, (int)sub_10013130, (int)sub_10013120, (int)sub_10013150, 0);
    *(_DWORD *)dword_1006AB7C = sub_1000F000(
                                  *(_DWORD *)IDA__interfaceWindow,
                                  dword_1006AB84,
                                  dword_1006AB88 + 30,
                                  dword_1006AB8C,
                                  30,
                                  -1,
                                  -1,
                                  -1,
                                  -1,
                                  0,
                                  0,
                                  0,
                                  0);
    sub_1000F040(*(_DWORD *)dword_1006AB7C, (int)sub_10013140, (int)sub_10013120, (int)sub_10013180, 0);
  }
  sub_100130A0();
  *(_DWORD *)IDA__disp_init = 1;
  sub_10012DF0();
  return 0;
}
// 10013120: using guessed type int sub_10013120();
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB4C: using guessed type int IDA_display_redraw___someCall1;
// 1006AB54: using guessed type int IDA__disp_start;
// 1006AB58: using guessed type int IDA__disp_curr;
// 1006AB5C: using guessed type int IDA__max_disp;
// 1006AB68: using guessed type int IDA__disp_buf;
// 1006AB6C: using guessed type int dword_1006AB6C;
// 1006AB70: using guessed type int IDA__disp_init;
// 1006AB78: using guessed type int IDA__up_bid;
// 1006AB7C: using guessed type int dword_1006AB7C;
// 1006AB80: using guessed type int dword_1006AB80;
// 1006AB84: using guessed type int dword_1006AB84;
// 1006AB88: using guessed type int dword_1006AB88;
// 1006AB8C: using guessed type int dword_1006AB8C;
// 1006AB90: using guessed type int dword_1006AB90;

//----- (10013500) --------------------------------------------------------
signed int sub_10013500()
{
  return sub_100132A0();
}

//----- (10013520) --------------------------------------------------------
int __cdecl sub_10013520(_DWORD *a1, int a2, int a3)
{
  int v3; // eax

  v3 = sub_1000EF10(*(void **)IDA__interfaceWindow);
  if ( !v3 )
    return a3;
  *a1 += *(_DWORD *)(v3 + 24) - 640;
  return a3 + a2 * *(_DWORD *)(v3 + 24);
}
// 100645D0: using guessed type int IDA__interfaceWindow;

//----- (10013560) --------------------------------------------------------
int __usercall sub_10013560@<eax>(int a1@<eax>, int a2@<edx>, int a3, int a4, int a5, int a6, int a7, int a8, int a9, ...)
{
  va_list va; // [esp+2Ch] [ebp+20h]

  va_start(va, a9);
  return sub_10013520(va, a1, a2);
}

//----- (10013580) --------------------------------------------------------
char __cdecl sub_10013580(signed int a1, _BYTE *a2, _BYTE *a3)
{
  char result; // al

  result = alternate_ammo_metre;
  if ( alternate_ammo_metre == 1 )
  {
    *a2 = alternate_ammo_light;
    result = alternate_ammo_dark;
    *a3 = alternate_ammo_dark;
  }
  else if ( alternate_ammo_metre <= 1 || alternate_ammo_metre > 3 )
  {
    *a2 = -60;
    *a3 = 75;
  }
  else
  {
    result = a1;
    if ( a1 > 14 )
    {
      if ( a1 > 28 )
      {
        if ( a1 > 42 )
        {
          if ( a1 > 56 )
          {
            result = (char)a3;
            *a2 = -41;
            *a3 = 75;
          }
          else
          {
            result = (char)a2;
            *a2 = 58;
            *a3 = 66;
          }
        }
        else
        {
          *a2 = -111;
          *a3 = -102;
        }
      }
      else
      {
        result = (char)a3;
        *a2 = -124;
        *a3 = -116;
      }
    }
    else
    {
      result = (char)a2;
      *a2 = -120;
      *a3 = -75;
    }
  }
  return result;
}
// 1003B130: using guessed type char alternate_ammo_light;
// 1003B131: using guessed type char alternate_ammo_dark;
// 1006AB50: using guessed type int alternate_ammo_metre;

//----- (10013620) --------------------------------------------------------
int __cdecl sub_10013620(int a1, signed int a2)
{
  int result; // eax
  int v3; // edi
  signed int v4; // ebx
  int v5; // esi
  int v6; // ebp
  int v7; // eax
  _BYTE *v8; // esi
  unsigned int v9; // eax
  int v10; // ebp
  _BYTE *v11; // esi
  int v12; // ebp
  char v13; // al
  __int16 v14; // dx
  int v15; // ecx
  _BYTE *v16; // esi
  int v17; // ecx
  char v18; // [esp+6h] [ebp-16h]
  char v19; // [esp+7h] [ebp-15h]
  int v20; // [esp+8h] [ebp-14h]
  int v21; // [esp+Ch] [ebp-10h]
  int v22; // [esp+10h] [ebp-Ch]
  int v23; // [esp+14h] [ebp-8h]
  int v24; // [esp+18h] [ebp-4h]
  int v25; // [esp+20h] [ebp+4h]

  result = sub_1000EF10(*(void **)IDA__interfaceWindow);
  v3 = result;
  if ( result )
  {
    v4 = a2;
    v5 = *(_DWORD *)(result + 24);
    v6 = a1 + v5 - 642;
    v25 = a1 + v5 - 642;
    sub_10013580(a2, &v19, &v18);
    if ( a2 & 1 )
      v4 = a2 - 1;
    v7 = *(_DWORD *)(v3 + 44) + 25 * v5 + v6 - 1;
    *(_DWORD *)v7 = 252645135;
    *(_BYTE *)(v7 + 4) = 15;
    v8 = (_BYTE *)(*(_DWORD *)(v3 + 24) + v7);
    if ( v4 < 70 )
    {
      v9 = ((unsigned int)(69 - v4) >> 1) + 1;
      do
      {
        *v8 = 11;
        v10 = (int)(v8 + 1);
        *(_WORD *)v10 = 3341;
        *(_BYTE *)(v10 + 2) = 13;
        v8[4] = 15;
        v11 = &v8[*(_DWORD *)(v3 + 24)];
        *v11 = 11;
        v12 = (int)(v11 + 1);
        *(_WORD *)v12 = 3855;
        *(_BYTE *)(v12 + 2) = 15;
        v11[4] = 15;
        v8 = &v11[*(_DWORD *)(v3 + 24)];
        --v9;
      }
      while ( v9 );
      v6 = v25;
    }
    if ( v4 > 0 )
    {
      v13 = v18;
      do
      {
        if ( alternate_ammo_metre == 3 )
        {
          sub_10013580(v4, &v19, &v18);
          v13 = v18;
        }
        LOBYTE(v14) = v19;
        *v8 = 11;
        HIBYTE(v14) = v14;
        v15 = (int)(v8 + 1);
        v20 = v4;
        *(_WORD *)v15 = v14;
        *(_BYTE *)(v15 + 2) = v14;
        v8[4] = v13;
        LOBYTE(v14) = v13;
        v16 = &v8[*(_DWORD *)(v3 + 24)];
        HIBYTE(v14) = v13;
        *v16 = 11;
        v17 = (int)(v16 + 1);
        *(_WORD *)v17 = v14;
        *(_BYTE *)(v17 + 2) = v13;
        v16[4] = v13;
        v8 = &v16[*(_DWORD *)(v3 + 24)];
        v4 = v20 - 2;
      }
      while ( v20 - 2 > 0 );
      v6 = v25;
    }
    *(_DWORD *)v8 = 168430090;
    v8[4] = 10;
    v21 = v6;
    v22 = 26;
    v23 = v6 + 3;
    v24 = 96;
    result = sub_1000F9D0(*(_DWORD *)IDA__interfaceWindow, &v21);
  }
  return result;
}
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB50: using guessed type int alternate_ammo_metre;

//----- (10013790) --------------------------------------------------------
int __cdecl sub_10013790(int a1, signed int a2)
{
  void *v2; // ecx
  int result; // eax
  int v4; // ST0C_4
  int v5; // ecx
  int v6; // edi
  int v7; // edx
  _BYTE *v8; // ecx
  int v9; // esi
  unsigned int v10; // edx
  _BYTE *v11; // ecx
  int v12; // [esp+0h] [ebp-10h]
  int v13; // [esp+4h] [ebp-Ch]
  int v14; // [esp+8h] [ebp-8h]
  int v15; // [esp+Ch] [ebp-4h]

  if ( alternate_ammo_metre )
    return sub_10013620(a1, a2);
  v4 = *(_DWORD *)IDA__interfaceWindow;
  result = sub_1000EF10(v2);
  if ( result )
  {
    v5 = *(_DWORD *)(result + 24);
    v6 = a1 + v5 - 640;
    v7 = a2;
    if ( a2 & 1 )
      v7 = a2 - 1;
    v8 = (_BYTE *)(v6 + *(_DWORD *)(result + 44) + 26 * v5);
    if ( v7 < 70 )
    {
      v9 = 70 - v7;
      do
      {
        *v8 = 14;
        v8 += *(_DWORD *)(result + 24);
        --v9;
      }
      while ( v9 );
    }
    if ( v7 > 0 )
    {
      v10 = ((unsigned int)(v7 - 1) >> 1) + 1;
      do
      {
        *v8 = -60;
        v11 = &v8[*(_DWORD *)(result + 24)];
        *v11 = 14;
        v8 = &v11[*(_DWORD *)(result + 24)];
        --v10;
      }
      while ( v10 );
    }
    v12 = v6;
    v13 = 26;
    v14 = v6 + 1;
    v15 = 96;
    result = sub_1000F9D0(*(_DWORD *)IDA__interfaceWindow, &v12);
  }
  return result;
}
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB50: using guessed type int alternate_ammo_metre;

//----- (10013860) --------------------------------------------------------
int __usercall sub_10013860@<eax>(int a1@<eax>, signed int a2@<edx>)
{
  return sub_10013790(a1, a2);
}

//----- (10013880) --------------------------------------------------------
char *__cdecl sub_10013880(int a1, unsigned int a2, char *a3, int a4, char *a5, int a6)
{
  int v6; // eax

  v6 = sub_1000EF10(*(void **)IDA__interfaceWindow);
  return sub_1001D1B0((char *)(a1 + 15 * (*(_DWORD *)(v6 + 24) - 640)), a2, a3, *(_DWORD *)(v6 + 24), a5, a6);
}
// 100645D0: using guessed type int IDA__interfaceWindow;

//----- (100138B0) --------------------------------------------------------
char *__cdecl sub_100138B0(char *a1, unsigned int a2, char *a3, int a4, int a5)
{
  int v5; // eax

  v5 = sub_1000EF10(*(void **)IDA__interfaceWindow);
  return sub_1001D1B0(a1, a2, a3, a4, (char *)(a5 + 15 * (*(_DWORD *)(v5 + 24) - 640)), *(_DWORD *)(v5 + 24));
}
// 100645D0: using guessed type int IDA__interfaceWindow;

//----- (100138E0) --------------------------------------------------------
char *__cdecl sub_100138E0(char *a1, unsigned int a2, char *a3, int a4, int a5)
{
  int v5; // eax

  v5 = sub_1000EF10(*(void **)IDA__interfaceWindow);
  return sub_1001D1B0(a1, a2, a3, a4, (char *)(a5 + 39 * (*(_DWORD *)(v5 + 24) - 640)), *(_DWORD *)(v5 + 24));
}
// 100645D0: using guessed type int IDA__interfaceWindow;

//----- (10013910) --------------------------------------------------------
int __cdecl sub_10013910(_BYTE *a1, int a2, int a3, int a4, int a5)
{
  int v5; // eax

  v5 = sub_1000EF10(*(void **)IDA__interfaceWindow);
  return sub_1001D200(a1, a2, a3, a4, a5 + 39 * (*(_DWORD *)(v5 + 24) - 640), *(_DWORD *)(v5 + 24));
}
// 100645D0: using guessed type int IDA__interfaceWindow;

//----- (10013940) --------------------------------------------------------
char *__cdecl sub_10013940(char *a1, unsigned int a2, char *a3, int a4, char *a5)
{
  int v5; // eax

  v5 = sub_1000EF10(*(void **)IDA__interfaceWindow);
  return sub_1001D1B0(a1, a2, a3, a4, a5, *(_DWORD *)(v5 + 24));
}
// 100645D0: using guessed type int IDA__interfaceWindow;

//----- (10013960) --------------------------------------------------------
int __thiscall sub_10013960(void *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  int v14; // eax

  v14 = sub_1000EF10(this);
  return sub_1000F000(a2, a3 + *(_DWORD *)(v14 + 24) - 640, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

//----- (100139C0) --------------------------------------------------------
#error "100139D2: positive sp value has been found (funcsize=6)"

//----- (100139E0) --------------------------------------------------------
int sub_100139E0()
{
  int v0; // ST04_4

  if ( !iface_bar_mode )
  {
    sub_1000EFC0();
    sub_1000EFC0();
  }
  v0 = *(_DWORD *)IDA__interfaceWindow;
  return sub_1000EFC0();
}
// 1003B118: using guessed type int dword_1003B118;
// 1003B11C: using guessed type int dword_1003B11C;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB2C: using guessed type int iface_bar_mode;

//----- (10013A20) --------------------------------------------------------
int sub_10013A20()
{
  int v0; // eax

  if ( !iface_bar_mode )
  {
    v0 = sub_1000EFA0(dword_1003B118);
    sub_1000EFA0(v0);
  }
  return sub_1000EFA0(*(_DWORD *)IDA__interfaceWindow);
}
// 1003B118: using guessed type int dword_1003B118;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB2C: using guessed type int iface_bar_mode;

//----- (10013A60) --------------------------------------------------------
int sub_10013A60()
{
  int v0; // ST04_4

  if ( !iface_bar_mode )
  {
    sub_1000EF60();
    dword_1003B118 = -1;
    sub_1000EF60();
    dword_1003B11C = -1;
  }
  v0 = *(_DWORD *)IDA__interfaceWindow;
  return sub_1000EF60();
}
// 1003B118: using guessed type int dword_1003B118;
// 1003B11C: using guessed type int dword_1003B11C;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 1006AB2C: using guessed type int iface_bar_mode;

//----- (10013AB0) --------------------------------------------------------
int sub_10013AB0()
{
  return sub_10013A60();
}
// 10013AB0: using guessed type int sub_10013AB0();

//----- (10013AC0) --------------------------------------------------------
int sub_10013AC0()
{
  return sub_100139E0();
}
// 10013AC0: using guessed type int sub_10013AC0();

//----- (10013AD0) --------------------------------------------------------
int sub_10013AD0()
{
  return sub_10013A20();
}
// 10013AD0: using guessed type int sub_10013AD0();

//----- (10013BA0) --------------------------------------------------------
int sub_10013BA0()
{
  int result; // eax

  sub_1000EF60();
  result = IDA__skldxwin;
  *(_DWORD *)IDA__skldxwin = -1;
  return result;
}
// 10013BA0: using guessed type int sub_10013BA0();
// 100645D8: using guessed type int IDA__skldxwin;

//----- (10013C00) --------------------------------------------------------
void __cdecl sub_10013C00(char *a1, unsigned int a2, unsigned int a3, int a4, char *a5, int a6)
{
  int v6; // ST40_4
  int v7; // ebx
  char *v8; // eax
  char *v9; // esi
  unsigned __int16 *v10; // eax
  unsigned int v11; // eax
  char *v12; // edi
  char *v13; // eax
  char *v14; // edi
  int v15; // esi
  char *v16; // ebp
  char v17; // [esp+Ch] [ebp-100h]

  v6 = *(_DWORD *)IDA__interfaceWindow;
  v7 = sub_1000EF10(*(void **)IDA__interfaceWindow);
  sprintf(&v17, "HR_IFACE_%i.frm", *(_DWORD *)(v7 + 24), v6);
  v8 = sub_10005DF0((int)&v17, 6u);
  v9 = v8;
  if ( v8 && (v10 = (unsigned __int16 *)*((_DWORD *)v8 + 16), *v10 == *(_DWORD *)(v7 + 24)) )
  {
    v11 = v10[1];
    v12 = (char *)a3;
    if ( v11 < a3 )
      v12 = (char *)v11;
    sub_1001D1B0(
      *(char **)(*((_DWORD *)v9 + 16) + 12),
      **((unsigned __int16 **)v9 + 16),
      v12,
      **((unsigned __int16 **)v9 + 16),
      a5,
      *(_DWORD *)(v7 + 24));
    v13 = (char *)*((_DWORD *)v9 + 16);
    if ( v13 )
    {
      v14 = v13 - 4;
      `eh vector destructor iterator'(v13, 0x10u, *((_DWORD *)v13 - 1), sub_10005680);
      j__free(v14);
    }
    j__free(v9);
  }
  else
  {
    sub_1001D1B0(a1, a2, (char *)a3, a4, &a5[*(_DWORD *)(v7 + 24) - a6], *(_DWORD *)(v7 + 24));
    if ( *(_DWORD *)(v7 + 24) > 640 )
    {
      sub_1001D1B0(a1, 0x20u, (char *)a3, a4, a5, *(_DWORD *)(v7 + 24));
      v15 = *(_DWORD *)(v7 + 24) - a6 + 152;
      v16 = (char *)operator new(a3 * v15);
      sub_1001D260((int)(a1 + 32), 152, a3, a4, (int)v16, v15, a3, 0.0, 0);
      sub_1001D1B0(v16, v15, (char *)a3, v15, a5 + 32, *(_DWORD *)(v7 + 24));
      j__free(v16);
    }
  }
}
// 100645D0: using guessed type int IDA__interfaceWindow;

//----- (10013D90) --------------------------------------------------------
void sub_10013D90()
{
  char *v0; // ebp
  char *v1; // ebx
  int *v2; // esi
  void *v3; // ecx
  int *v4; // edi
  unsigned __int16 *v5; // eax
  int v6; // ecx
  int v7; // ebp
  unsigned __int16 *v8; // eax
  int v9; // ecx
  int v10; // ebx
  char *v11; // eax
  char *v12; // esi
  char *v13; // eax
  char *v14; // esi
  char *v15; // [esp+Ch] [ebp-3Ch]
  char *v16; // [esp+10h] [ebp-38h]
  int v17; // [esp+14h] [ebp-34h]
  int v18; // [esp+18h] [ebp-30h]
  int v19; // [esp+1Ch] [ebp-2Ch]
  int v20; // [esp+20h] [ebp-28h]
  char v21; // [esp+28h] [ebp-20h]

  sprintf(&v21, "HR_IFACELFT%d.frm", iface_bar_side_art);
  v0 = sub_10005DF0((int)&v21, 6u);
  v15 = v0;
  if ( !v0 )
  {
    v15 = sub_100058D0(640, 480, 1, 1);
    v0 = v15;
  }
  sprintf(&v21, "HR_IFACERHT%d.frm", iface_bar_side_art);
  v1 = sub_10005DF0((int)&v21, 6u);
  v16 = v1;
  if ( !v1 )
  {
    v16 = sub_100058D0(640, 480, 1, 1);
    v1 = v16;
  }
  sub_1000EFD0();
  v2 = (int *)sub_1000EF10((void *)dword_1003B118);
  if ( v2 )
  {
    sub_1000EFD0();
    v4 = (int *)sub_1000EF10(v3);
    if ( v4 )
    {
      v5 = (unsigned __int16 *)*((_DWORD *)v0 + 16);
      v6 = v5[1];
      v7 = *v5;
      v8 = (unsigned __int16 *)*((_DWORD *)v1 + 16);
      v19 = v6;
      v9 = *v8;
      v10 = v2[6];
      v20 = *v8;
      v18 = v8[1];
      if ( v10 > v7 )
        v10 = v7;
      v17 = v4[6];
      if ( v17 > v9 )
        v17 = *v8;
      if ( LODWORD(iface_bar_sides_ori) == 1 )
      {
        sub_1001D260(*(_DWORD *)(*((_DWORD *)v15 + 16) + 12), v10, v19, v7, v2[11], v2[6], v2[7], 0.0, 0);
        sub_1001D260(v20 + *(_DWORD *)(*((_DWORD *)v16 + 16) + 12) - v17, v17, v18, v20, v4[11], v4[6], v4[7], 0.0, 0);
      }
      else if ( !LODWORD(iface_bar_sides_ori) )
      {
        sub_1001D260(*(_DWORD *)(*((_DWORD *)v16 + 16) + 12), v17, v18, v9, v4[11], v4[6], v4[7], 0.0, 0);
        sub_1001D260(v7 + *(_DWORD *)(*((_DWORD *)v15 + 16) + 12) - v10, v10, v19, v7, v2[11], v2[6], v2[7], 0.0, 0);
      }
      v11 = (char *)*((_DWORD *)v15 + 16);
      if ( v11 )
      {
        v12 = v11 - 4;
        `eh vector destructor iterator'(v11, 0x10u, *((_DWORD *)v11 - 1), sub_10005680);
        j__free(v12);
      }
      j__free(v15);
      v13 = (char *)*((_DWORD *)v16 + 16);
      if ( v13 )
      {
        v14 = v13 - 4;
        `eh vector destructor iterator'(v13, 0x10u, *((_DWORD *)v13 - 1), sub_10005680);
        j__free(v14);
      }
      j__free(v16);
    }
  }
}
// 1003B118: using guessed type int dword_1003B118;
// 1003B11C: using guessed type int dword_1003B11C;
// 1006AB30: using guessed type int iface_bar_side_art;

//----- (10013FE0) --------------------------------------------------------
void __cdecl sub_10013FE0(int a1)
{
  iface_bar_side_art = a1;
  if ( !iface_bar_mode && scr_width > iface_bar_width )
    sub_10013D90();
}
// 1003B120: using guessed type int iface_bar_width;
// 1006AB2C: using guessed type int iface_bar_mode;
// 1006AB30: using guessed type int iface_bar_side_art;

//----- (10014010) --------------------------------------------------------
int __stdcall sub_10014010(int a1, int a2)
{
  int v2; // eax
  int v3; // ebp
  void *v4; // ecx
  int *v5; // esi

  v2 = iface_bar_width;
  if ( scr_width < iface_bar_width )
  {
    v2 = scr_width;
    iface_bar_width = scr_width;
  }
  v3 = sub_1000EF30(scr_width / 2 - v2 / 2, newBytes - 100, v2, 100, a1, a2);
  v5 = (int *)sub_1000EF10(v4);
  if ( !iface_bar_mode && scr_width > iface_bar_width )
  {
    dword_1003B118 = sub_1000EF30(0, v5[3], v5[2], v5[7], a1, a2);
    dword_1003B11C = sub_1000EF30(v5[4] + 1, v5[3], scr_width - v5[4] - 1, v5[7], a1, a2);
    sub_10013D90();
  }
  *(_DWORD *)IDA__endWindowRect = v5[6] - 60;
  *(_DWORD *)(IDA__endWindowRect + 8) = v5[6] - 3;
  *(_DWORD *)(IDA__disp_rect + 8) = v5[6] - 451;
  *(_DWORD *)IDA__movePointRect = v5[6] - 324;
  *(_DWORD *)(IDA__movePointRect + 8) = v5[6] - 234;
  *(_DWORD *)IDA__itemButtonRect = v5[6] - 373;
  *(_DWORD *)(IDA__itemButtonRect + 8) = v5[6] - 185;
  return v3;
}
// 10014010: using guessed type int __stdcall sub_10014010(int, int);
// 1003B118: using guessed type int dword_1003B118;
// 1003B11C: using guessed type int dword_1003B11C;
// 1003B120: using guessed type int iface_bar_width;
// 1006AB2C: using guessed type int iface_bar_mode;
// 1006AB38: using guessed type int IDA__endWindowRect;
// 1006AB3C: using guessed type int IDA__disp_rect;
// 1006AB40: using guessed type int IDA__movePointRect;
// 1006AB44: using guessed type int IDA__itemButtonRect;

//----- (10014140) --------------------------------------------------------
char __usercall sub_10014140@<al>(void *a1@<ecx>, int a2@<ebx>)
{
  int v2; // esi
  int v4; // ecx
  int v5; // edi
  int v6; // eax
  int v7; // ecx
  _DWORD *v8; // eax
  void *v9; // ecx
  int v10; // ecx
  int v11; // edi
  int v12; // ST1C_4
  _DWORD *v13; // eax
  int v14; // ecx
  int v15; // edx
  int v16; // ecx
  int v17; // eax
  char *v18; // edi
  unsigned int v19; // edx
  int v20; // eax
  char *v21; // eax
  signed int v22; // ecx
  char *v23; // edi
  unsigned __int16 *v24; // eax
  char *v25; // eax
  char *v26; // ebx
  int v27; // eax
  int v28; // ecx
  int v29; // eax
  int v30; // ecx
  int v31; // eax
  int v32; // ecx
  int v33; // eax
  int v34; // ecx
  int v35; // eax
  int v36; // ecx
  int v37; // eax
  int v38; // ecx
  int v39; // eax
  int v40; // ecx
  int v41; // eax
  int v42; // ecx
  int v43; // eax
  int v44; // ecx
  int v45; // eax
  int v46; // ecx
  char *v47; // edi
  int v48; // ecx
  int v49; // eax
  char *v50; // ebx
  char *v51; // edi
  int v52; // eax
  int v53; // eax
  _DWORD *v54; // eax
  void *v55; // ecx
  _DWORD *v56; // edi
  int v57; // ecx
  int v58; // edx
  int v59; // eax
  _DWORD *v60; // eax
  _DWORD *v61; // edi
  int v62; // edx
  int v63; // eax

  if ( *(_DWORD *)IDA__interfaceWindow == -1 )
    return 0;
  v2 = sub_1000EF10(a1);
  if ( !v2 )
    return 0;
  v4 = iface_bar_width_1;
  iface_bar_width = iface_bar_width_1;
  if ( iface_bar_width_1 > scr_width )
  {
    v4 = scr_width;
    iface_bar_width = scr_width;
  }
  v5 = scr_width / 2 - v4 / 2;
  v6 = *(_DWORD *)(v2 + 28);
  *(_DWORD *)(v2 + 8) = v5;
  *(_DWORD *)(v2 + 12) = newBytes - v6;
  v7 = *(_DWORD *)(v2 + 12);
  *(_DWORD *)(v2 + 16) = iface_bar_width + v5 - 1;
  *(_DWORD *)(v2 + 20) = v6 + v7 - 1;
  v8 = (_DWORD *)sub_1000EF10(*(void **)IDA__bar_window);
  if ( v8 )
  {
    v10 = v8[7];
    v8[2] = *(_DWORD *)(v2 + 8);
    v11 = v8[2];
    v8[3] = *(_DWORD *)(v2 + 12) - v10;
    v8[4] = v8[6] + v11 - 1;
    v9 = (void *)(v10 + v8[3] - 1);
    v8[5] = v9;
  }
  v12 = *(_DWORD *)IDA__skldxwin;
  v13 = (_DWORD *)sub_1000EF10(v9);
  if ( v13 )
  {
    v14 = v13[6];
    v13[2] = *(_DWORD *)(v2 + 16) - v14 - 3;
    v15 = v13[7];
    v13[3] = *(_DWORD *)(v2 + 12) - v15 - 6;
    v13[4] = v14 + v13[2] - 1;
    v13[5] = v15 + v13[3] - 1;
  }
  if ( *(_DWORD *)(v2 + 24) != iface_bar_width )
  {
    v16 = *(_DWORD *)(v2 + 44);
    *(_DWORD *)(v2 + 24) = iface_bar_width;
    v17 = sub_1000F190(v16, *(_DWORD *)(v2 + 24) * *(_DWORD *)(v2 + 28));
    *(_DWORD *)(v2 + 44) = v17;
    *(_DWORD *)IDA__interfaceBuffer = v17;
    v18 = *(char **)(v2 + 44);
    LOBYTE(a2) = *(_BYTE *)(v2 + 32);
    BYTE1(a2) = *(_BYTE *)(v2 + 32);
    v19 = *(_DWORD *)(v2 + 24) * *(_DWORD *)(v2 + 28);
    v20 = a2 << 16;
    LOWORD(v20) = a2;
    memset32(v18, v20, v19 >> 2);
    memset(&v18[4 * (v19 >> 2)], a2, v19 & 3);
    v21 = sub_10005DF0((int)"IFACE.frm", 6u);
    v22 = *(_DWORD *)(v2 + 28);
    v23 = v21;
    v24 = (unsigned __int16 *)*((_DWORD *)v21 + 16);
    if ( v24[1] < v22 )
      v22 = *(unsigned __int16 *)(*((_DWORD *)v23 + 16) + 2);
    sub_10013C00(*(char **)(*((_DWORD *)v23 + 16) + 12), *v24, v22, *v24, *(char **)(v2 + 44), *v24);
    v25 = (char *)*((_DWORD *)v23 + 16);
    if ( v25 )
    {
      v26 = v25 - 4;
      `eh vector destructor iterator'(v25, 0x10u, *((_DWORD *)v25 - 1), sub_10005680);
      j__free(v26);
    }
    j__free(v23);
    *(_DWORD *)IDA__endWindowRect = *(_DWORD *)(v2 + 24) - 60;
    *(_DWORD *)(IDA__endWindowRect + 8) = *(_DWORD *)(v2 + 24) - 3;
    *(_DWORD *)(IDA__disp_rect + 8) = *(_DWORD *)(v2 + 24) - 451;
    *(_DWORD *)IDA__movePointRect = *(_DWORD *)(v2 + 24) - 324;
    *(_DWORD *)(IDA__movePointRect + 8) = *(_DWORD *)(v2 + 24) - 234;
    *(_DWORD *)IDA__itemButtonRect = *(_DWORD *)(v2 + 24) - 373;
    *(_DWORD *)(IDA__itemButtonRect + 8) = *(_DWORD *)(v2 + 24) - 185;
    if ( *(_DWORD *)IDA__inventoryButton != -1 )
    {
      v27 = sub_1000F0B0(*(_DWORD *)IDA__inventoryButton, 0);
      if ( v27 )
      {
        v28 = *(_DWORD *)(v2 + 24) - 429;
        *(_DWORD *)(v27 + 8) = v28;
        *(_DWORD *)(v27 + 16) = v28 + 31;
      }
    }
    if ( *(_DWORD *)IDA__optionsButton != -1 )
    {
      v29 = sub_1000F0B0(*(_DWORD *)IDA__optionsButton, 0);
      if ( v29 )
      {
        v30 = *(_DWORD *)(v2 + 24) - 430;
        *(_DWORD *)(v29 + 8) = v30;
        *(_DWORD *)(v29 + 16) = v30 + 33;
      }
    }
    if ( *(_DWORD *)IDA__skilldexButton != -1 )
    {
      v31 = sub_1000F0B0(*(_DWORD *)IDA__skilldexButton, 0);
      if ( v31 )
      {
        v32 = *(_DWORD *)(v2 + 24) - 117;
        *(_DWORD *)(v31 + 8) = v32;
        *(_DWORD *)(v31 + 16) = v32 + 21;
      }
    }
    if ( *(_DWORD *)IDA__automapButton != -1 )
    {
      v33 = sub_1000F0B0(*(_DWORD *)IDA__automapButton, 0);
      if ( v33 )
      {
        v34 = *(_DWORD *)(v2 + 24) - 114;
        *(_DWORD *)(v33 + 8) = v34;
        *(_DWORD *)(v33 + 16) = v34 + 40;
      }
    }
    if ( *(_DWORD *)IDA__pipboyButton != -1 )
    {
      v35 = sub_1000F0B0(*(_DWORD *)IDA__pipboyButton, 0);
      if ( v35 )
      {
        v36 = *(_DWORD *)(v2 + 24) - 114;
        *(_DWORD *)(v35 + 8) = v36;
        *(_DWORD *)(v35 + 16) = v36 + 40;
      }
    }
    if ( *(_DWORD *)IDA__characterButton != -1 )
    {
      v37 = sub_1000F0B0(*(_DWORD *)IDA__characterButton, 0);
      if ( v37 )
      {
        v38 = *(_DWORD *)(v2 + 24) - 114;
        *(_DWORD *)(v37 + 8) = v38;
        *(_DWORD *)(v37 + 16) = v38 + 40;
      }
    }
    if ( *(_DWORD *)IDA__itemButton != -1 )
    {
      v39 = sub_1000F0B0(*(_DWORD *)IDA__itemButton, 0);
      if ( v39 )
      {
        v40 = *(_DWORD *)(v2 + 24) - 373;
        *(_DWORD *)(v39 + 8) = v40;
        *(_DWORD *)(v39 + 16) = v40 + 187;
      }
    }
    if ( *(_DWORD *)IDA__toggleButton != -1 )
    {
      v41 = sub_1000F0B0(*(_DWORD *)IDA__toggleButton, 0);
      if ( v41 )
      {
        v42 = *(_DWORD *)(v2 + 24) - 422;
        *(_DWORD *)(v41 + 8) = v42;
        *(_DWORD *)(v41 + 16) = v42 + 21;
      }
    }
    if ( *(_DWORD *)IDA__endTurnButton != -1 )
    {
      v43 = sub_1000F0B0(*(_DWORD *)IDA__endTurnButton, 0);
      if ( v43 )
      {
        v44 = *(_DWORD *)(v2 + 24) - 50;
        *(_DWORD *)(v43 + 8) = v44;
        *(_DWORD *)(v43 + 16) = v44 + 37;
      }
    }
    if ( *(_DWORD *)IDA__endCombatButton != -1 )
    {
      v45 = sub_1000F0B0(*(_DWORD *)IDA__endCombatButton, 0);
      if ( v45 )
      {
        v46 = *(_DWORD *)(v2 + 24) - 50;
        *(_DWORD *)(v45 + 8) = v46;
        *(_DWORD *)(v45 + 16) = v46 + 37;
      }
    }
    sub_100132A0();
    if ( !(*(_BYTE *)(v2 + 4) & 8) )
    {
      IDA_intface_update_ammo_lights_();
      IDA_intface_update_hit_points_();
      IDA_intface_update_ac_();
    }
    if ( *(_DWORD *)IDA__endCombatButton != -1 )
    {
      v47 = sub_10005DF0((int)"endanim.frm", 6u);
      v48 = *((_DWORD *)v47 + 16);
      v49 = 16 * *((unsigned __int16 *)v47 + 4);
      v50 = (char *)(39 * *(_DWORD *)(v2 + 24) + *(_DWORD *)(v2 + 44) - 60);
      sub_1001D1B0(
        *(char **)(v48 + v49 - 4),
        *(unsigned __int16 *)(v48 + v49 - 16),
        (char *)*(unsigned __int16 *)(v49 + v48 - 14),
        *(unsigned __int16 *)(v48 + v49 - 16),
        v50,
        *(_DWORD *)(v2 + 24));
      sub_100061D0(v47, 1);
      v51 = sub_10005DF0((int)"endltgrn.frm", 6u);
      sub_1001D200(
        *(_BYTE **)(*((_DWORD *)v51 + 16) + 12),
        **((unsigned __int16 **)v51 + 16),
        *(unsigned __int16 *)(*((_DWORD *)v51 + 16) + 2),
        **((unsigned __int16 **)v51 + 16),
        (int)v50,
        *(_DWORD *)(v2 + 24));
      sub_100061D0(v51, 1);
      if ( *(_DWORD *)IDA__obj_dude == *(_DWORD *)IDA__main_ctd )
      {
        v52 = *(_DWORD *)(*(_DWORD *)IDA__obj_dude + 64);
        IDA_intface_update_move_points_();
      }
    }
  }
  if ( !iface_bar_mode )
  {
    v53 = scr_width;
    if ( scr_width > iface_bar_width )
    {
      if ( dword_1003B118 == -1 )
      {
        dword_1003B118 = sub_1000EF30(
                           0,
                           *(_DWORD *)(v2 + 12),
                           *(_DWORD *)(v2 + 8),
                           *(_DWORD *)(v2 + 28),
                           *(_DWORD *)(v2 + 32),
                           *(_DWORD *)(v2 + 4));
        if ( dword_1003B11C != -1 )
        {
LABEL_61:
          sub_10013D90();
          return 1;
        }
        v53 = scr_width;
      }
      else if ( dword_1003B11C != -1 )
      {
        v54 = (_DWORD *)sub_1000EF10((void *)dword_1003B118);
        v56 = v54;
        if ( v54 )
        {
          v54[2] = 0;
          v54[4] = *(_DWORD *)(v2 + 8) - 1;
          v57 = v54[7];
          v54[3] = *(_DWORD *)(v2 + 12);
          v58 = v54[11];
          v54[5] = *(_DWORD *)(v2 + 20);
          v59 = *(_DWORD *)(v2 + 8);
          v56[6] = v59;
          v56[11] = sub_1000F190(v58, v59 * v57);
        }
        v60 = (_DWORD *)sub_1000EF10(v55);
        v61 = v60;
        if ( v60 )
        {
          v60[2] = *(_DWORD *)(v2 + 16) + 1;
          v60[4] = scr_width - 1;
          v62 = v60[7];
          v60[3] = *(_DWORD *)(v2 + 12);
          v60[5] = *(_DWORD *)(v2 + 20);
          v63 = scr_width - *(_DWORD *)(v2 + 16) - 1;
          v61[6] = v63;
          v61[11] = sub_1000F190(v61[11], v63 * v62);
          sub_10013D90();
          return 1;
        }
        goto LABEL_61;
      }
      dword_1003B11C = sub_1000EF30(
                         *(_DWORD *)(v2 + 16) + 1,
                         *(_DWORD *)(v2 + 12),
                         v53 - *(_DWORD *)(v2 + 16) - 1,
                         *(_DWORD *)(v2 + 28),
                         *(_DWORD *)(v2 + 32),
                         *(_DWORD *)(v2 + 4));
      goto LABEL_61;
    }
  }
  if ( dword_1003B118 != -1 )
  {
    sub_1000EF60();
    dword_1003B118 = -1;
  }
  if ( dword_1003B11C != -1 )
  {
    sub_1000EF60();
    dword_1003B11C = -1;
  }
  return 1;
}
// 1006AB28: invalid function type has been ignored
// 1006ABBC: invalid function type has been ignored
// 1006ABC0: invalid function type has been ignored
// 1006ABC4: invalid function type has been ignored
// 1003B118: using guessed type int dword_1003B118;
// 1003B11C: using guessed type int dword_1003B11C;
// 1003B120: using guessed type int iface_bar_width;
// 1003B124: using guessed type int iface_bar_width_1;
// 10064460: using guessed type int IDA__obj_dude;
// 10064464: using guessed type int IDA__main_ctd;
// 100645D0: using guessed type int IDA__interfaceWindow;
// 100645D4: using guessed type int IDA__bar_window;
// 100645D8: using guessed type int IDA__skldxwin;
// 1006AB28: using guessed type int (*IDA_intface_update_ammo_lights_)(void);
// 1006AB2C: using guessed type int iface_bar_mode;
// 1006AB38: using guessed type int IDA__endWindowRect;
// 1006AB3C: using guessed type int IDA__disp_rect;
// 1006AB40: using guessed type int IDA__movePointRect;
// 1006AB44: using guessed type int IDA__itemButtonRect;
// 1006AB94: using guessed type int IDA__inventoryButton;
// 1006AB98: using guessed type int IDA__optionsButton;
// 1006AB9C: using guessed type int IDA__skilldexButton;
// 1006ABA0: using guessed type int IDA__automapButton;
// 1006ABA4: using guessed type int IDA__pipboyButton;
// 1006ABA8: using guessed type int IDA__characterButton;
// 1006ABAC: using guessed type int IDA__itemButton;
// 1006ABB0: using guessed type int IDA__toggleButton;
// 1006ABB4: using guessed type int IDA__endTurnButton;
// 1006ABB8: using guessed type int IDA__endCombatButton;
// 1006ABBC: using guessed type int (*IDA_intface_update_hit_points_)(void);
// 1006ABC0: using guessed type int (*IDA_intface_update_ac_)(void);
// 1006ABC4: using guessed type int (*IDA_intface_update_move_points_)(void);
// 1006ABCC: using guessed type int IDA__interfaceBuffer;

//----- (100147A0) --------------------------------------------------------
int F_initFunc26_resStuf1()
{
  signed int v0; // eax
  int result; // eax

  iface_bar_mode = F_GetPrivateProfileIntA("IFACE", "IFACE_BAR_MODE", 0);
  if ( (unsigned int)iface_bar_mode > 1 )
    iface_bar_mode = 0;
  iface_bar_side_art = F_GetPrivateProfileIntA("IFACE", "IFACE_BAR_SIDE_ART", 0);
  LODWORD(iface_bar_sides_ori) = F_GetPrivateProfileIntA("IFACE", "IFACE_BAR_SIDES_ORI", 0);
  if ( LODWORD(iface_bar_sides_ori) > 1 )
    iface_bar_sides_ori = 0.0;
  v0 = F_GetPrivateProfileIntA("IFACE", "IFACE_BAR_WIDTH", 640);
  iface_bar_width = v0;
  if ( v0 < 640 )
  {
    v0 = 640;
    iface_bar_width = 640;
  }
  iface_bar_width_1 = v0;
  alternate_ammo_metre = F_GetPrivateProfileIntA("IFACE", "ALTERNATE_AMMO_METRE", 0);
  alternate_ammo_light = F_GetPrivateProfileIntA("IFACE", "ALTERNATE_AMMO_LIGHT", 196);
  alternate_ammo_dark = F_GetPrivateProfileIntA("IFACE", "ALTERNATE_AMMO_DARK", 75);
  IDA__inventoryButton = F_ptrCorrection_(5264908);
  IDA__optionsButton = F_ptrCorrection_(5264920);
  IDA__skilldexButton = F_ptrCorrection_(5264932);
  IDA__automapButton = F_ptrCorrection_(5264948);
  IDA__pipboyButton = F_ptrCorrection_(5264964);
  IDA__characterButton = F_ptrCorrection_(5264976);
  IDA__itemButton = F_ptrCorrection_(5264988);
  IDA__toggleButton = F_ptrCorrection_(5265024);
  IDA__endTurnButton = F_ptrCorrection_(5265060);
  IDA__endCombatButton = F_ptrCorrection_(5265072);
  F_writeMem24(0x456FA5u, 440447, (int)dword_10013B20);
  F_writeMem24(0x499D01u, 166691, (int)dword_10013B80);
  F_writeMem24(0x49A123u, 166189, (int)sub_10013BA0);
  F_writeMem24(0x45368Du, 455063, (int)sub_10014010);
  F_writeMem24(0x454617u, 451641, (int)sub_10013AB0);
  F_writeMem24(0x4541C6u, 455302, (int)sub_10013AC0);
  F_writeMem24(0x4546CCu, 454016, (int)sub_10013AC0);
  F_writeMem24(0x4547F6u, 453718, (int)sub_10013AC0);
  F_writeMem24(0x454838u, 453468, (int)sub_10013AD0);
  IDA__endWindowRect = F_ptrCorrection_(5265044);
  IDA__disp_rect = F_ptrCorrection_(5263364);
  IDA__movePointRect = F_ptrCorrection_(5265096);
  IDA__itemButtonRect = F_ptrCorrection_(5265008);
  IDA__disp_start = F_ptrCorrection_(5694212);
  IDA__disp_curr = F_ptrCorrection_(5694200);
  IDA__combat_state = F_ptrCorrection_(5238136);
  IDA__bk_process_time = F_ptrCorrection_(6758184);
  IDA__lastTime = F_ptrCorrection_(5694216);
  IDA__disp_init = F_ptrCorrection_(5263360);
  IDA__max_disp = F_ptrCorrection_(5694192);
  IDA__disp_buf = F_ptrCorrection_(5694188);
  IDA__up_bid = F_ptrCorrection_(5263384);
  dword_1006AB7C = F_ptrCorrection_(5263380);
  IDA__dn_bid = F_ptrCorrection_(4375338);
  IDA_display_redraw___someCall1 = F_ptrCorrection_(4375315);
  if ( iface_bar_width > 640 )
  {
    F_writeMem24(0x453721u, 437615, (int)sub_10013C00);
    F_writeMem24(0x4537DFu, 462957, (int)sub_100139C0);
    F_writeMem24(0x4538BEu, 462734, (int)sub_100139C0);
    F_writeMem24(0x4539DEu, 462446, (int)sub_100139C0);
    F_writeMem24(0x453B15u, 462135, (int)sub_100139C0);
    F_writeMem24(0x453C04u, 461896, (int)sub_100139C0);
    F_writeMem24(0x453CF3u, 461657, (int)sub_100139C0);
    F_writeMem24(0x453E86u, 461254, (int)sub_100139C0);
    F_writeMem24(0x453FC0u, 460940, (int)sub_100139C0);
    F_writeMem24(0x45412Du, 435043, (int)sub_10013880);
    F_writeMem24(0x454C64u, 432172, (int)sub_100138B0);
    F_writeMem24(0x454CBDu, 432083, (int)sub_100138B0);
    F_writeMem24(0x4562A8u, 452004, (int)sub_100139C0);
    F_writeMem24(0x456408u, 451652, (int)sub_100139C0);
    F_writeMem24(0x4555A3u, 429805, (int)sub_100138E0);
    F_writeMem24(0x4555F4u, 429724, (int)sub_100138E0);
    F_writeMem24(0x455700u, 429456, (int)sub_100138E0);
    F_writeMem24(0x45574Au, 429382, (int)sub_100138E0);
    F_writeMem24(0x4557EBu, 429269, (int)sub_10013910);
    F_writeMem24(0x45587Fu, 429121, (int)sub_10013910);
    F_writeMem8(4548122, 1u, 137);
    F_writeMem8(4548130, 0xC1u, 232);
    F_writeMem32(0x456623u, -1040119840, (int)sub_10013560);
    F_writeMem24(0x4566E5u, 425387, (int)sub_10013940);
    F_writeMem24(0x456719u, 425335, (int)sub_10013940);
    F_writeMem24(0x45674Du, 425283, (int)sub_10013940);
    F_writeMem24(0x456796u, 425210, (int)sub_10013940);
    F_writeMem24(0x4568C2u, 424910, (int)sub_10013940);
    F_writeMem24(0x456912u, 424830, (int)sub_10013940);
    F_writeMem24(0x456968u, 424744, (int)sub_10013940);
    F_writeMem24(0x4569C1u, 424655, (int)sub_10013940);
    F_writeMem24(0x4569FEu, 424594, (int)sub_10013940);
    F_writeMem24(0x456A31u, 424543, (int)sub_10013940);
    F_writeMem24(0x456A81u, 424463, (int)sub_10013940);
    F_writeMem24(0x456AA6u, 424426, (int)sub_10013940);
    F_writeMem24(0x456ACCu, 424388, (int)sub_10013940);
    F_writeMem24(0x456B0Du, 424323, (int)sub_10013940);
    F_writeMem8(4374096, 0x53u, 233);
    F_writeMem32(0x42BE51u, 1431720529, (int)sub_10013500);
    F_writeMem8(4374706, 0x83u, 233);
    F_writeMem32(0x42C0B3u, -1047983892, (int)sub_10013090);
    F_writeMem8(4375216, 0x53u, 233);
    F_writeMem32(0x42C2B1u, 1465274961, (int)sub_10012F10);
    F_writeMem8(4374592, 0x53u, 233);
    F_writeMem32(0x42C041u, 1032016465, (int)sub_10013100);
    F_writeMem8(4375140, 0x53u, 233);
    F_writeMem32(0x42C265u, 1032016465, (int)sub_10013100);
    F_writeMem8(4374527, 0x85u, 233);
    F_writeMem32(0x42C000u, -1927446821, (int)sub_10013110);
  }
  func_writeMem16(4547780, 0x5153u, 59792);
  F_writeMem32(0x4564C6u, 283935574, (int)sub_10013860);
  IDA_intface_update_ammo_lights_ = (int (*)(void))F_ptrCorrection_(4543408);
  IDA_intface_update_ammo_lights___1 = F_ptrCorrection_(4543408);
  IDA_intface_update_hit_points_ = (int (*)(void))F_ptrCorrection_(4540936);
  IDA_intface_update_ac_ = (int (*)(void))F_ptrCorrection_(4541392);
  IDA_intface_update_move_points_ = (int (*)(void))F_ptrCorrection_(4541492);
  result = F_ptrCorrection_(5880216);
  IDA__interfaceBuffer = result;
  return result;
}
// 10012F10: using guessed type int sub_10012F10();
// 10013090: using guessed type int sub_10013090();
// 10013100: using guessed type int sub_10013100();
// 10013110: using guessed type int sub_10013110();
// 100139C0: using guessed type int sub_100139C0();
// 10013AB0: using guessed type int sub_10013AB0();
// 10013AC0: using guessed type int sub_10013AC0();
// 10013AD0: using guessed type int sub_10013AD0();
// 10013B20: using guessed type int dword_10013B20[8];
// 10013B80: using guessed type int dword_10013B80[8];
// 10013BA0: using guessed type int sub_10013BA0();
// 10014010: using guessed type int __stdcall sub_10014010(int, int);
// 1003B120: using guessed type int iface_bar_width;
// 1003B124: using guessed type int iface_bar_width_1;
// 1003B130: using guessed type char alternate_ammo_light;
// 1003B131: using guessed type char alternate_ammo_dark;
// 1006AB28: using guessed type int (*IDA_intface_update_ammo_lights_)(void);
// 1006AB2C: using guessed type int iface_bar_mode;
// 1006AB30: using guessed type int iface_bar_side_art;
// 1006AB38: using guessed type int IDA__endWindowRect;
// 1006AB3C: using guessed type int IDA__disp_rect;
// 1006AB40: using guessed type int IDA__movePointRect;
// 1006AB44: using guessed type int IDA__itemButtonRect;
// 1006AB48: using guessed type int IDA__dn_bid;
// 1006AB4C: using guessed type int IDA_display_redraw___someCall1;
// 1006AB50: using guessed type int alternate_ammo_metre;
// 1006AB54: using guessed type int IDA__disp_start;
// 1006AB58: using guessed type int IDA__disp_curr;
// 1006AB5C: using guessed type int IDA__max_disp;
// 1006AB60: using guessed type int IDA__lastTime;
// 1006AB64: using guessed type int IDA__bk_process_time;
// 1006AB68: using guessed type int IDA__disp_buf;
// 1006AB70: using guessed type int IDA__disp_init;
// 1006AB74: using guessed type int IDA__combat_state;
// 1006AB78: using guessed type int IDA__up_bid;
// 1006AB7C: using guessed type int dword_1006AB7C;
// 1006AB94: using guessed type int IDA__inventoryButton;
// 1006AB98: using guessed type int IDA__optionsButton;
// 1006AB9C: using guessed type int IDA__skilldexButton;
// 1006ABA0: using guessed type int IDA__automapButton;
// 1006ABA4: using guessed type int IDA__pipboyButton;
// 1006ABA8: using guessed type int IDA__characterButton;
// 1006ABAC: using guessed type int IDA__itemButton;
// 1006ABB0: using guessed type int IDA__toggleButton;
// 1006ABB4: using guessed type int IDA__endTurnButton;
// 1006ABB8: using guessed type int IDA__endCombatButton;
// 1006ABBC: using guessed type int (*IDA_intface_update_hit_points_)(void);
// 1006ABC0: using guessed type int (*IDA_intface_update_ac_)(void);
// 1006ABC4: using guessed type int (*IDA_intface_update_move_points_)(void);
// 1006ABC8: using guessed type int IDA_intface_update_ammo_lights___1;
// 1006ABCC: using guessed type int IDA__interfaceBuffer;

//----- (10014FC0) --------------------------------------------------------
int __fastcall sub_10014FC0(int a1, int a2)
{
  return a2 - 79 - *(_DWORD *)(dword_1006ABD0 + 12);
}
// 1006ABD0: using guessed type int dword_1006ABD0;

//----- (10015010) --------------------------------------------------------
int __thiscall sub_10015010(void *this, int a2, int a3, int a4, int a5)
{
  int v5; // ST0C_4
  int *v6; // eax

  v5 = *(_DWORD *)IDA__display_win;
  v6 = (int *)sub_1000EF10(this);
  return sub_1001D260(v6[11], v6[6], v6[7], v6[6], a2, a3, a4, 0.0, 0);
}
// 100645EC: using guessed type int IDA__display_win;

//----- (10015050) --------------------------------------------------------
int F_initFunc24()
{
  F_writeMem24(0x4711E5u, 333375, (int)dword_10014FF0);
  F_writeMem24(0x46EB9Cu, 325136, (int)sub_10015010);
  F_writeMem24(0x46F97Cu, 321584, (int)sub_10015010);
  F_writeMem24(0x46FA76u, 339374, (int)dword_10014FA0);
  F_writeMem8(4649356, 0x83u, 232);
  F_writeMem32(0x46F18Du, -796307478, (int)sub_10014FC0);
  F_writeMem8(4645852, 0x83u, 232);
  return F_writeMem32(0x46E3DDu, -796307478, (int)sub_10014FC0);
}
// 10014FA0: using guessed type int dword_10014FA0[8];
// 10014FF0: using guessed type int dword_10014FF0[8];

//----- (10015100) --------------------------------------------------------
bool sub_10015100()
{
  return *(_DWORD *)IDA__main_menu_created && !*(_DWORD *)IDA__main_menu_is_hidden;
}
// 1006AC10: using guessed type int IDA__main_menu_created;
// 1006AC14: using guessed type int IDA__main_menu_is_hidden;

//----- (10015120) --------------------------------------------------------
int sub_10015120()
{
  return IDA_main_menu_hide_();
}
// 1006AC1C: invalid function type has been ignored
// 1006AC1C: using guessed type int (*IDA_main_menu_hide_)(void);

//----- (10015130) --------------------------------------------------------
int sub_10015130()
{
  return IDA_main_menu_show_();
}
// 1006AC18: invalid function type has been ignored
// 1006AC18: using guessed type int (*IDA_main_menu_show_)(void);

//----- (10015160) --------------------------------------------------------
int sub_10015160()
{
  int result; // eax
  int v1; // esi
  int v2; // ST10_4

  result = IDA__main_menu_created;
  if ( *(_DWORD *)IDA__main_menu_created )
  {
    v1 = *(_DWORD *)IDA__main_menu_is_hidden;
    IDA_main_menu_destroy_();
    *(_DWORD *)IDA__main_window = -1;
    result = IDA_main_menu_create_();
    if ( result == -1 )
      result = MessageBoxA(0, "F_MainMenuSetup failed", "Hi-Res patch Error", 0x10u);
    if ( !v1 )
    {
      v2 = *(_DWORD *)IDA__main_window;
      result = sub_1000EFA0(IDA__main_window);
      *(_DWORD *)IDA__main_menu_is_hidden = 0;
    }
  }
  return result;
}
// 1006ABEC: invalid function type has been ignored
// 100645E0: using guessed type int IDA__main_window;
// 1006ABEC: using guessed type int (*IDA_main_menu_create_)(void);
// 1006ABF0: using guessed type int (*IDA_main_menu_destroy_)(void);
// 1006AC10: using guessed type int IDA__main_menu_created;
// 1006AC14: using guessed type int IDA__main_menu_is_hidden;

//----- (100151D0) --------------------------------------------------------
int sub_100151D0()
{
  int result; // eax

  result = sub_1000EF60();
  *(_DWORD *)IDA__main_window = -1;
  return result;
}
// 100151D0: using guessed type int sub_100151D0();
// 100645E0: using guessed type int IDA__main_window;

//----- (100151F0) --------------------------------------------------------
int __cdecl sub_100151F0(int a1, char *a2, int a3, int a4, int a5, unsigned __int8 a6)
{
  int v6; // esi
  char *v7; // ebp
  int v8; // edi
  void *v9; // ecx
  int v10; // ebx
  int *v11; // eax
  int *v12; // ebp
  int v13; // eax
  int v14; // ebx
  int v15; // ST08_4
  int v16; // eax
  int v17; // ecx
  int v18; // eax
  int v19; // ST10_4
  int v20; // eax
  int v21; // ecx
  bool v22; // cf
  int v24; // [esp+10h] [ebp-18h]
  int v25; // [esp+14h] [ebp-14h]
  int v26; // [esp+18h] [ebp-10h]
  int v27; // [esp+1Ch] [ebp-Ch]
  int v28; // [esp+38h] [ebp+10h]

  sub_1000E5F0();
  sub_1000E5E0();
  v6 = a4;
  v7 = a2;
  v24 = 0;
  v8 = (int)&a2[a4 * a3];
  v28 = 0;
  v26 = 0;
  v10 = 42 * v6;
  v25 = sub_1000E670(v9);
  do
  {
    if ( v26 == 3 )
    {
      v11 = (int *)operator new(8u);
      v12 = 0;
      if ( v11 )
      {
        v11[1] = 0;
        *v11 = 0;
        v12 = v11;
      }
      if ( sub_1000E0A0((int)v12, (int)"game\\ScrnSet.msg") )
      {
        v13 = sub_1000E0C0(v12, 3u);
        v14 = v13;
        v15 = *(_DWORD *)(v13 + 8);
        v16 = sub_1000E690();
        if ( v16 > v6 )
          v16 = v6;
        v17 = v16 >> 1;
        if ( (signed int)&a2[-(v16 >> 1)] >= 0 )
        {
          if ( (signed int)&a2[v16 - v17] > v6 )
            v16 = v6 + v17 - (_DWORD)a2;
        }
        else
        {
          v17 = (int)a2;
        }
        if ( a3 - v24 >= 0 && a3 + v25 <= a5 )
          sub_1000E600(a1 + v8 - v17 - v28, *(_DWORD *)(v14 + 8), v16, v6, a6);
        sub_1000E060((void *)v17);
        v10 = 42 * v6;
      }
      v8 += v10;
      v28 += v6;
      v7 = a2;
      a3 += 42;
      ++v24;
      --v25;
    }
    v18 = sub_1000E0C0((int *)IDA__misc_message_file, v26 + 9);
    v27 = v18;
    if ( v18 )
    {
      v19 = *(_DWORD *)(v18 + 8);
      v20 = sub_1000E690();
      if ( v20 > v6 )
        v20 = v6;
      v21 = v20 >> 1;
      if ( (signed int)&v7[-(v20 >> 1)] >= 0 )
      {
        if ( (signed int)&v7[v20 - v21] > v6 )
          v20 = v6 + v21 - (_DWORD)v7;
      }
      else
      {
        v21 = (int)v7;
      }
      if ( a3 - v24 >= 0 )
      {
        if ( a3 + v25 <= a5 )
          sub_1000E600(a1 + v8 - v21 - v28, *(_DWORD *)(v27 + 8), v20, v6, a6);
        v7 = a2;
      }
    }
    v28 += v6;
    v8 += v10;
    --v25;
    v22 = (unsigned int)(v26 + 1) < 5;
    a3 += 42;
    ++v24;
    ++v26;
  }
  while ( v22 );
  return sub_1000E5E0();
}
// 1006AC00: using guessed type int IDA__misc_message_file;

//----- (10015420) --------------------------------------------------------
#error "10015421: positive sp value has been found (funcsize=0)"

//----- (10015460) --------------------------------------------------------
void __stdcall sub_10015460(int a1)
{
  void *v1; // edi
  char *v2; // eax
  char *v3; // esi

  if ( dword_1006AC28 )
  {
    v1 = dword_1006AC28;
    v2 = (char *)*((_DWORD *)dword_1006AC28 + 16);
    if ( v2 )
    {
      v3 = v2 - 4;
      `eh vector destructor iterator'(v2, 0x10u, *((_DWORD *)v2 - 1), sub_10005680);
      j__free(v3);
    }
    j__free(v1);
  }
  dword_1006AC28 = 0;
}

//----- (100154B0) --------------------------------------------------------
void __usercall sub_100154B0(int a1@<eax>)
{
  sub_10015460(a1);
}

//----- (100154C0) --------------------------------------------------------
signed int __thiscall sub_100154C0(void *this)
{
  int v1; // eax
  void *v2; // ecx
  unsigned __int8 v3; // di
  UINT v4; // eax
  int v5; // esi
  UINT v6; // eax
  char *v7; // esi
  char *v8; // ebx
  char *v9; // eax
  unsigned __int16 *v10; // eax
  float v11; // edi
  int v12; // ecx
  signed int v13; // eax
  char *v14; // edx
  double v15; // st7
  char *v16; // eax
  char *v17; // esi
  int v18; // eax
  int v19; // ecx
  UINT v20; // esi
  UINT v21; // edi
  int v22; // ecx
  char *v23; // esi
  char *v24; // eax
  unsigned __int16 *v25; // ebx
  int v26; // edi
  int v27; // ebx
  int v28; // ST14_4
  void *v29; // edi
  int v30; // ebx
  int v31; // edi
  signed int v32; // esi
  unsigned __int16 *v33; // eax
  int v34; // ST4C_4
  int v35; // ST48_4
  int v36; // ecx
  int v37; // ST44_4
  int v38; // edx
  int v39; // eax
  int v40; // edi
  int v41; // esi
  unsigned __int16 *v42; // eax
  int v43; // edx
  int v44; // eax
  int v45; // eax
  unsigned __int16 *v46; // eax
  int v47; // ebx
  int v48; // eax
  int v49; // eax
  int v50; // ST50_4
  void *v51; // esi
  char v53; // [esp+Ch] [ebp-14Ch]
  int v54; // [esp+10Ch] [ebp-4Ch]
  UINT menu_bg_offset_x; // [esp+110h] [ebp-48h]
  int *v56; // [esp+114h] [ebp-44h]
  UINT main_menu_offset_x; // [esp+118h] [ebp-40h]
  int v58; // [esp+11Ch] [ebp-3Ch]
  void *v59; // [esp+120h] [ebp-38h]
  int v60; // [esp+124h] [ebp-34h]
  void *menu_bg_offset_y; // [esp+128h] [ebp-30h]
  void *v62; // [esp+12Ch] [ebp-2Ch]
  int v63; // [esp+130h] [ebp-28h]
  int v64; // [esp+134h] [ebp-24h]
  int v65; // [esp+138h] [ebp-20h]
  int v66; // [esp+13Ch] [ebp-1Ch]
  int v67; // [esp+140h] [ebp-18h]
  float v68; // [esp+144h] [ebp-14h]
  int main_menu_offset_y; // [esp+148h] [ebp-10h]
  int v70; // [esp+14Ch] [ebp-Ch]
  float v71; // [esp+150h] [ebp-8h]
  float v72; // [esp+154h] [ebp-4h]

  if ( *(_DWORD *)IDA__main_menu_created )
    return 0;
  sub_1000EE60(this);
  v1 = sub_1000EF30(0, 0, scr_width, newBytes, 0, 12);
  v2 = (void *)IDA__main_window;
  *(_DWORD *)IDA__main_window = v1;
  if ( *(_DWORD *)IDA__main_window == -1 )
    goto LABEL_69;
  v3 = 0;
  v56 = (int *)sub_1000EF10(v2);
  v67 = v56[11];
  v63 = 0;
  v62 = 0;
  main_menu_size = F_GetPrivateProfileIntA("MAINMENU", "MAIN_MENU_SIZE", 0);
  use_hires_images = F_GetPrivateProfileIntA("MAINMENU", "USE_HIRES_IMAGES", 0);
  scale_buttons_and_text_menu = F_GetPrivateProfileIntA("MAINMENU", "SCALE_BUTTONS_AND_TEXT_MENU", 0);
  menu_bg_offset_x = F_GetPrivateProfileIntA("MAINMENU", "MENU_BG_OFFSET_X", -24);
  menu_bg_offset_y = (void *)F_GetPrivateProfileIntA("MAINMENU", "MENU_BG_OFFSET_Y", -24);
  v4 = F_GetPrivateProfileIntA_3("Misc", "MainMenuOffsetX", 0);
  v5 = v4 + 425;
  main_menu_offset_x = v4 + 425;
  v6 = F_GetPrivateProfileIntA_3("Misc", "MainMenuOffsetY", 0);
  main_menu_offset_y = v6 + 45;
  v7 = (char *)(v5 + 95);
  LODWORD(v68) = v6 + 46;
  if ( IDA_main_menu_create___someMov1 )
  {
    v63 = **(unsigned __int8 **)IDA_main_menu_create___someMov1 | 0x6000000;
    v3 = v63;
  }
  if ( !use_hires_images )
    goto LABEL_72;
  v8 = sub_10005DF0((int)"HR_MAINMENU.frm", 6u);
  v9 = sub_10005DF0((int)"HR_MENU_BG.frm", 6u);
  v62 = v9;
  if ( v9 )
    sub_100151F0(
      *(_DWORD *)(*((_DWORD *)v9 + 16) + 12),
      (char *)(95 - menu_bg_offset_x),
      1 - (_DWORD)menu_bg_offset_y,
      **((unsigned __int16 **)v9 + 16),
      *(unsigned __int16 *)(*((_DWORD *)v9 + 16) + 2),
      v3);
  if ( !v8 || !use_hires_images )
  {
LABEL_72:
    v8 = sub_10005DF0((int)"MAINMENU.frm", 6u);
    sub_100151F0(
      *(_DWORD *)(*((_DWORD *)v8 + 16) + 12),
      v7,
      SLODWORD(v68),
      **((unsigned __int16 **)v8 + 16),
      *(unsigned __int16 *)(*((_DWORD *)v8 + 16) + 2),
      v3);
  }
  v65 = 0;
  v66 = 0;
  v10 = (unsigned __int16 *)*((_DWORD *)v8 + 16);
  LODWORD(v11) = *v10;
  v12 = v10[1];
  v13 = main_menu_size;
  v68 = v11;
  v64 = v12;
  if ( !main_menu_size )
  {
    if ( scr_width >= SLODWORD(v11) && newBytes >= v12 )
    {
      v65 = (scr_width - LODWORD(v11)) / 2;
      v14 = *(char **)(*((_DWORD *)v8 + 16) + 12);
      v66 = (newBytes - v64) / 2;
      v71 = 1.0;
      v72 = 1.0;
      sub_1001D1B0(v14, LODWORD(v11), (char *)v64, SLODWORD(v11), (char *)(v67 + v65 + v66 * scr_width), scr_width);
      if ( !main_menu_size )
      {
        v72 = (double)v64 * 0.0020833334;
        v15 = (double)SLODWORD(v68) * 0.0015625;
        v71 = v15;
        if ( v15 < v72 )
          v72 = v71;
        else
          v71 = v72;
      }
      goto LABEL_27;
    }
    v13 = 1;
    main_menu_size = 1;
  }
  LOBYTE(v68) = 1;
  v72 = (double)newBytes * 0.0020833334;
  v71 = (double)scr_width * 0.0015625;
  switch ( v13 )
  {
    case 1:
      if ( v71 < (double)v72 )
      {
        v66 = (unsigned __int64)(v72 * 240.0 - v71 * 240.0);
        v72 = v71;
        v65 = 0;
      }
      else
      {
        v65 = (unsigned __int64)(v71 * 320.0 - v72 * 320.0);
        v71 = v72;
        v66 = 0;
      }
      break;
    case 2:
      LOBYTE(v68) = 0;
      v65 = 0;
      v66 = 0;
      break;
    case 0:
      goto LABEL_27;
  }
  sub_1001D260(
    *(_DWORD *)(*((_DWORD *)v8 + 16) + 12),
    SLODWORD(v11),
    v64,
    SLODWORD(v11),
    v67,
    scr_width,
    newBytes,
    v68,
    1);
LABEL_27:
  v16 = (char *)*((_DWORD *)v8 + 16);
  if ( v16 )
  {
    v17 = v16 - 4;
    `eh vector destructor iterator'(v16, 0x10u, *((_DWORD *)v16 - 1), sub_10005680);
    j__free(v17);
  }
  j__free(v8);
  v54 = sub_1000E5F0();
  sub_1000E5E0();
  v18 = sub_1000E0C0((int *)IDA__misc_message_file, 0xEu);
  if ( v18 )
  {
    if ( IDA_main_menu_create___someMov2 )
    {
      v19 = **(unsigned __int8 **)IDA_main_menu_create___someMov2 | 0x6000000;
      v63 = **(unsigned __int8 **)IDA_main_menu_create___someMov2 | 0x6000000;
    }
    else
    {
      v19 = v63;
    }
    sub_1000EFE0(*(_DWORD *)IDA__main_window, *(_DWORD *)(v18 + 8), 0, v65 + 15, newBytes - v66 - 20, v19);
  }
  v20 = 640 - (F_GetPrivateProfileIntA_3("Misc", "MainMenuCreditsOffsetX", 0) + 615);
  v21 = 20 - F_GetPrivateProfileIntA_3("Misc", "MainMenuCreditsOffsetY", 0);
  *(float *)&v67 = COERCE_FLOAT(&v53);
  IDA_getverstr_();
  if ( IDA_main_menu_create___someMov3 )
    v63 = **(unsigned __int8 **)IDA_main_menu_create___someMov3 | 0x6000000;
  v70 = newBytes - v21 - v66;
  v59 = (void *)(scr_width - v20 - v65 - sub_1000E690());
  v22 = *(int *)IDA__main_window;
  v64 = 0;
  v68 = COERCE_FLOAT(&v53);
  v67 = v22;
  sub_10015420(v70, v63, -1);
  v23 = sub_10005DF0((int)"MENUUP.FRM", 6u);
  *(float *)&v24 = COERCE_FLOAT(sub_10005DF0((int)"MENUDOWN.FRM", 6u));
  v59 = v24;
  if ( v23 && *(float *)&v24 != 0.0 )
  {
    main_menu_offset_x = (unsigned __int64)((double)(signed int)main_menu_offset_x * v71);
    main_menu_offset_y = (unsigned __int64)((double)main_menu_offset_y * v72);
    if ( use_hires_images )
    {
      if ( scale_buttons_and_text_menu )
        goto LABEL_40;
    }
    else if ( main_menu_size )
    {
LABEL_40:
      v25 = (unsigned __int16 *)*((_DWORD *)v23 + 16);
      v70 = *v25;
      v26 = (unsigned __int64)((double)v70 * v71);
      v70 = v25[1];
      v27 = (unsigned __int64)((double)v70 * v72);
LABEL_41:
      if ( dword_1006AC28 )
        sub_100061D0(dword_1006AC28, 1);
      dword_1006AC28 = sub_100058D0(v26, v27, 2, 1);
      sub_1001D260(
        *(_DWORD *)(*((_DWORD *)v23 + 16) + 12),
        **((unsigned __int16 **)v23 + 16),
        *(unsigned __int16 *)(*((_DWORD *)v23 + 16) + 2),
        **((unsigned __int16 **)v23 + 16),
        *(_DWORD *)(*((_DWORD *)dword_1006AC28 + 16) + 12),
        v26,
        v27,
        0.0,
        0);
      v28 = v26;
      v29 = v59;
      sub_1001D260(
        *(_DWORD *)(*((_DWORD *)v59 + 16) + 12),
        **((unsigned __int16 **)v23 + 16),
        *(unsigned __int16 *)(*((_DWORD *)v23 + 16) + 2),
        **((unsigned __int16 **)v23 + 16),
        *(_DWORD *)(*((_DWORD *)dword_1006AC28 + 16) + 28),
        v28,
        v27,
        0.0,
        0);
      sub_100061D0(v23, 1);
      sub_100061D0(v29, 1);
      *(float *)&v67 = (double)v66;
      v30 = 0;
      v31 = v65 + main_menu_offset_x;
      v32 = 0;
      *(float *)&v59 = (double)main_menu_offset_y;
      do
      {
        v33 = (unsigned __int16 *)*((_DWORD *)dword_1006AC28 + 16);
        v34 = *((_DWORD *)v33 + 7);
        v35 = *((_DWORD *)v33 + 3);
        v36 = v33[1];
        v37 = *(_DWORD *)(dword_1006AC30 + 4 * v32);
        v38 = *v33;
        v70 = v30 - v32;
        *(_DWORD *)(dword_1006AC2C + 4 * v32) = sub_1000F000(
                                                  *(_DWORD *)IDA__main_window,
                                                  v31,
                                                  (unsigned __int64)((double)(v30 - v32) * v72
                                                                   + *(float *)&v59
                                                                   + *(float *)&v67),
                                                  v38,
                                                  v36,
                                                  -1,
                                                  -1,
                                                  1111,
                                                  v37,
                                                  v35,
                                                  v34,
                                                  0,
                                                  32);
        if ( *(_DWORD *)(dword_1006AC30 + 4 * v32) == 111 )
          dword_1003B134 = *(_DWORD *)(dword_1006AC2C + 4 * v32);
        v39 = sub_1000F0B0(*(_DWORD *)(dword_1006AC2C + 4 * v32), 0);
        v30 += 42;
        ++v32;
        *(_DWORD *)(v39 + 76) = *(_DWORD *)(*((_DWORD *)dword_1006AC28 + 16) + 12);
      }
      while ( v32 < 6 );
      if ( use_hires_images && v62 )
      {
        v40 = (unsigned __int64)((double)(signed int)menu_bg_offset_x * v71) + v31;
        v41 = main_menu_offset_y + v66 + (unsigned __int64)((double)(signed int)menu_bg_offset_y * v72);
        if ( v40 < 0 )
          v40 = 0;
        if ( v41 < 0 )
          v41 = 0;
        v42 = (unsigned __int16 *)*((_DWORD *)v62 + 16);
        if ( scale_buttons_and_text_menu )
        {
          v70 = *v42;
          v47 = (unsigned __int64)((double)v70 * v71);
          v70 = *(unsigned __int16 *)(*((_DWORD *)v62 + 16) + 2);
          main_menu_offset_y = (unsigned __int64)((double)v70 * v72);
          menu_bg_offset_y = operator new(v47 * main_menu_offset_y);
          sub_1001D260(
            *(_DWORD *)(*((_DWORD *)v62 + 16) + 12),
            **((unsigned __int16 **)v62 + 16),
            *(unsigned __int16 *)(*((_DWORD *)v62 + 16) + 2),
            **((unsigned __int16 **)v62 + 16),
            (int)menu_bg_offset_y,
            v47,
            main_menu_offset_y,
            0.0,
            0);
          v48 = v56[6];
          if ( v47 + v40 > v48 )
            v40 = v48 - v47;
          v49 = v56[7];
          if ( v41 + main_menu_offset_y > v49 )
            v41 = v49 - main_menu_offset_y;
          v50 = v40 + v56[11] + v56[6] * v41;
          v51 = menu_bg_offset_y;
          sub_1001D200(menu_bg_offset_y, v47, main_menu_offset_y, v47, v50, v56[6]);
          j__free(v51);
        }
        else
        {
          v43 = *v42;
          v44 = v56[6];
          v70 = v43;
          if ( v40 + v43 > v44 )
            v40 = v44 - v70;
          v45 = v56[7];
          v70 = *(unsigned __int16 *)(*((_DWORD *)v62 + 16) + 2);
          if ( v41 + v70 > v45 )
            v41 = v45 - v70;
          sub_1001D200(
            *(_BYTE **)(*((_DWORD *)v62 + 16) + 12),
            **((unsigned __int16 **)v62 + 16),
            *(unsigned __int16 *)(*((_DWORD *)v62 + 16) + 2),
            **((unsigned __int16 **)v62 + 16),
            v40 + v56[11] + v56[6] * v41,
            v56[6]);
        }
        sub_100061D0(v62, 1);
      }
      sub_1000EEC0((int)&v58, (int)&v60);
      sub_1000EB70(v58, v60);
      sub_1000E5E0();
      *(_DWORD *)IDA__main_menu_created = 1;
      *(_DWORD *)IDA__main_menu_is_hidden = 1;
      return 0;
    }
    v46 = (unsigned __int16 *)*((_DWORD *)v23 + 16);
    v26 = *v46;
    v27 = v46[1];
    v71 = 1.0;
    v72 = 1.0;
    goto LABEL_41;
  }
LABEL_69:
  IDA_main_menu_destroy_();
  return -1;
}
// 1006AC20: invalid function type has been ignored
// 1006ABF0: invalid function type has been ignored
// 10015420: using guessed type _DWORD __cdecl sub_10015420(_DWORD, _DWORD, _DWORD);
// 1003B134: using guessed type int dword_1003B134;
// 100645E0: using guessed type int IDA__main_window;
// 1006ABF0: using guessed type int (*IDA_main_menu_destroy_)(void);
// 1006ABF4: using guessed type int main_menu_size;
// 1006ABF8: using guessed type int use_hires_images;
// 1006ABFC: using guessed type int scale_buttons_and_text_menu;
// 1006AC00: using guessed type int IDA__misc_message_file;
// 1006AC04: using guessed type int IDA_main_menu_create___someMov1;
// 1006AC08: using guessed type int IDA_main_menu_create___someMov2;
// 1006AC0C: using guessed type int IDA_main_menu_create___someMov3;
// 1006AC10: using guessed type int IDA__main_menu_created;
// 1006AC14: using guessed type int IDA__main_menu_is_hidden;
// 1006AC20: using guessed type int (*IDA_getverstr_)(void);
// 1006AC2C: using guessed type int dword_1006AC2C;
// 1006AC30: using guessed type int dword_1006AC30;

//----- (10015D50) --------------------------------------------------------
signed int __thiscall sub_10015D50(void *this)
{
  return sub_100154C0(this);
}

//----- (10015D70) --------------------------------------------------------
int F_initFunc25_resStuf2()
{
  int v0; // eax
  int v1; // eax
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // eax

  main_menu_size = F_GetPrivateProfileIntA("MAINMENU", "MAIN_MENU_SIZE", 0);
  use_hires_images = F_GetPrivateProfileIntA("MAINMENU", "USE_HIRES_IMAGES", 0);
  scale_buttons_and_text_menu = F_GetPrivateProfileIntA("MAINMENU", "SCALE_BUTTONS_AND_TEXT_MENU", 0);
  IDA__misc_message_file = F_ptrCorrection_(5819440);
  IDA_main_menu_create___someMov1 = F_ptrCorrection_(4666998);
  IDA_main_menu_create___someMov2 = F_ptrCorrection_(4666552);
  IDA_main_menu_create___someMov3 = F_ptrCorrection_(4666608);
  IDA__main_menu_created = F_ptrCorrection_(5266320);
  IDA__main_menu_is_hidden = F_ptrCorrection_(6368736);
  dword_1006AC2C = (int)&unk_1006ABD4;
  v0 = F_ptrCorrection_(6368744);
  F_writeMemUnk(0x4736EEu, v0, (int)&unk_1006ABD4);
  v1 = F_ptrCorrection_(6368744);
  F_writeMemUnk(0x473700u, v1, (int)&unk_1006ABD4);
  dword_1006AC30 = (int)&unk_1003B138;
  v2 = F_ptrCorrection_(5266328);
  F_writeMemUnk(0x4738A7u, v2, (int)&unk_1003B138);
  v3 = F_ptrCorrection_(5266328);
  F_writeMemUnk(0x4738AFu, v3, (int)&unk_1003B138);
  v4 = F_ptrCorrection_(5266328);
  F_writeMemUnk(0x4738F6u, v4, (int)&unk_1003B138);
  v5 = F_ptrCorrection_(5266348);
  F_writeMemUnk(0x4738C9u, v5, (int)&unk_1003B150);
  F_writeMem8(4667599, 3u, 4);
  F_writeMem8(4667633, 0x14u, 24);
  F_writeMem8(4667145, 0x14u, 24);
  IDA_getverstr_ = (int (*)(void))F_ptrCorrection_(4855248);
  IDA_main_menu_hide_ = (int (*)(void))F_ptrCorrection_(4667248);
  IDA_main_menu_show_ = (int (*)(void))F_ptrCorrection_(4667320);
  IDA_main_menu_create_ = (int (*)(void))F_ptrCorrection_(4666304);
  IDA_main_menu_destroy_ = (int (*)(void))F_ptrCorrection_(4667096);
  F_writeMem24(0x47371Du, -371857, (int)sub_100154B0);
  F_writeMem24(0x47375Cu, 324340, (int)sub_100151D0);
  F_writeMem8(4666304, 0x53u, 233);
  F_writeMem32(0x4733C1u, 1465274961, (int)sub_10015D50);
  IDA_main_menu_create___someCall1 = F_ptrCorrection_(4666651);
  return F_writeMem8(4666656, 0x6Au, 195);
}
// 100151D0: using guessed type int sub_100151D0();
// 1006ABEC: using guessed type int (*IDA_main_menu_create_)(void);
// 1006ABF0: using guessed type int (*IDA_main_menu_destroy_)(void);
// 1006ABF4: using guessed type int main_menu_size;
// 1006ABF8: using guessed type int use_hires_images;
// 1006ABFC: using guessed type int scale_buttons_and_text_menu;
// 1006AC00: using guessed type int IDA__misc_message_file;
// 1006AC04: using guessed type int IDA_main_menu_create___someMov1;
// 1006AC08: using guessed type int IDA_main_menu_create___someMov2;
// 1006AC0C: using guessed type int IDA_main_menu_create___someMov3;
// 1006AC10: using guessed type int IDA__main_menu_created;
// 1006AC14: using guessed type int IDA__main_menu_is_hidden;
// 1006AC18: using guessed type int (*IDA_main_menu_show_)(void);
// 1006AC1C: using guessed type int (*IDA_main_menu_hide_)(void);
// 1006AC20: using guessed type int (*IDA_getverstr_)(void);
// 1006AC24: using guessed type int IDA_main_menu_create___someCall1;
// 1006AC2C: using guessed type int dword_1006AC2C;
// 1006AC30: using guessed type int dword_1006AC30;

//----- (10015FD0) --------------------------------------------------------
int __usercall sub_10015FD0@<eax>(int a1@<eax>, int a2@<edx>)
{
  int v3; // [esp+0h] [ebp-14h]

  return sub_1000A310(a1, a2, v3);
}

//----- (10015FF0) --------------------------------------------------------
int __usercall sub_10015FF0@<eax>(int a1@<eax>, int a2@<edx>)
{
  return sub_1000A430(a1, a2);
}

//----- (10016010) --------------------------------------------------------
int __usercall sub_10016010@<eax>(int a1@<eax>, int a2@<edx>)
{
  int result; // eax
  int v3; // [esp-8h] [ebp-1Ch]
  int v4; // [esp-4h] [ebp-18h]

  result = sub_10009F40(a1, a2);
  if ( result != -1 )
  {
    sub_1000ABA0(v3, v4);
    result = 0;
  }
  return result;
}

//----- (10016040) --------------------------------------------------------
int __usercall sub_10016040@<eax>(int a1@<eax>, int a2@<edx>)
{
  int v2; // ebx
  int v3; // ST08_4

  v2 = a1;
  v3 = sub_10009A00(a1, a2);
  sub_1000AD70(v2);
  return v3;
}

//----- (10016060) --------------------------------------------------------
int __usercall sub_10016060@<eax>(int a1@<eax>, int a2@<edx>)
{
  int v2; // ST08_4
  int result; // eax
  int v4; // ebx
  int v5; // ST08_4

  v2 = a1;
  result = sub_10009AF0(a1, a2);
  v4 = v2;
  if ( result )
  {
    v5 = result;
    sub_1000AD90(v4);
    result = v5;
  }
  return result;
}

//----- (10016090) --------------------------------------------------------
int __usercall sub_10016090@<eax>(void *a1@<ecx>, int a2@<ebx>)
{
  int v2; // ST04_4

  v2 = sub_10009B20(a1);
  sub_1000D100(a2);
  return v2;
}

//----- (100160C0) --------------------------------------------------------
int __usercall sub_100160C0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ebx>)
{
  int result; // eax
  int v4; // ST04_4

  result = sub_10009AF0(a1, a2);
  if ( result )
  {
    v4 = result;
    sub_1000AE90(a3);
    result = v4;
  }
  return result;
}

//----- (100160F0) --------------------------------------------------------
signed int __usercall sub_100160F0@<eax>(int a1@<eax>, int a2@<edx>)
{
  return sub_1000D380(a1, a2);
}

//----- (10016110) --------------------------------------------------------
int __cdecl sub_10016110(int a1)
{
  sub_1000D380(a1, 3);
  return 0;
}

//----- (10016130) --------------------------------------------------------
int __usercall sub_10016130@<eax>(int a1@<eax>)
{
  return sub_10016110(a1);
}

//----- (10016150) --------------------------------------------------------
signed int __cdecl sub_10016150(_DWORD *a1, int *a2, _DWORD *a3)
{
  int v3; // eax
  _DWORD *v4; // ecx
  int v5; // esi
  int v6; // ebx
  char *v7; // edx
  int v8; // eax
  unsigned int v9; // esi
  int v11; // [esp+10h] [ebp-4h]

  v3 = sub_1000EF10(*(void **)IDA__display_win);
  v4 = a1;
  v5 = a1[1];
  v6 = v3;
  v7 = (char *)(*a1 + *(_DWORD *)(v3 + 44) + v5 * *(_DWORD *)(v3 + 24));
  v8 = a1[3] - v5 + 1;
  v9 = a1[2] - *a1 + 1;
  if ( v8 > 0 )
  {
    v11 = v8;
    do
    {
      memset(v7, 0, v9);
      v7 += *(_DWORD *)(v6 + 24);
      --v11;
    }
    while ( v11 );
    v4 = a1;
  }
  return sub_1000B4F0(v4, a2, a3);
}
// 100645EC: using guessed type int IDA__display_win;

//----- (100161D0) --------------------------------------------------------
signed int __usercall sub_100161D0@<eax>(_DWORD *a1@<eax>, int *a2@<edx>)
{
  _DWORD *v3; // [esp+0h] [ebp-14h]

  return sub_10016150(a1, a2, v3);
}

//----- (100161F0) --------------------------------------------------------
signed int __cdecl sub_100161F0(_DWORD *a1, int *a2, _DWORD *a3)
{
  signed int result; // eax
  int v4; // [esp+4h] [ebp-10h]
  int v5; // [esp+8h] [ebp-Ch]
  int v6; // [esp+Ch] [ebp-8h]
  int v7; // [esp+10h] [ebp-4h]

  result = sub_1000B2E0(a1, a2, a3);
  if ( result != -1 )
  {
    v4 = dword_10064264 + 1;
    v5 = dword_10064268 + 1;
    v6 = dword_1006426C - 1;
    v7 = dword_10064270 - 1;
    result = sub_1000B2E0(a3, &v4, a3);
  }
  return result;
}
// 10064264: using guessed type int dword_10064264;
// 10064268: using guessed type int dword_10064268;
// 1006426C: using guessed type int dword_1006426C;
// 10064270: using guessed type int dword_10064270;

//----- (10016260) --------------------------------------------------------
signed int __usercall sub_10016260@<eax>(_DWORD *a1@<eax>, int *a2@<edx>)
{
  _DWORD *v3; // [esp+0h] [ebp-14h]

  return sub_100161F0(a1, a2, v3);
}

//----- (10016280) --------------------------------------------------------
signed int __usercall sub_10016280@<eax>(_DWORD *a1@<eax>, int *a2@<edx>)
{
  _DWORD *v3; // [esp+0h] [ebp-14h]

  return sub_1000B4F0(a1, a2, v3);
}

//----- (100162A0) --------------------------------------------------------
// DONE
signed int __usercall FOW_sub_100162A0@<eax>(signed int a1@<eax>, int a2@<edx>, signed int a3@<ebp>)
{
  return sub_1000D5D0(a1, a2, a3);
}

//----- (100162C0) --------------------------------------------------------
int __usercall sub_100162C0@<eax>(int *a1@<eax>, int a2@<edx>)
{
  return sub_1000D690(a1, a2);
}

//----- (100162E0) --------------------------------------------------------
int __userpurge sub_100162E0@<eax>(int a1@<edx>, int a2@<edi>, int a3@<esi>, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12)
{
  int result; // eax

  result = sub_1000B840(a2, a12, a1);
  if ( result == -1 )
    result = a3;
  return result;
}

//----- (10016300) --------------------------------------------------------
int __userpurge sub_10016300@<eax>(int a1@<edx>, int a2, int a3, int a4)
{
  int result; // eax
  char *retaddr; // [esp+0h] [ebp+0h]

  result = sub_1000B840(a3, a4, a1);
  if ( result == -1 )
  {
    result = 0;
    retaddr += 9;
  }
  return result;
}

//----- (10016330) --------------------------------------------------------
int __thiscall sub_10016330(void *this)
{
  int result; // eax

  result = FOWEnable;
  if ( FOWEnable )
  {
    result = *(_DWORD *)(*(_DWORD *)IDA__obj_dude + 4);
    if ( result != dword_1006AC3C )
    {
      dword_1006AC3C = *(_DWORD *)(*(_DWORD *)IDA__obj_dude + 4);
      result = sub_1000D320(this);
    }
  }
  return result;
}
// 100643F8: using guessed type int FOWEnable;
// 10064460: using guessed type int IDA__obj_dude;
// 1006AC3C: using guessed type int dword_1006AC3C;

//----- (10016360) --------------------------------------------------------
int __thiscall sub_10016360(void *this)
{
  return sub_10016330(this);
}

//----- (10016380) --------------------------------------------------------
int __usercall FOW_sub_10016380@<eax>(int *a1@<eax>, int a2@<edx>)
{
  return FOW_sub_1000DCD0(a1, a2);
}

//----- (100163A0) --------------------------------------------------------
int __userpurge sub_100163A0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, int *a5)
{
  return sub_1000C4D0(a1, a2, a4, a3, a5);
}

//----- (100163C0) --------------------------------------------------------
int sub_100163C0()
{
  signed int v0; // esi
  int result; // eax

  v0 = F_GetPrivateProfileIntA("MAPS", "NumPathNodes", 1);
  result = dword_1003B168 / 2000;
  if ( v0 != dword_1003B168 / 2000 && v0 > 0 && v0 <= 20 )
  {
    if ( dword_1006AC34 )
      j__free(dword_1006AC34);
    dword_1006AC34 = 0;
    if ( dword_1006AC38 )
      j__free(dword_1006AC38);
    dword_1006AC38 = 0;
    dword_1003B168 = 2000 * v0;
    dword_1006AC34 = operator new(160000 * v0);
    dword_1006AC38 = operator new(80 * dword_1003B168);
    F_writeMemUnk(0x415C33u, 2000, dword_1003B168);
    F_writeMemUnk(0x415AB3u, 40000, 20 * dword_1003B168);
    F_writeMemUnk(0x415B84u, 40000, 20 * dword_1003B168);
    F_writeMemUnk(0x415AAEu, 5556864, (int)dword_1006AC34);
    F_writeMemUnk(0x415A60u, 5556884, (int)dword_1006AC34 + 20);
    F_writeMemUnk(0x415AEBu, 5556884, (int)dword_1006AC34 + 20);
    F_writeMemUnk(0x415B33u, 5556884, (int)dword_1006AC34 + 20);
    F_writeMemUnk(0x415B51u, 5556884, (int)dword_1006AC34 + 20);
    F_writeMemUnk(0x415C12u, 5556884, (int)dword_1006AC34 + 20);
    F_writeMemUnk(0x415C53u, 5556884, (int)dword_1006AC34 + 20);
    F_writeMemUnk(0x415A73u, 5556888, (int)dword_1006AC34 + 24);
    F_writeMemUnk(0x415C67u, 5556888, (int)dword_1006AC34 + 24);
    F_writeMemUnk(0x415A8Bu, 5556892, (int)dword_1006AC34 + 28);
    F_writeMemUnk(0x415C75u, 5556892, (int)dword_1006AC34 + 28);
    F_writeMemUnk(0x415A9Au, 5556896, (int)dword_1006AC34 + 32);
    F_writeMemUnk(0x415AFEu, 5556896, (int)dword_1006AC34 + 32);
    F_writeMemUnk(0x415B0Cu, 5556896, (int)dword_1006AC34 + 32);
    F_writeMemUnk(0x415C84u, 5556896, (int)dword_1006AC34 + 32);
    F_writeMemUnk(0x415AA0u, 5556900, (int)dword_1006AC34 + 36);
    F_writeMemUnk(0x415B04u, 5556900, (int)dword_1006AC34 + 36);
    F_writeMemUnk(0x415B12u, 5556900, (int)dword_1006AC34 + 36);
    F_writeMemUnk(0x415C95u, 5556900, (int)dword_1006AC34 + 36);
    F_writeMemUnk(0x415CADu, 5556900, (int)dword_1006AC34 + 36);
    F_writeMemUnk(0x415C1Eu, 5556904, (int)dword_1006AC34 + 40);
    F_writeMemUnk(0x415B71u, 5596884, (int)dword_1006AC38);
    F_writeMemUnk(0x415CECu, 5596884, (int)dword_1006AC38);
    F_writeMemUnk(0x415D18u, 5596884, (int)dword_1006AC38);
    result = F_writeMemUnk(0x415D04u, 5596904, (int)dword_1006AC38 + 20);
  }
  return result;
}

//----- (10016730) --------------------------------------------------------
BOOL sub_10016730()
{
  BOOL result; // eax

  F_chkEnableFOWAndOthers();
  sub_100163C0();
  *(_DWORD *)IDA__scroll_blocking_on = F_GetPrivateProfileIntA("MAPS", "IGNORE_MAP_EDGES", 0) == 0;
  *(_DWORD *)IDA__scroll_limiting_o = F_GetPrivateProfileIntA("MAPS", "IGNORE_PLAYER_SCROLL_LIMITS", 0) == 0;
  if ( FOWEnable )
    result = sub_1001D170(0x47E314u, 195);
  else
    result = sub_1001D170(0x47E314u, 83);
  return result;
}
// 1003D0D8: using guessed type int IDA__scroll_limiting_o;
// 10064378: using guessed type int IDA__scroll_blocking_on;
// 100643F8: using guessed type int FOWEnable;

//----- (100167B0) --------------------------------------------------------
int F_initFunc15_enableFOWAndOthers()
{
  int v0; // eax
  int v1; // eax
  int v2; // eax
  int v3; // ST44_4
  int v4; // eax

  F_chkEnableFOWAndOthers();
  F_writeMem24(0x444E27u, 234277, (int)sub_100163A0);
  F_writeMem8(4700128, 0x53u, 233);
  F_writeMem32(0x47B7E1u, 1431787089, (int)FOW_sub_10016380);
  v0 = F_ptrCorrection_(6521200);
  F_writeMemUnk(0x47BAADu, v0, (int)FOW_dword_1003C908);
  v1 = F_ptrCorrection_(5266576);
  F_writeMemUnk(0x47BA9Du, v1, (int)&FOW_dword_10064418);
  v2 = F_ptrCorrection_(5266576);
  F_writeMemUnk(0x47BAB9u, v2, (int)&FOW_dword_10064418);
  if ( F_GetPrivateProfileIntA("MAPS", "IGNORE_MAP_EDGES", 0) )
    F_writeMem24(0x473EFFu, 175745, 4844944);
  if ( F_GetPrivateProfileIntA("MAPS", "IGNORE_PLAYER_SCROLL_LIMITS", 0) )
    F_writeMem24(0x473F04u, 175772, 4844976);
  v3 = F_ptrCorrection_(6488836);
  v4 = F_ptrCorrection_(6721140);
  F_writeMemUnk(0x474D9Au, v4, v3);
  F_writeMem24(0x474AD0u, 242720, (int)sub_100160C0);
  F_writeMem8(4851924, 0x53u, 233);
  F_writeMem32(0x4A08D5u, 1431787089, (int)sub_10016130);
  F_writeMem24(0x4422EEu, 508322, (int)sub_1000B1D0);
  func_writeMem16(4844160, 0x5651u, 59792);
  F_writeMem32(0x49EA82u, -561425065, (int)sub_10015FD0);
  F_writeMem8(4843884, 0x53u, 233);
  F_writeMem32(0x49E96Du, 1431787089, (int)sub_10015FF0);
  F_writeMem24(0x47609Du, 250279, (int)sub_100161D0);
  F_writeMem24(0x476100u, 250180, (int)sub_10016280);
  F_writeMem24(0x49E65Au, 84970, (int)sub_10016280);
  F_writeMem24(0x49E6EBu, 84825, (int)sub_10016280);
  F_writeMem24(0x47BA93u, 227249, (int)sub_10016260);
  F_writeMem8(4842476, 0x53u, 233);
  F_writeMem32(0x49E3EDu, 1431787089, (int)sub_100160F0);
  F_writeMem24(0x49F264u, -548380, (int)sub_100162E0);
  F_writeMem24(0x49FBACu, -550756, (int)sub_10016300);
  F_writeMem8(4438670, 0x31u, 232);
  F_writeMem32(0x43BA8Fu, 100172781, (int)sub_10016360);
  F_writeMem8(4847868, 0x53u, 233);
  F_writeMem32(0x49F8FDu, 1431787089, (int)sub_100162C0);
  F_writeMem24(0x4A0250u, -209676, (int)FOW_sub_100162A0);
  func_writeMem16(4850260, 0xE839u, 5611);
  F_writeMem24(0x475961u, 238991, (int)sub_10016060);
  F_writeMem24(0x46DE06u, 17090, (int)sub_10016040);
  F_writeMem24(0x46DE1Cu, 17068, (int)sub_10016040);
  F_writeMem24(0x4719F2u, 1750, (int)sub_10016040);
  F_writeMem24(0x471C9Du, 1067, (int)sub_10016040);
  F_writeMem24(0x4720C3u, 5, (int)sub_10016040);
  F_writeMem32(0x471B32u, 950, (int)sub_10016010);
  F_writeMem32(0x471D4Cu, 412, (int)sub_10016010);
  F_writeMem24(0x474AE4u, 254124, (int)sub_10016090);
  if ( FOWEnable )
    F_writeMem8(4711188, 0x53u, 195);
  return sub_100163C0();
}
// 100643F8: using guessed type int FOWEnable;
// 10064418: using guessed type int FOW_dword_10064418;

//----- (10016B80) --------------------------------------------------------
signed int __cdecl sub_10016B80(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  if ( a7 == 6 || a7 == 11 || (dword_1006AC44 = 0, a7 == 12) )
    dword_1006AC44 = 1;
  if ( *(_DWORD *)IDA__GNWWin != -1 )
    return -1;
  *(_DWORD *)IDA__GNWWin = sub_1000EF30(a1, a2, a3, a4, a5, a6);
  return *(_DWORD *)IDA__GNWWin;
}
// 1006458C: using guessed type int IDA__GNWWin;
// 1006AC44: using guessed type int dword_1006AC44;

//----- (10016BF0) --------------------------------------------------------
signed int __userpurge sub_10016BF0@<eax>(int a1@<eax>, int a2@<edx>, int a3@<ecx>, int a4@<ebx>, int a5, int a6)
{
  int v7; // [esp+0h] [ebp-4h]

  return sub_10016B80(a1, a2, a4, a3, a5, a6, v7);
}

//----- (10016C10) --------------------------------------------------------
int sub_10016C10()
{
  int v0; // ST00_4
  void *v1; // ecx

  v0 = *(_DWORD *)IDA__GNWWin;
  sub_1000EF60();
  *(_DWORD *)IDA__GNWWin = -1;
  return sub_1000D320(v1);
}
// 10016C10: using guessed type int sub_10016C10();
// 1006458C: using guessed type int IDA__GNWWin;

//----- (10016C40) --------------------------------------------------------
int sub_10016C40()
{
  int v0; // esi
  int v1; // eax
  _DWORD *v2; // edx
  int *v3; // ecx
  int v4; // eax
  int v5; // eax
  void *v6; // ecx
  int v7; // ST00_4
  _DWORD *v8; // eax
  int result; // eax
  float v10; // [esp+0h] [ebp-4h]

  if ( *(_DWORD *)IDA__GNWWin != -1 )
    sub_1000EF60();
  v0 = 0;
  if ( *(_DWORD *)IDA__subtitles == 1 || dword_1006AC44 == 1 )
    v0 = *(_DWORD *)IDA__subtitleH;
  if ( movie_size == 1 || scr_width < *(_DWORD *)IDA_dword_6B276C || newBytes < *(_DWORD *)IDA_dword_6B2A9F )
  {
    v10 = (double)*(signed int *)IDA_dword_6B276C / (double)*(signed int *)IDA_dword_6B2A9F;
    if ( (double)scr_width / (double)newBytes > v10 )
    {
      *(_DWORD *)IDA__movieY = 0;
      *(_DWORD *)IDA__movieH = newBytes - v0;
      *(_DWORD *)IDA__movieW = (unsigned __int64)((double)*(signed int *)IDA__movieH * v10);
      v1 = scr_width;
      v2 = (_DWORD *)IDA__movieW;
      v3 = (int *)IDA__movieX;
      goto LABEL_18;
    }
    *(_DWORD *)IDA__movieX = 0;
    *(_DWORD *)IDA__movieW = scr_width;
    *(_DWORD *)IDA__movieH = (unsigned __int64)((double)*(signed int *)IDA__movieW / v10);
    *(_DWORD *)IDA__movieY = (newBytes - *(_DWORD *)IDA__movieH) / 2;
    v4 = *(_DWORD *)IDA__movieY;
    if ( newBytes - v0 < *(_DWORD *)IDA__movieY + *(_DWORD *)IDA__movieH )
    {
      if ( v0 >= v4 )
      {
        *(_DWORD *)IDA__movieH += v4 - v0;
        *(_DWORD *)IDA__movieW = (unsigned __int64)((double)*(signed int *)IDA__movieH * v10);
        *(_DWORD *)IDA__movieX = (scr_width - *(_DWORD *)IDA__movieW) / 2;
        *(_DWORD *)IDA__movieY = 0;
      }
      else
      {
        *(_DWORD *)IDA__movieY = v4 - v0;
      }
    }
  }
  else if ( !movie_size || movie_size != 2 )
  {
    *(_DWORD *)IDA__movieW = *(_DWORD *)IDA_dword_6B276C;
    *(_DWORD *)IDA__movieH = *(_DWORD *)IDA_dword_6B2A9F;
    *(_DWORD *)IDA__movieX = (scr_width - *(_DWORD *)IDA__movieW) / 2;
    v1 = newBytes;
    v2 = (_DWORD *)IDA__movieH;
    v3 = (int *)IDA__movieY;
LABEL_18:
    *v3 = (v1 - *v2) / 2;
    goto LABEL_19;
  }
LABEL_19:
  *(_DWORD *)IDA__subtitleW = scr_width;
  v5 = sub_1000EF30(0, 0, scr_width, newBytes, 0, 16);
  v6 = (void *)IDA__GNWWin;
  *(_DWORD *)IDA__GNWWin = v5;
  v7 = *(_DWORD *)IDA__GNWWin;
  v8 = (_DWORD *)sub_1000EF10(v6);
  *(_DWORD *)IDA__winRect = v8[2];
  *(_DWORD *)(IDA__winRect + 4) = v8[3];
  *(_DWORD *)(IDA__winRect + 8) = v8[4];
  *(_DWORD *)(IDA__winRect + 12) = v8[5];
  *(_DWORD *)IDA__movieRect = 0;
  *(_DWORD *)(IDA__movieRect + 4) = 0;
  *(_DWORD *)(IDA__movieRect + 8) = v8[4];
  result = v8[5];
  *(_DWORD *)(IDA__movieRect + 12) = result;
  return result;
}
// 1006458C: using guessed type int IDA__GNWWin;
// 1006AC40: using guessed type int movie_size;
// 1006AC44: using guessed type int dword_1006AC44;
// 1006AC48: using guessed type int IDA__subtitles;
// 1006AC54: using guessed type int IDA_dword_6B276C;
// 1006AC58: using guessed type int IDA_dword_6B2A9F;
// 1006AC5C: using guessed type int IDA__movieX;
// 1006AC64: using guessed type int IDA__movieW;
// 1006AC6C: using guessed type int IDA__winRect;
// 1006AC70: using guessed type int IDA__movieRect;
// 1006AC74: using guessed type int IDA__subtitleW;
// 1006AC78: using guessed type int IDA__subtitleH;

//----- (10016EE0) --------------------------------------------------------
void __spoils<ecx> sub_10016EE0()
{
  sub_10016C40();
}

//----- (10016EF0) --------------------------------------------------------
int sub_10016EF0()
{
  int result; // eax

  result = IDA__GNWWin;
  if ( *(_DWORD *)IDA__GNWWin != -1 )
    result = sub_10016C40();
  return result;
}
// 1006458C: using guessed type int IDA__GNWWin;

//----- (10016F00) --------------------------------------------------------
void sub_10016F00()
{
  ;
}

//----- (10016F10) --------------------------------------------------------
UINT sub_10016F10()
{
  UINT result; // eax

  result = F_GetPrivateProfileIntA("MOVIES", "MOVIE_SIZE", 0);
  movie_size = result;
  return result;
}
// 1006AC40: using guessed type int movie_size;

//----- (10016F30) --------------------------------------------------------
int F_initFunc23_resStuf3()
{
  int v0; // eax
  int v1; // ST44_4
  int v2; // eax
  int v3; // ST44_4
  int v4; // eax
  int v5; // ST44_4
  int v6; // eax
  int v7; // ST44_4
  int v8; // eax

  movie_size = F_GetPrivateProfileIntA("MOVIES", "MOVIE_SIZE", 0);
  IDA__subtitleW = F_ptrCorrection_(6517764);
  IDA__subtitleH = F_ptrCorrection_(6517824);
  IDA__subtitles = F_ptrCorrection_(6692604);
  IDA__movieX = F_ptrCorrection_(6517792);
  IDA__movieY = F_ptrCorrection_(6517796);
  IDA__movieW = F_ptrCorrection_(6517812);
  IDA__movieH = F_ptrCorrection_(6517784);
  IDA__winRect = F_ptrCorrection_(6517648);
  IDA__movieRect = F_ptrCorrection_(6517664);
  IDA_dword_6B2A8B = F_ptrCorrection_(7023243);
  IDA_dword_6B2A8F = F_ptrCorrection_(7023247);
  IDA_dword_6B276C = F_ptrCorrection_(7022444);
  IDA_dword_6B2A9F = F_ptrCorrection_(7023263);
  IDA_gmovie_play___someMov1 = F_ptrCorrection_(4482727);
  F_writeMem8(4692501, 0x74u, 235);
  F_writeMem8(4691987, 0xBAu, 232);
  F_writeMem32(0x479814u, 480, (int)sub_10016F00);
  F_writeMem24(0x44683Du, 508435, (int)sub_10016C10);
  func_writeMem16(5078468, 0x870Fu, 37008);
  F_writeMemUnk(0x4D7DC6u, 829, -1869574000);
  func_writeMem16(5078497, 0x870Fu, 37008);
  F_writeMemUnk(0x4D7DE3u, 800, -1869574000);
  F_writeMem8(5081792, 0xB9u, 232);
  F_writeMem32(0x4D8AC1u, 27, (int)sub_10016EE0);
  func_writeMem16(4690859, 0x2D89u, 37008);
  v0 = F_ptrCorrection_(5266468);
  F_writeMemUnk(0x4793ADu, v0, -1869574000);
  F_writeMem24(0x4465A6u, 508542, (int)sub_10016BF0);
  F_writeMem8(4688888, 0x35u, 45);
  v1 = IDA__movieY;
  v2 = F_ptrCorrection_(6517724);
  F_writeMemUnk(0x47981Au, v2, v1);
  v3 = IDA__movieY;
  v4 = F_ptrCorrection_(6517724);
  F_writeMemUnk(0x479842u, v4, v3);
  v5 = IDA__movieH;
  v6 = F_ptrCorrection_(6517716);
  F_writeMemUnk(0x479820u, v6, v5);
  v7 = IDA__movieH;
  v8 = F_ptrCorrection_(6517716);
  return F_writeMemUnk(0x47983Bu, v8, v7);
}
// 10016C10: using guessed type int sub_10016C10();
// 1006AC40: using guessed type int movie_size;
// 1006AC48: using guessed type int IDA__subtitles;
// 1006AC4C: using guessed type int IDA_dword_6B2A8B;
// 1006AC50: using guessed type int IDA_dword_6B2A8F;
// 1006AC54: using guessed type int IDA_dword_6B276C;
// 1006AC58: using guessed type int IDA_dword_6B2A9F;
// 1006AC5C: using guessed type int IDA__movieX;
// 1006AC64: using guessed type int IDA__movieW;
// 1006AC6C: using guessed type int IDA__winRect;
// 1006AC70: using guessed type int IDA__movieRect;
// 1006AC74: using guessed type int IDA__subtitleW;
// 1006AC78: using guessed type int IDA__subtitleH;
// 1006AC7C: using guessed type int IDA_gmovie_play___someMov1;

//----- (100171C0) --------------------------------------------------------
int sub_100171C0()
{
  int result; // eax

  result = sub_1000E0A0(IDA__optn_msgfl, (int)"game\\options.msg");
  if ( result )
  {
    sub_1000EEA0();
    IDA_mouse_show_();
    result = IDA_do_prefscreen_();
  }
  return result;
}
// 1006AC80: invalid function type has been ignored
// 10064550: using guessed type int (*IDA_mouse_show_)(void);
// 1006AC80: using guessed type int (*IDA_do_prefscreen_)(void);
// 1006AC84: using guessed type int IDA__optn_msgfl;

//----- (100171F0) --------------------------------------------------------
_DWORD *__usercall sub_100171F0@<eax>(int a1@<eax>, int a2@<edx>)
{
  int v2; // ST00_4
  void *v3; // ecx
  int v4; // ecx
  _DWORD *v5; // ST04_4
  _DWORD *result; // eax
  _DWORD *v7; // ST08_4

  sub_1000EEC0(a1, a2);
  v2 = *(_DWORD *)IDA__prfwin;
  v4 = sub_1000EF10(v3);
  result = v5;
  *result -= *(_DWORD *)(v4 + 8);
  *v7 -= *(_DWORD *)(v4 + 12);
  return result;
}
// 100645E4: using guessed type int IDA__prfwin;

//----- (10017220) --------------------------------------------------------
int F_initFunc19()
{
  IDA__optn_msgfl = F_ptrCorrection_(6692200);
  IDA_do_prefscreen_ = (int (*)(void))F_ptrCorrection_(4727572);
  F_writeMem24(0x482A89u, 208139, (int)sub_100171F0);
  return F_writeMem24(0x4830FEu, 206486, (int)sub_100171F0);
}
// 1006AC80: using guessed type int (*IDA_do_prefscreen_)(void);
// 1006AC84: using guessed type int IDA__optn_msgfl;

//----- (10017270) --------------------------------------------------------
int __usercall sub_10017270@<eax>(int a1@<eax>)
{
  if ( a1 == dword_1006AC8C )
    return IDA_dude_run_();
  dword_1006AC8C = a1;
  return 2;
}
// 1006AC88: using guessed type int (*IDA_dude_run_)(void);
// 1006AC8C: using guessed type int dword_1006AC8C;

//----- (10017290) --------------------------------------------------------
UINT F_initFunc30_doubleClickRun()
{
  UINT result; // eax

  result = F_GetPrivateProfileIntA("OTHER_SETTINGS", "DOUBLE_CLICK_RUNNING", 1);
  if ( result )
  {
    IDA_dude_run_ = (int (*)(void))F_ptrCorrection_(4291164);
    F_writeMem8(4291123, 0xB8u, 232);
    result = F_writeMem32(0x417A34u, 2, (int)sub_10017270);
  }
  return result;
}
// 1006AC88: using guessed type int (*IDA_dude_run_)(void);

//----- (10017300) --------------------------------------------------------
int sub_10017300()
{
  int result; // eax

  result = sub_1000EF60();
  dword_1003B16C = -1;
  return result;
}
// 10017300: using guessed type int sub_10017300();
// 1003B16C: using guessed type int dword_1003B16C;

//----- (10017320) --------------------------------------------------------
int __thiscall sub_10017320(void *this)
{
  int result; // eax
  int v2; // ecx

  result = sub_1000EF10(this);
  v2 = *(_DWORD *)(result + 24);
  return result;
}

//----- (10017350) --------------------------------------------------------
int sub_10017350()
{
  int result; // eax

  if ( dword_1003B16C != -1 )
    result = IDA_ShadeScreen_();
  return result;
}
// 1006AC90: invalid function type has been ignored
// 1003B16C: using guessed type int dword_1003B16C;
// 1006AC90: using guessed type int (*IDA_ShadeScreen_)(void);

//----- (10017370) --------------------------------------------------------
int (*F_initFunc29())(void)
{
  int (*result)(void); // eax

  F_writeMem24(0x481FC9u, 264283, (int)dword_100172E0);
  F_writeMem24(0x482227u, 264233, (int)sub_10017300);
  F_writeMem8(4727474, 0xB9u, 232);
  F_writeMem32(0x4822B3u, 640, (int)sub_10017320);
  result = (int (*)(void))F_ptrCorrection_(4727452);
  IDA_ShadeScreen_ = result;
  return result;
}
// 100172E0: using guessed type int dword_100172E0[5];
// 10017300: using guessed type int sub_10017300();
// 1006AC90: using guessed type int (*IDA_ShadeScreen_)(void);

//----- (100173E0) --------------------------------------------------------
_DWORD *__usercall sub_100173E0@<eax>(int a1@<eax>, int a2@<edx>)
{
  int v2; // ST00_4
  void *v3; // ecx
  int v4; // ecx
  _DWORD *v5; // ST04_4
  _DWORD *result; // eax
  _DWORD *v7; // ST08_4

  sub_1000EEC0(a1, a2);
  v2 = *(_DWORD *)IDA__pip_win;
  v4 = sub_1000EF10(v3);
  result = v5;
  *result -= *(_DWORD *)(v4 + 8);
  *v7 -= *(_DWORD *)(v4 + 12);
  return result;
}
// 100645E8: using guessed type int IDA__pip_win;

//----- (10017410) --------------------------------------------------------
int F_initFunc27()
{
  F_writeMem24(0x486F6Cu, 190504, (int)sub_100173E0);
  return F_writeMem24(0x489F6Eu, 178214, (int)sub_100173E0);
}

//----- (10017440) --------------------------------------------------------
char __cdecl sub_10017440(_DWORD *a1, int a2)
{
  int v2; // eax
  int v3; // edi
  void *v4; // ecx
  void *v6; // eax
  int v7; // ST0C_4
  void *v8; // ecx
  int v9; // [esp+8h] [ebp-8h]
  int v10; // [esp+Ch] [ebp-4h]

  v2 = sub_10009AF0(a2, (int)"rb");
  v3 = v2;
  if ( !v2 )
    return 0;
  v10 = 0;
  sub_10009BA0(v2, (int)&v10);
  if ( v10 != 1380538419 )
  {
    sub_10009B20(v4);
    return 0;
  }
  v9 = 0;
  sub_10009B80(v3, (int)&v9);
  *a1 = (unsigned __int16)sub_10002600(v9);
  sub_10009B80(v3, (int)&v9);
  a1[1] = (unsigned __int16)sub_10002600(v9);
  sub_10009B80(v3, (int)&v9);
  a1[2] = *a1 * a1[1];
  sub_10009C30(v3, (int)(a1 + 3));
  v6 = operator new(a1[2]);
  v7 = a1[2];
  a1[195] = v6;
  sub_10009C30(v3, (int)v6);
  sub_10009B20(v8);
  return 1;
}

//----- (10017520) --------------------------------------------------------
char __cdecl sub_10017520(unsigned int *a1, int a2)
{
  int v2; // eax
  int v3; // esi
  void *v4; // ecx
  char result; // al
  unsigned int v6; // eax
  int v7; // ecx
  void *v8; // ecx
  _BYTE *v9; // ebp
  unsigned __int8 v10; // dl
  int v11; // eax
  unsigned int v12; // eax
  unsigned int v13; // ecx
  void *v14; // ecx
  int v15; // ebx
  int i; // ebp
  char v17; // [esp+Bh] [ebp-19h]
  unsigned int Long; // [esp+Ch] [ebp-18h]
  unsigned int v19; // [esp+10h] [ebp-14h]
  unsigned int v20; // [esp+14h] [ebp-10h]
  int v21; // [esp+18h] [ebp-Ch]
  unsigned int v22; // [esp+1Ch] [ebp-8h]
  int v23; // [esp+20h] [ebp-4h]

  v2 = sub_10009AF0(a2, (int)"rb");
  v3 = v2;
  if ( !v2 )
    return 0;
  v17 = 0;
  v21 = 0;
  sub_10009B80(v2, (int)&v21);
  if ( (_WORD)v21 != 16973 )
  {
    sub_10009B20(v4);
    return 0;
  }
  Long = 0;
  sub_10009BA0(v3, (int)&Long);
  Long = _byteswap_ulong(Long);
  sub_10009B40(v3, 10);
  v20 = 0;
  sub_10009BA0(v3, (int)&v20);
  v20 = _byteswap_ulong(v20);
  Long -= v20;
  v19 = 0;
  sub_10009BA0(v3, (int)&v19);
  v19 = _byteswap_ulong(v19);
  sub_10009BA0(v3, (int)a1);
  *a1 = _byteswap_ulong(*a1);
  sub_10009BA0(v3, (int)(a1 + 1));
  v6 = _byteswap_ulong(a1[1]);
  v7 = v6 * *a1;
  a1[1] = v6;
  a1[2] = v7;
  sub_10009B80(v3, (int)&v21);
  v22 = 0;
  sub_10009B80(v3, (int)&v22);
  v22 = sub_10002600(v22);
  if ( (_WORD)v22 == 8 )
  {
    sub_10009B40(v3, v19 + 14);
    v9 = (char *)a1 + 13;
    v23 = 256;
    do
    {
      sub_10009B60(v3, (int)(v9 + 1));
      sub_10009B60(v3, (int)v9);
      sub_10009B60(v3, (int)(v9 - 1));
      sub_10009B60(v3, (int)&v17);
      v10 = *(v9 - 1);
      v9[1] >>= 2;
      v11 = v23;
      *v9 >>= 2;
      *(v9 - 1) = v10 >> 2;
      v9 += 3;
      v23 = v11 - 1;
    }
    while ( v11 != 1 );
    sub_10009B40(v3, v20);
    a1[195] = (unsigned int)operator new(a1[2]);
    v12 = *a1;
    v13 = *a1;
    if ( *a1 & 3 )
      v13 = (v13 & 0xFFFFFFFC) + 4;
    v14 = (void *)(v13 - v12);
    v15 = a1[2] - v12;
    for ( i = (int)v14; v15 > 0; v15 -= *a1 )
    {
      sub_10009C30(v3, v15 + a1[195]);
      if ( i > 0 )
      {
        v23 = i;
        do
        {
          sub_10009B60(v3, (int)&v17);
          --v23;
        }
        while ( v23 );
      }
    }
    sub_10009B20(v14);
    result = 1;
  }
  else
  {
    sub_10009B20(v8);
    result = 0;
  }
  return result;
}

//----- (100177B0) --------------------------------------------------------
int __cdecl sub_100177B0(FILE *a1, int a2)
{
  fputc(a2, a1);
  fputc((unsigned int)a2 >> 8, a1);
  fputc((unsigned int)a2 >> 16, a1);
  return fputc((unsigned int)a2 >> 24, a1);
}

//----- (100177F0) --------------------------------------------------------
signed int __cdecl sub_100177F0(unsigned int a1, unsigned int a2, int a3, int a4)
{
  int v4; // esi
  FILE *i; // eax
  FILE *v6; // eax
  FILE *v7; // esi
  unsigned int v9; // edi
  unsigned int v10; // eax
  unsigned int v11; // edi
  _BYTE *v12; // edi
  int v13; // edi
  unsigned int v14; // ebp
  int j; // ebp
  signed int v16; // [esp+4h] [ebp-108h]
  unsigned int v17; // [esp+4h] [ebp-108h]
  int v18; // [esp+8h] [ebp-104h]
  char v19; // [esp+Ch] [ebp-100h]

  sprintf(&v19, "scr%.5d.bmp", 0);
  v4 = 0;
  for ( i = fopen(&v19, "rb"); i; i = fopen(&v19, "rb") )
  {
    fclose(i);
    sprintf(&v19, "scr%.5d.bmp", ++v4);
  }
  v6 = fopen(&v19, "wb");
  v7 = v6;
  if ( !v6 )
    return -1;
  fputc(19778, v6);
  fputc(77, v7);
  v9 = a1;
  if ( a1 & 3 )
    v9 = (a1 & 0xFFFFFFFC) + 4;
  v10 = v9;
  v11 = a2 * v9;
  v18 = v10 - a1;
  fputc(v11 + 1078, v7);
  fputc((v11 + 1078) >> 8, v7);
  fputc((v11 + 1078) >> 16, v7);
  fputc((v11 + 1078) >> 24, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(1078, v7);
  fputc(4, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(40, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(a1, v7);
  fputc(a1 >> 8, v7);
  fputc(a1 >> 16, v7);
  fputc(a1 >> 24, v7);
  fputc(a2, v7);
  fputc(a2 >> 8, v7);
  fputc(a2 >> 16, v7);
  fputc(a2 >> 24, v7);
  fputc(1, v7);
  fputc(0, v7);
  fputc(8, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(v11, v7);
  fputc(v11 >> 8, v7);
  fputc(v11 >> 16, v7);
  fputc(v11 >> 24, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(256, v7);
  fputc(1, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  fputc(0, v7);
  v12 = (_BYTE *)(a4 + 1);
  v16 = 256;
  do
  {
    fputc((unsigned __int8)(4 * v12[1]), v7);
    fputc((unsigned __int8)(4 * *v12), v7);
    fputc((unsigned __int8)(4 * *(v12 - 1)), v7);
    fputc(0, v7);
    v12 += 3;
    --v16;
  }
  while ( v16 );
  if ( a2 )
  {
    v13 = a1 * (a2 - 1) + a3;
    v17 = a2;
    do
    {
      v14 = 0;
      if ( a1 )
      {
        do
          fputc(*(unsigned __int8 *)(v13 + v14++), v7);
        while ( v14 < a1 );
      }
      for ( j = v18; j; --j )
        fputc(0, v7);
      v13 -= a1;
      --v17;
    }
    while ( v17 );
  }
  fclose(v7);
  return 0;
}

//----- (10017E30) --------------------------------------------------------
signed int __usercall sub_10017E30@<eax>(unsigned int a1@<eax>, unsigned int a2@<edx>)
{
  int v3; // [esp+0h] [ebp-14h]
  int v4; // [esp+4h] [ebp-10h]

  return sub_100177F0(a1, a2, v3, v4);
}

//----- (10017E50) --------------------------------------------------------
int sub_10017E50()
{
  int result; // eax

  sub_1000EE90();
  result = dword_1003B170;
  if ( dword_1003B170 != -1 )
  {
    result = sub_1000EF60();
    dword_1003B170 = -1;
  }
  return result;
}
// 1003B170: using guessed type int dword_1003B170;

//----- (10017E80) --------------------------------------------------------
int sub_10017E80()
{
  return sub_10017E50();
}
// 10017E80: using guessed type int sub_10017E80();

//----- (10017EA0) --------------------------------------------------------
int sub_10017EA0()
{
  char v0; // al
  int i; // esi
  char v2; // al
  unsigned int *v3; // esi
  signed int v4; // edi
  bool v5; // zf
  bool v6; // sf
  unsigned __int8 v7; // of
  unsigned __int8 v8; // di
  void *v9; // ecx
  int v10; // ebp
  int v11; // eax
  unsigned int v12; // edi
  DWORD v13; // edi
  DWORD v14; // eax
  int v16; // [esp+Ch] [ebp-108h]
  char *v17; // [esp+10h] [ebp-104h]
  char v18; // [esp+14h] [ebp-100h]
  char v19; // [esp+94h] [ebp-80h]

  v16 = 0;
  sub_10009A60(IDA__game_config, (int)"system", (int)"splash", (int)&v16);
  v17 = 0;
  if ( sub_10009A90(IDA__game_config, (int)"system", (int)"language", (int)&v17) )
  {
    v0 = *v17;
    for ( i = 0; v0; ++i )
    {
      v2 = tolower(v0);
      v17[i] = v2;
      v0 = v17[i + 1];
    }
  }
  if ( !strncmp("english", v17, 7u) || !strncmp("cht", v17, 3u) )
    sprintf(&v18, "art\\splash\\");
  else
    sprintf(&v18, "art\\%s\\splash\\", v17);
  v3 = (unsigned int *)operator new(0x310u);
  if ( v3 )
  {
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    memset(v3 + 3, 0, 0x300u);
    v3[195] = 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = 0;
  do
  {
    sprintf(&v19, "%ssplash%d.bmp", &v18, v16);
    if ( sub_10017520(v3, (int)&v19) || (sprintf(&v19, "%ssplash%d.rix", &v18, v16), sub_10017440(v3, (int)&v19)) )
    {
      v4 = 21;
    }
    else
    {
      v7 = __OFSUB__(v16 + 1, 20);
      v5 = v16 == 19;
      v6 = v16++ - 19 < 0;
      if ( !((unsigned __int8)(v6 ^ v7) | v5) )
        v16 = 0;
    }
    ++v4;
  }
  while ( v4 <= 20 );
  sub_1000EE80();
  v8 = sub_1000ED60((int)(v3 + 3));
  dword_1003B170 = sub_1000EF30(0, 0, scr_width, newBytes, v8, 12);
  v10 = sub_1000EF70(v9);
  v11 = v3[195];
  if ( v11 && v10 )
  {
    sub_1000ED10(v11, *v3, v3[1], *v3, v8);
    if ( splash_scrn_size == 2 )
    {
      sub_1001D260(v3[195], *v3, v3[1], *v3, v10, scr_width, newBytes, 0.0, 0);
    }
    else if ( splash_scrn_size == 1 || *v3 > scr_width || (v12 = v3[1], v12 > newBytes) )
    {
      sub_1001D260(v3[195], *v3, v3[1], *v3, v10, scr_width, newBytes, COERCE_FLOAT(1), 1);
    }
    else
    {
      sub_1001D1B0(
        (char *)v3[195],
        *v3,
        (char *)v12,
        *v3,
        (char *)(v10 + scr_width * ((newBytes >> 1) - (v12 >> 1)) - (*v3 >> 1) + (scr_width >> 1)),
        scr_width);
    }
  }
  sub_1000EFA0(dword_1003B170);
  sub_1000EE90();
  v13 = GetTickCount();
  if ( v13 + splash_scrn_time > v13 )
  {
    do
    {
      v14 = GetTickCount();
      if ( v14 < v13 )
        v13 = v14;
    }
    while ( v13 + splash_scrn_time > v14 );
  }
  j__free((void *)v3[195]);
  j__free(v3);
  return sub_10009AC0(IDA__game_config, (int)"system", (int)"splash", v16 + 1);
}
// 1003B170: using guessed type int dword_1003B170;
// 1003C8C4: using guessed type int IDA__game_config;
// 10064610: using guessed type int IDA__black_palette;
// 1006AC94: using guessed type int splash_scrn_size;
// 1006AC98: using guessed type int splash_scrn_time;

//----- (100181B0) --------------------------------------------------------
int sub_100181B0()
{
  return sub_10017EA0();
}
// 100181B0: using guessed type int sub_100181B0();

//----- (100181D0) --------------------------------------------------------
int F_initFunc16_resStuff5()
{
  splash_scrn_size = F_GetPrivateProfileIntA("STATIC_SCREENS", "SPLASH_SCRN_SIZE", 0);
  splash_scrn_time = 1000 * F_GetPrivateProfileIntA("OTHER_SETTINGS", "SPLASH_SCRN_TIME", 0);
  if ( splash_scrn_time > 20000 )
    splash_scrn_time = 20000;
  F_writeMem8(4446444, 0x53u, 233);
  F_writeMem32(0x43D8EDu, 1465274961, (int)sub_100181B0);
  F_writeMem24(0x44658Fu, 258161, (int)sub_10017E80);
  F_writeMem24(0x4737ECu, 73236, (int)sub_10017E80);
  F_writeMem8(4931008, 0x56u, 233);
  return F_writeMem32(0x4B3DC1u, -326937257, (int)sub_10017E30);
}
// 10017E80: using guessed type int sub_10017E80();
// 100181B0: using guessed type int sub_100181B0();
// 1006AC94: using guessed type int splash_scrn_size;
// 1006AC98: using guessed type int splash_scrn_time;

//----- (10018290) --------------------------------------------------------
int __cdecl sub_10018290(double a1)
{
  int result; // eax

  result = IDA_dbl_4FB49C;
  if ( IDA_dbl_4FB49C )
    *(double *)IDA_dbl_4FB49C = a1;
  return result;
}
// 1006AC9C: using guessed type int IDA_dbl_4FB49C;

//----- (100182A0) --------------------------------------------------------
int __cdecl sub_100182A0(int a1, int a2)
{
  return sub_1000EF30(0, 0, scr_width, newBytes, a1, a2);
}

//----- (100182D0) --------------------------------------------------------
int __stdcall sub_100182D0(int a1, int a2)
{
  int result; // eax

  result = sub_100182A0(a1, a2);
  dword_1003B174[0] = result;
  return result;
}
// 100182D0: using guessed type int __stdcall sub_100182D0(int, int);

//----- (10018300) --------------------------------------------------------
int __stdcall sub_10018300(int a1, int a2)
{
  int result; // eax

  result = sub_100182A0(a1, 18);
  dword_1003B174[1] = result;
  return result;
}
// 10018300: using guessed type int __stdcall sub_10018300(int, int);

//----- (10018330) --------------------------------------------------------
int __stdcall sub_10018330(int a1, int a2)
{
  int result; // eax

  result = sub_100182A0(a1, a2);
  dword_1003B174[2] = result;
  return result;
}
// 10018330: using guessed type int __stdcall sub_10018330(int, int);

//----- (10018360) --------------------------------------------------------
int sub_10018360()
{
  int result; // eax

  result = sub_1000EF60();
  dword_1003B174[0] = -1;
  return result;
}
// 10018360: using guessed type int sub_10018360();

//----- (10018390) --------------------------------------------------------
int sub_10018390()
{
  int v0; // ST00_4
  int result; // eax

  v0 = dword_1003B174[1];
  result = sub_1000EF60();
  dword_1003B174[1] = -1;
  return result;
}
// 10018390: using guessed type int sub_10018390();

//----- (100183C0) --------------------------------------------------------
int sub_100183C0()
{
  int v0; // ST00_4
  int result; // eax

  v0 = dword_1003B174[2];
  result = sub_1000EF60();
  dword_1003B174[2] = -1;
  return result;
}
// 100183C0: using guessed type int sub_100183C0();

//----- (100183F0) --------------------------------------------------------
__int16 __usercall sub_100183F0@<ax>(int a1@<ebx>, char *a2, char a3)
{
  char v3; // dl
  unsigned int v4; // ecx
  int v5; // eax

  LOBYTE(a1) = a3;
  BYTE1(a1) = a3;
  v3 = scr_width * newBytes;
  v4 = (unsigned int)(scr_width * newBytes) >> 2;
  v5 = a1 << 16;
  LOWORD(v5) = a1;
  memset32(a2, v5, v4);
  memset(&a2[4 * v4], a3, v3 & 3);
  return v5;
}

//----- (10018430) --------------------------------------------------------
__int16 __userpurge sub_10018430@<ax>(char *a1@<eax>, int a2@<ebx>, char a3)
{
  return sub_100183F0(a2, a1, a3);
}

//----- (10018450) --------------------------------------------------------
__int16 __fastcall sub_10018450(void *a1)
{
  int *v1; // ebp
  int v2; // ebx
  int v3; // eax
  _DWORD *v4; // eax
  _DWORD *v5; // esi
  int v6; // edx
  char *v7; // edi
  char v8; // al
  int v9; // ST1C_4
  char v10; // dl
  unsigned int v11; // ecx

  v1 = dword_1003B174;
  v2 = 0;
  do
  {
    v3 = *v1;
    if ( *v1 != -1 )
    {
      v4 = (_DWORD *)sub_1000EF10(a1);
      v5 = v4;
      v4[6] = scr_width;
      v4[7] = newBytes;
      v4[2] = v2;
      v4[3] = v2;
      v4[4] = scr_width - 1;
      v6 = v4[11];
      v4[5] = newBytes - 1;
      v7 = (char *)sub_1000F190(v6, scr_width * newBytes);
      v8 = *((_BYTE *)v5 + 32);
      v9 = v2;
      LOBYTE(v2) = v8;
      v5[11] = v7;
      BYTE1(v2) = v8;
      v10 = scr_width * newBytes;
      v11 = (unsigned int)(scr_width * newBytes) >> 2;
      v3 = v2 << 16;
      LOWORD(v3) = v2;
      v2 = v9;
      memset32(v7, v3, v11);
      memset(&v7[4 * v11], v3, v10 & 3);
      a1 = 0;
    }
    ++v1;
  }
  while ( (signed int)v1 < (signed int)&dword_1003B180 );
  return v3;
}
// 1003B180: using guessed type int dword_1003B180;

//----- (100185A0) --------------------------------------------------------
signed int sub_100185A0()
{
  return 480;
}

//----- (100185B0) --------------------------------------------------------
signed int sub_100185B0()
{
  return 640;
}

//----- (100185C0) --------------------------------------------------------
void __thiscall sub_100185C0(void *this)
{
  int v1; // ST00_4

  if ( *(_DWORD *)IDA__display_win != -1 )
  {
    v1 = *(_DWORD *)IDA__display_win;
    sub_1000EF10(this);
  }
}
// 100645EC: using guessed type int IDA__display_win;
// 1006AD00: using guessed type int IDA__scr_size;

//----- (10018600) --------------------------------------------------------
int F_initFunc13_fadeTimeMod()
{
  int v0; // eax
  int result; // eax
  double v2; // st7

  F_writeMem24(0x45812Eu, 319290, (int)sub_100185A0);
  F_writeMem24(0x458146u, 319258, (int)sub_100185B0);
  F_writeMem24(0x458481u, 318431, (int)sub_100185B0);
  F_writeMem24(0x45849Du, 318403, (int)sub_100185B0);
  F_writeMem24(0x4584B0u, 318392, (int)sub_100185A0);
  F_writeMem24(0x4584CBu, 318365, (int)sub_100185A0);
  F_writeMem24(0x458581u, 318175, (int)sub_100185B0);
  F_writeMem24(0x45859Du, 318147, (int)sub_100185B0);
  F_writeMem24(0x4585B0u, 318136, (int)sub_100185A0);
  F_writeMem24(0x4585CBu, 318109, (int)sub_100185A0);
  F_writeMem24(0x458675u, 317931, (int)sub_100185B0);
  F_writeMem24(0x458691u, 317903, (int)sub_100185B0);
  F_writeMem24(0x4586A4u, 317892, (int)sub_100185A0);
  F_writeMem24(0x4586BFu, 317865, (int)sub_100185A0);
  F_writeMem24(0x458EA0u, 315848, (int)sub_100185A0);
  F_writeMem24(0x458EB7u, 315817, (int)sub_100185B0);
  F_writeMem24(0x458ED3u, 315797, (int)sub_100185A0);
  F_writeMem24(0x458EEFu, 315761, (int)sub_100185B0);
  F_writeMem8(4532073, 0xBEu, 232);
  v0 = F_ptrCorrection_(4504056);
  F_writeMem32(0x45276Au, v0, (int)sub_100185C0);
  F_writeMem24(0x423AC7u, 650589, (int)dword_10018580);
  F_writeMem24(0x4386F4u, 565552, (int)dword_10018580);
  F_writeMem24(0x481B5Au, 265418, (int)dword_10018580);
  F_writeMem24(0x41C1D6u, 681550, (int)dword_10018580);
  F_writeMem24(0x41AA50u, 687572, (int)dword_10018580);
  F_writeMem24(0x4824DEu, 262982, (int)dword_10018580);
  F_writeMem24(0x4959C7u, 183901, (int)dword_10018580);
  F_writeMem24(0x42D047u, 612317, (int)dword_10018580);
  F_writeMem24(0x48729Du, 243079, (int)dword_10018580);
  F_writeMem24(0x46EC63u, 342977, (int)sub_100182D0);
  F_writeMem24(0x46ED0Cu, 343364, (int)sub_10018360);
  F_writeMem24(0x46EDEBu, 343141, (int)sub_10018360);
  F_writeMem24(0x472BA6u, 326782, (int)sub_10018300);
  F_writeMem24(0x472C31u, 327199, (int)sub_10018390);
  F_writeMem24(0x472C4Cu, 327172, (int)sub_10018390);
  F_writeMem24(0x472DDEu, 326214, (int)sub_10018330);
  F_writeMem24(0x472E27u, 326697, (int)sub_100183C0);
  F_writeMem24(0x46EC8Cu, 326060, (int)sub_10018430);
  result = F_ptrCorrection_(5223580);
  IDA_dbl_4FB49C = result;
  if ( *(_DWORD *)result || *(_DWORD *)(result + 4) != 1078853632 )
  {
    v2 = 0.0;
LABEL_4:
    *(double *)result = v2;
    return result;
  }
  v2 = (double)F_GetPrivateProfileIntA("OTHER_SETTINGS", "FADE_TIME_MODIFIER", 60);
  result = IDA_dbl_4FB49C;
  if ( IDA_dbl_4FB49C )
    goto LABEL_4;
  return result;
}
// 100182D0: using guessed type int __stdcall sub_100182D0(int, int);
// 10018300: using guessed type int __stdcall sub_10018300(int, int);
// 10018330: using guessed type int __stdcall sub_10018330(int, int);
// 10018360: using guessed type int sub_10018360();
// 10018390: using guessed type int sub_10018390();
// 100183C0: using guessed type int sub_100183C0();
// 10018580: using guessed type int dword_10018580[8];
// 1006AC9C: using guessed type int IDA_dbl_4FB49C;

//----- (10018980) --------------------------------------------------------
int __cdecl sub_10018980(unsigned int a1, unsigned int a2, int a3, int a4)
{
  int v4; // ST28_4
  int v6; // [esp+8h] [ebp-8h]
  int v7; // [esp+Ch] [ebp-4h]

  v4 = *(_DWORD *)IDA__display_win;
  sub_1000EFC0();
  sub_100139E0();
  v7 = 0;
  v6 = 0;
  sub_1000F920(a1, a2, &v7, &v6);
  return sub_1000EF30(v7, v6, a1, a2, a3, a4);
}
// 100645EC: using guessed type int IDA__display_win;

//----- (100189E0) --------------------------------------------------------
int __userpurge sub_100189E0@<eax>(unsigned int a1@<ecx>, unsigned int a2@<ebx>, int a3, int a4)
{
  return sub_10018980(a2, a1, a3, a4);
}

//----- (10018A00) --------------------------------------------------------
void __spoils<ecx> sub_10018A00()
{
  int v0; // ST00_4

  sub_1000EF60();
  v0 = *(_DWORD *)IDA__display_win;
  sub_1000EFA0(IDA__display_win);
  sub_1000EFD0();
  sub_10013A20();
}
// 100645EC: using guessed type int IDA__display_win;

//----- (10018A40) --------------------------------------------------------
int __cdecl sub_10018A40(LONG *a1, LONG *a2)
{
  int v2; // esi
  LONG v3; // eax
  LONG v4; // ecx
  LONG v5; // edx
  LONG v6; // ecx
  int result; // eax
  struct tagPOINT v8; // [esp+8h] [ebp-20h]
  struct tagPOINT Point; // [esp+10h] [ebp-18h]
  struct tagRECT Rect; // [esp+18h] [ebp-10h]

  v2 = sub_1000EF10(*(void **)IDA__world_win);
  if ( windowed )
  {
    Point.y = 0;
    Point.x = 0;
    v8.y = 0;
    v8.x = 0;
    ClientToScreen(hWnd, &Point);
    GetCursorPos(&v8);
    v8.x = v8.x - Point.x - (*(_DWORD *)(v2 + 8) << scale_2x);
    v8.y = v8.y - Point.y - (*(_DWORD *)(v2 + 12) << scale_2x);
    GetClientRect(hWnd, &Rect);
    v3 = v8.x;
    v4 = Rect.left;
    if ( v8.x < Rect.left || (v4 = Rect.right, v8.x > Rect.right) )
      v3 = v4;
    v5 = v8.y;
    v6 = Rect.top;
    if ( v8.y < Rect.top || (v6 = Rect.bottom, v8.y > Rect.bottom) )
      v5 = v6;
    *a1 = v3 >> scale_2x;
    result = (int)a2;
    *a2 = v5 >> scale_2x;
  }
  else
  {
    sub_1000EEC0((int)a1, (int)a2);
    *a1 -= *(_DWORD *)(v2 + 8);
    result = *a2 - *(_DWORD *)(v2 + 12);
    *a2 = result;
  }
  return result;
}
// 100645F0: using guessed type int IDA__world_win;
// 1006AD14: using guessed type int scale_2x;
// 1006AD55: using guessed type char windowed;

//----- (10018B50) --------------------------------------------------------
int __usercall sub_10018B50@<eax>(LONG *a1@<eax>, LONG *a2@<edx>)
{
  return sub_10018A40(a1, a2);
}

//----- (10018B70) --------------------------------------------------------
int F_initFunc21()
{
  F_writeMem24(0x4AD574u, 86704, (int)sub_100189E0);
  F_writeMem24(0x4AE3F4u, 82992, (int)sub_100189E0);
  F_writeMem24(0x4AE9E6u, 82026, (int)sub_10018A00);
  return F_writeMem24(0x4AAD0Bu, 43657, (int)sub_10018B50);
}

//----- (10018C50) --------------------------------------------------------
char __thiscall sub_10018C50(_DWORD *this)
{
  _DWORD *v1; // esi
  unsigned int v2; // edi

  v1 = this;
  v2 = 0;
  if ( this[4] )
  {
    do
    {
      free(*(void **)(v1[5] + 4 * v2));
      *(_DWORD *)(v1[5] + 4 * v2++) = 0;
    }
    while ( v2 < v1[4] );
  }
  if ( v1[5] )
    free((void *)v1[5]);
  v1[5] = 0;
  v1[4] = 0;
  return 1;
}

//----- (10018CF0) --------------------------------------------------------
bool __thiscall sub_10018CF0(_DWORD *this, int a2, int a3, int a4, int a5)
{
  return a2 == this[2] && a3 == this[3] && *this == a4 && this[1] == a5;
}

//----- (10018D70) --------------------------------------------------------
char __thiscall sub_10018D70(_DWORD *this, char a2)
{
  unsigned int v3; // eax
  unsigned int v4; // ebp
  int v5; // eax
  _DWORD *v6; // edx
  _DWORD *v7; // eax
  bool v8; // cf
  bool v9; // zf
  unsigned int v10; // eax
  unsigned int v11; // edx
  int v12; // eax
  int v13; // edx
  unsigned int v14; // [esp+0h] [ebp-4h]

  if ( !this[5] )
    return 0;
  v3 = this[4];
  v14 = 0;
  if ( v3 )
  {
    do
    {
      v4 = 0;
      if ( v3 != 1 )
      {
        do
        {
          v5 = this[5];
          v6 = *(_DWORD **)(v5 + 4 * v4 + 4);
          v7 = *(_DWORD **)(v5 + 4 * v4);
          if ( a2 )
          {
            v8 = *v7 < *v6;
            v9 = *v7 == *v6;
            if ( *v7 == *v6 )
            {
              v10 = v7[1];
              v8 = v10 < v6[1];
              v9 = v10 == v6[1];
            }
          }
          else
          {
            v8 = *v6 < *v7;
            v9 = *v6 == *v7;
            if ( *v6 == *v7 )
            {
              v11 = v6[1];
              v8 = v11 < v7[1];
              v9 = v11 == v7[1];
            }
          }
          if ( v8 || v9 )
          {
            v12 = this[5];
            v13 = *(_DWORD *)(v12 + 4 * v4 + 4);
            *(_DWORD *)(v12 + 4 * v4 + 4) = *(_DWORD *)(v12 + 4 * v4);
            *(_DWORD *)(this[5] + 4 * v4) = v13;
          }
          ++v4;
        }
        while ( v4 < this[4] - 1 );
      }
      v3 = this[4];
      ++v14;
    }
    while ( v14 < v3 );
  }
  return 1;
}

//----- (10018EA0) --------------------------------------------------------
char __thiscall sub_10018EA0(unsigned int *this, char a2)
{
  unsigned int v3; // eax
  unsigned int v4; // ebp
  unsigned int v5; // edx
  unsigned int v6; // eax
  unsigned int v7; // esi
  unsigned int v8; // edi
  bool v9; // cf
  unsigned int v10; // eax
  int v11; // esi

  if ( !this[1] )
    return 0;
  v3 = *this;
  v4 = 0;
  if ( *this )
  {
    do
    {
      v5 = 0;
      if ( v3 != 1 )
      {
        do
        {
          v6 = this[1];
          v7 = *(_DWORD *)(v6 + 4 * v5 + 4);
          v8 = *(_DWORD *)(v6 + 4 * v5);
          if ( a2 )
            v9 = v8 < v7;
          else
            v9 = v7 < v8;
          if ( v9 )
          {
            v10 = this[1];
            v11 = *(_DWORD *)(v10 + 4 * v5 + 4);
            *(_DWORD *)(v10 + 4 * v5 + 4) = *(_DWORD *)(v10 + 4 * v5);
            *(_DWORD *)(this[1] + 4 * v5) = v11;
          }
          ++v5;
        }
        while ( v5 < *this - 1 );
      }
      v3 = *this;
      ++v4;
    }
    while ( v4 < *this );
  }
  return 1;
}

//----- (10018F20) --------------------------------------------------------
char __thiscall sub_10018F20(DWORD *this, DWORD a2, DWORD a3, DWORD a4, DWORD a5, char a6)
{
  DWORD *v6; // esi
  DWORD v7; // eax
  char v8; // bl
  DWORD v9; // ecx
  DWORD v10; // edx
  _DWORD *v11; // eax
  _DWORD *v12; // edi
  _DWORD *v13; // eax
  DWORD v14; // ecx
  DWORD iModeNum; // [esp+4h] [ebp-A0h]
  DEVMODEA DevMode; // [esp+8h] [ebp-9Ch]

  v6 = this;
  *this = a4;
  this[3] = a3;
  v7 = this[5];
  this[1] = a5;
  this[2] = a2;
  if ( v7 )
    sub_10018C50(this);
  memset(&DevMode, 0, sizeof(DevMode));
  DevMode.dmSize = 156;
  for ( iModeNum = 0; EnumDisplaySettingsA(0, iModeNum, &DevMode); ++iModeNum )
  {
    if ( DevMode.dmPelsWidth >= *v6 && DevMode.dmPelsHeight >= v6[1] )
    {
      v8 = 0;
      if ( !v6[4] )
        goto LABEL_22;
      v9 = v6[5];
      v10 = v6[4];
      do
      {
        if ( DevMode.dmPelsWidth == **(_DWORD **)v9 && DevMode.dmPelsHeight == *(_DWORD *)(*(_DWORD *)v9 + 4) )
          v8 = 1;
        v9 += 4;
        --v10;
      }
      while ( v10 );
      if ( !v8 )
      {
LABEL_22:
        DevMode.dmBitsPerPel = a2;
        DevMode.dmDisplayFrequency = a3;
        EnumDisplaySettingsA(0, iModeNum, &DevMode);
        if ( !ChangeDisplaySettingsA(&DevMode, 2u) )
        {
          v11 = malloc(8u);
          v12 = v11;
          *v11 = DevMode.dmPelsWidth;
          v11[1] = DevMode.dmPelsHeight;
          v13 = realloc((void *)v6[5], 4 * v6[4] + 4);
          if ( v13 )
          {
            v14 = v6[4];
            v6[5] = (DWORD)v13;
            v13[v14] = v12;
            ++v6[4];
          }
        }
      }
    }
  }
  if ( !v6[4] )
    return 0;
  sub_10018D70(v6, a6);
  return 1;
}

//----- (100190B0) --------------------------------------------------------
char __thiscall sub_100190B0(void **this, int a2, int a3, DWORD a4)
{
  void **v4; // esi
  DWORD v5; // ebx
  _DWORD *v6; // eax
  void *v7; // ecx
  char v8; // dl
  _DWORD *v9; // eax
  char *v10; // ecx
  DWORD v11; // edi
  _DWORD *v12; // eax
  void *v13; // edx
  DEVMODEA DevMode; // [esp+10h] [ebp-9Ch]

  v4 = this;
  v5 = 0;
  if ( this[1] )
  {
    free(this[1]);
    v4[1] = 0;
    *v4 = 0;
  }
  v6 = realloc(v4[1], 4 * (_DWORD)*v4 + 4);
  if ( v6 )
  {
    v7 = *v4;
    v4[1] = v6;
    v6[(_DWORD)v7] = 0;
    *v4 = (char *)*v4 + 1;
  }
  memset(&DevMode, 0, sizeof(DevMode));
  DevMode.dmSize = 156;
  if ( EnumDisplaySettingsA(0, 0, &DevMode) )
  {
    do
    {
      if ( DevMode.dmPelsWidth == a2 && DevMode.dmPelsHeight == a3 )
      {
        v8 = 0;
        if ( !*v4 )
          goto LABEL_23;
        v9 = v4[1];
        v10 = (char *)*v4;
        do
        {
          if ( DevMode.dmDisplayFrequency == *v9 )
            v8 = 1;
          ++v9;
          --v10;
        }
        while ( v10 );
        if ( !v8 )
        {
LABEL_23:
          DevMode.dmBitsPerPel = a4;
          EnumDisplaySettingsA(0, v5, &DevMode);
          if ( !ChangeDisplaySettingsA(&DevMode, 2u) )
          {
            v11 = DevMode.dmDisplayFrequency;
            v12 = realloc(v4[1], 4 * (_DWORD)*v4 + 4);
            if ( v12 )
            {
              v13 = *v4;
              v4[1] = v12;
              v12[(_DWORD)v13] = v11;
              *v4 = (char *)*v4 + 1;
            }
          }
        }
      }
      ++v5;
    }
    while ( EnumDisplaySettingsA(0, v5, &DevMode) );
  }
  if ( !*v4 )
    return 0;
  sub_10018EA0((unsigned int *)v4, 0);
  return 1;
}

//----- (10019200) --------------------------------------------------------
UINT __cdecl sub_10019200(int a1)
{
  UINT result; // eax

  *(_DWORD *)a1 = F_GetPrivateProfileIntA("MAIN", "SCR_WIDTH", 640);
  *(_DWORD *)(a1 + 4) = F_GetPrivateProfileIntA("MAIN", "SCR_HEIGHT", 480);
  *(_DWORD *)(a1 + 8) = F_GetPrivateProfileIntA("MAIN", "COLOUR_BITS", 8);
  *(_DWORD *)(a1 + 12) = F_GetPrivateProfileIntA("MAIN", "REFRESH_RATE", 0);
  *(_DWORD *)(a1 + 16) = F_GetPrivateProfileIntA("MAIN", "SCALE_2X", 0);
  scale_2x = scale_2x != 0;
  *(_BYTE *)(a1 + 20) = F_GetPrivateProfileIntA("MAIN", "WINDOWED", 0) != 0;
  *(_BYTE *)(a1 + 21) = F_GetPrivateProfileIntA("HI_RES_PANEL", "DISPLAY_LIST_DESCENDING", 0) != 0;
  *(_DWORD *)(a1 + 24) = F_GetPrivateProfileIntA("IFACE", "IFACE_BAR_SIDE_ART", 0);
  *(_DWORD *)(a1 + 28) = F_GetPrivateProfileIntA("MOVIES", "MOVIE_SIZE", 0);
  *(_DWORD *)(a1 + 32) = F_GetPrivateProfileIntA("STATIC_SCREENS", "SPLASH_SCRN_SIZE", 0);
  *(_DWORD *)(a1 + 36) = F_GetPrivateProfileIntA("STATIC_SCREENS", "HELP_SCRN_SIZE", 0);
  *(_DWORD *)(a1 + 40) = F_GetPrivateProfileIntA("STATIC_SCREENS", "DEATH_SCRN_SIZE", 0);
  *(_DWORD *)(a1 + 44) = F_GetPrivateProfileIntA("STATIC_SCREENS", "END_SLIDE_SIZE", 0);
  *(_DWORD *)(a1 + 48) = F_GetPrivateProfileIntA("MAINMENU", "MAIN_MENU_SIZE", 0);
  *(_BYTE *)(a1 + 52) = F_GetPrivateProfileIntA("MAPS", "IGNORE_PLAYER_SCROLL_LIMITS", 0) != 0;
  *(_BYTE *)(a1 + 53) = F_GetPrivateProfileIntA("MAPS", "FOG_OF_WAR", 0) != 0;
  *(_DWORD *)(a1 + 56) = F_GetPrivateProfileIntA("MAPS", "FOG_LIGHT_LEVEL", 0);
  result = F_GetPrivateProfileIntA("MAPS", "NumPathNodes", 0);
  *(_DWORD *)(a1 + 60) = result;
  return result;
}
// 1006AD14: using guessed type int scale_2x;

//----- (100193B0) --------------------------------------------------------
int __cdecl sub_100193B0(int a1)
{
  int result; // eax

  result = sub_1000F0B0(a1, 0);
  if ( result )
    result = sub_10008E10(*(int **)(result + 64), *(_DWORD *)(result + 68));
  return result;
}

//----- (100193D0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100193D0(int a1@<eax>)
{
  sub_100193B0(a1);
}

//----- (100193E0) --------------------------------------------------------
int __cdecl sub_100193E0(int a1)
{
  int result; // eax

  result = sub_1000F0B0(a1, 0);
  if ( result )
    result = sub_10008E10(*(int **)(result + 64), 0);
  return result;
}

//----- (10019400) --------------------------------------------------------
void __usercall __spoils<ecx> sub_10019400(int a1@<eax>)
{
  sub_100193E0(a1);
}

//----- (10019410) --------------------------------------------------------
int __cdecl sub_10019410(int a1)
{
  int result; // eax
  void *v2; // ecx
  int v3; // esi

  result = sub_1000F0B0(a1, 0);
  v3 = result;
  if ( result )
  {
    result = *(_DWORD *)(result + 68);
    if ( !result )
    {
      result = sub_1000F110(v2);
      *(_DWORD *)(v3 + 68) = -1;
    }
  }
  return result;
}

//----- (10019450) --------------------------------------------------------
int __cdecl sub_10019450(int a1)
{
  int result; // eax
  void *v2; // ecx
  int v3; // esi

  result = sub_1000F0B0(a1, 0);
  v3 = result;
  if ( result )
  {
    sub_1000F110(v2);
    result = *(_DWORD *)(v3 + 68);
    if ( result == -1 )
      *(_DWORD *)(v3 + 68) = 0;
  }
  return result;
}

//----- (10019490) --------------------------------------------------------
int __cdecl sub_10019490(int a1)
{
  int result; // eax

  result = sub_1000F0B0(a1, 0);
  if ( result )
  {
    if ( *(_DWORD *)(result + 68) == -1 )
      *(_DWORD *)(result + 68) = 0;
  }
  return result;
}

//----- (100194C0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100194C0(int a1@<eax>)
{
  sub_10019410(a1);
}

//----- (100194D0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100194D0(int a1@<eax>)
{
  sub_10019450(a1);
}

//----- (100194E0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_100194E0(int a1@<eax>)
{
  sub_10019490(a1);
}

//----- (10019510) --------------------------------------------------------
int __cdecl sub_10019510(int a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v7; // eax
  int v8; // esi
  int v9; // eax

  v7 = sub_1000F000(a1, a2, a3, a4, a5, -1, -1, -1, -1, 0, 0, 0, 0);
  v8 = v7;
  v9 = sub_1000F0B0(v7, 0);
  *(_DWORD *)(v9 + 68) = a6;
  *(_DWORD *)(v9 + 64) = a7;
  return sub_1000F040(v8, (int)sub_100193D0, (int)sub_10019400, 0, 0);
}

//----- (10019570) --------------------------------------------------------
int __cdecl sub_10019570(int a1, int a2, int *a3)
{
  void *v3; // ecx
  void *v4; // ecx
  unsigned int v5; // ST6C_4
  const char *v6; // ebx
  unsigned int v7; // eax
  int v8; // ebp
  int v9; // ST64_4
  void *v10; // ecx
  unsigned int v11; // ebp
  char *v12; // ST68_4
  int v13; // ST64_4
  const char *v14; // ST68_4
  int v15; // ST64_4
  const char *v16; // eax
  const char *v17; // ST68_4
  unsigned int v18; // eax
  const char *v19; // eax
  const char *v20; // ST68_4
  unsigned int v21; // eax
  const char *v22; // eax
  char *v23; // ST68_4
  int v24; // eax
  const char *v25; // ST68_4
  unsigned int v26; // eax
  int v27; // ST64_4
  int v28; // ST6C_4
  const char *v29; // eax
  const char *v30; // ST68_4
  unsigned int v31; // eax
  int v32; // ST64_4
  int v33; // ST6C_4
  const char *v34; // eax
  const char *v35; // ST68_4
  const char *v36; // eax
  void *v37; // ecx
  const char *v38; // ST68_4
  int v39; // ebp
  const char *v40; // eax
  void *v41; // ecx
  unsigned int v42; // ebp
  const char *v43; // ST68_4
  int v44; // eax
  void *v45; // ecx
  int v46; // ebp
  const char *v47; // ST68_4
  int v48; // ST64_4
  const char *v49; // eax
  const char *v50; // ST68_4
  int v51; // ST64_4
  const char *v52; // eax
  void *v53; // ecx
  int v54; // ST6C_4
  const char *v55; // ebp
  int v56; // ST64_4
  const char *v57; // eax
  const char *v58; // ebp
  int v59; // ST64_4
  const char *v60; // eax
  const char *v61; // ST68_4
  int v62; // eax
  int v63; // ebp
  int v64; // ST64_4
  const char *v65; // eax
  void *v66; // ecx
  int v67; // ebp
  const char *v68; // ST68_4
  int v69; // ST64_4
  const char *v70; // eax
  const char *v71; // ST68_4
  int v72; // ST64_4
  const char *v73; // eax
  void *v74; // ecx
  int v75; // ST6C_4
  const char *v76; // ebp
  int v77; // ST64_4
  const char *v78; // eax
  const char *v79; // ST68_4
  int v80; // eax
  int v81; // ebp
  int v82; // ST64_4
  const char *v83; // eax
  void *v84; // ecx
  int v85; // ST6C_4
  const char *v86; // ebp
  int v87; // ST64_4
  const char *v88; // eax
  void *v89; // ecx
  int v90; // ST6C_4
  const char *v91; // ebp
  int v92; // ST64_4
  const char *v93; // eax
  const char *v94; // ST68_4
  unsigned int v95; // eax
  int v96; // ST64_4
  int v97; // ebp
  const char *v98; // eax
  const char *v99; // ST68_4
  int v100; // eax
  int v101; // ebp
  int v102; // ST64_4
  const char *v103; // eax
  void *v104; // ecx
  unsigned int v105; // ST6C_4
  const char *v106; // ST68_4
  unsigned int v107; // eax
  int v108; // ebp
  int v109; // ST64_4
  const char *v110; // eax
  const char *v111; // ST68_4
  int v112; // ebp
  int v113; // ST64_4
  const char *v114; // eax
  const char *v115; // ST68_4
  int v116; // ST64_4
  const char *v117; // eax
  int v119; // [esp+10h] [ebp-18h]
  int v120; // [esp+10h] [ebp-18h]
  int v121; // [esp+10h] [ebp-18h]
  int v122; // [esp+18h] [ebp-10h]
  int v123; // [esp+18h] [ebp-10h]
  int v124; // [esp+18h] [ebp-10h]
  unsigned int v125; // [esp+20h] [ebp-8h]

  sub_1000EF10(v3);
  sub_1000E5F0();
  sub_1000E5E0();
  v5 = sub_1000E670(v4);
  v6 = sub_1000E120(a3, 0x32u, 2);
  v7 = sub_1000E690();
  v8 = 180 - (v7 >> 1);
  v9 = v7;
  sub_1000EA90(a1, (int)v6, v7, 180 - (v7 >> 1), 22 - (v5 >> 1), 0x3Du);
  sub_10019510(a1, v8, 22 - (v5 >> 1), v9, v5, (int)dword_1006ACA0, a2);
  sub_1000E5E0();
  v11 = sub_1000E670(v10);
  v12 = dword_1006ACA4;
  v13 = sub_1000E690();
  sub_1000EA90(a1, (int)v12, v13, 40, 60, 0x3Du);
  sub_10019510(a1, 40, 60, v13, v11, (int)dword_1006ACA8, a2);
  v14 = sub_1000E120(a3, 0xCCu, 2);
  v15 = sub_1000E690();
  sub_1000EA90(a1, (int)v14, v15, 62, 136, 0x3Du);
  v16 = sub_1000E120(a3, 0x1F5u, 2);
  sub_10019510(a1, 62, 136, v15, v11, (int)v16, a2);
  v17 = sub_1000E120(a3, 0x66u, 2);
  v18 = sub_1000E690();
  v119 = v18;
  v122 = 286 - (v18 >> 1);
  v125 = v11 >> 1;
  sub_1000EA90(a1, (int)v17, v18, 286 - (v18 >> 1), 189 - (v11 >> 1), 0x3Du);
  v19 = (const char *)dword_1006ACAC;
  if ( !dword_1006ACAC )
    v19 = sub_1000E120(a3, 0x1F6u, 2);
  sub_10019510(a1, v122, 189 - (v11 >> 1), v119, v11, (int)v19, a2);
  v20 = sub_1000E120(a3, 0x6Fu, 2);
  v21 = sub_1000E690();
  v120 = v21;
  v123 = 286 - (v21 >> 1);
  sub_1000EA90(a1, (int)v20, v21, v123, 288 - v125, 0x3Du);
  v22 = (const char *)dword_1006ACAC;
  if ( !dword_1006ACAC )
    v22 = sub_1000E120(a3, 0x1F7u, 2);
  sub_10019510(a1, v123, 288 - v125, v120, v11, (int)v22, a2);
  v23 = (char *)operator new(8u);
  sprintf(v23, "Hz");
  v24 = sub_1000E690();
  sub_1000EA90(a1, (int)v23, v24, 313, 313, 0x3Du);
  j__free(v23);
  v25 = sub_1000E120(a3, 0x34u, 2);
  v26 = sub_1000E690();
  v27 = v26;
  v28 = 137 - (v26 >> 1);
  sub_1000EA90(a1, (int)v25, v26, v28, 388, 0x3Du);
  v29 = sub_1000E120(a3, 0x1F8u, 2);
  sub_10019510(a1, v28, 388, v27, v11, (int)v29, a2);
  v30 = sub_1000E120(a3, 0x35u, 2);
  v31 = sub_1000E690();
  v32 = v31;
  v33 = 253 - (v31 >> 1);
  sub_1000EA90(a1, (int)v30, v31, 253 - (v31 >> 1), 388, 0x3Du);
  v34 = sub_1000E120(a3, 0x1F9u, 2);
  sub_10019510(a1, v33, 388, v32, v11, (int)v34, a2);
  v35 = sub_1000E120(a3, 0x6Cu, 2);
  v121 = sub_1000E690();
  sub_1000EA90(a1, (int)v35, v121, 234, 130, 0x3Du);
  v36 = (const char *)dword_1006ACAC;
  if ( !dword_1006ACAC )
    v36 = sub_1000E120(a3, 0x1FAu, 2);
  sub_10019510(a1, 234, 130, v121, v11, (int)v36, a2);
  sub_1000E5E0();
  v124 = sub_1000E670(v37);
  v38 = sub_1000E120(a3, 0x6Eu, 2);
  v39 = sub_1000E690();
  sub_1000EA90(a1, (int)v38, v39, 66, 90, 0x3Du);
  v40 = (const char *)dword_1006ACAC;
  if ( !dword_1006ACAC )
    v40 = sub_1000E120(a3, 0x1FEu, 2);
  sub_10019510(a1, 66, 90, v39, v124, (int)v40, a2);
  sub_1000E5E0();
  v42 = sub_1000E670(v41);
  v43 = sub_1000E120(a3, 0x6Bu, 2);
  v44 = sub_1000E690();
  sub_1000EA90(a1, (int)v43, v44, 96, 360 - (v42 >> 1), 0x3Du);
  sub_1000E5E0();
  v46 = sub_1000E670(v45);
  v47 = sub_1000E120(a3, 0x100u, 2);
  v48 = sub_1000E690();
  sub_1000EA90(a1, (int)v47, v48, 400, 62, 0x3Du);
  v49 = sub_1000E120(a3, 0x1FFu, 2);
  sub_10019510(a1, 400, 62, v48, v46, (int)v49, a2);
  v50 = sub_1000E120(a3, 0x101u, 2);
  v51 = sub_1000E690();
  sub_1000EA90(a1, (int)v50, v51, 400, 84, 0x3Du);
  v52 = sub_1000E120(a3, 0x200u, 2);
  sub_10019510(a1, 400, 84, v51, v46, (int)v52, a2);
  sub_1000E5E0();
  v54 = sub_1000E670(v53);
  v55 = sub_1000E120(a3, 0xCBu, 2);
  v56 = sub_1000E690();
  sub_1000EA90(a1, (int)v55, v56, 400, 105, 0x3Du);
  v57 = sub_1000E120(a3, 0x201u, 2);
  sub_10019510(a1, 400, 105, v56, v54, (int)v57, a2);
  v58 = sub_1000E120(a3, 0x102u, 2);
  v59 = sub_1000E690();
  sub_1000EA90(a1, (int)v58, v59, 430, 105, 0x3Du);
  v60 = sub_1000E120(a3, 0x202u, 2);
  sub_10019510(a1, 430, 105, v59, v54, (int)v60, a2);
  v61 = sub_1000E120(a3, 0x103u, 2);
  v62 = sub_1000E690();
  v63 = 600 - v62;
  v64 = v62;
  sub_1000EA90(a1, (int)v61, v62, 600 - v62, 105, 0x3Du);
  v65 = sub_1000E120(a3, 0x202u, 2);
  sub_10019510(a1, v63, 105, v64, v54, (int)v65, a2);
  sub_1000E5E0();
  v67 = sub_1000E670(v66);
  v68 = sub_1000E120(a3, 0xFAu, 2);
  v69 = sub_1000E690();
  sub_1000EA90(a1, (int)v68, v69, 400, 145, 0x3Du);
  v70 = sub_1000E120(a3, 0x203u, 2);
  sub_10019510(a1, 400, 145, v69, v67, (int)v70, a2);
  v71 = sub_1000E120(a3, 0xFDu, 2);
  v72 = sub_1000E690();
  sub_1000EA90(a1, (int)v71, v72, 400, 174, 0x3Du);
  v73 = sub_1000E120(a3, 0x204u, 2);
  sub_10019510(a1, 400, 174, v72, v67, (int)v73, a2);
  sub_1000E5E0();
  v75 = sub_1000E670(v74);
  v76 = sub_1000E120(a3, 0xFEu, 2);
  v77 = sub_1000E690();
  sub_1000EA90(a1, (int)v76, v77, 400, 195, 0x3Du);
  v78 = sub_1000E120(a3, 0x205u, 2);
  sub_10019510(a1, 400, 195, v77, v75, (int)v78, a2);
  v79 = sub_1000E120(a3, 0xFFu, 2);
  v80 = sub_1000E690();
  v81 = 600 - v80;
  v82 = v80;
  sub_1000EA90(a1, (int)v79, v80, 600 - v80, 195, 0x3Du);
  v83 = sub_1000E120(a3, 0x206u, 2);
  sub_10019510(a1, v81, 195, v82, v75, (int)v83, a2);
  sub_1000E5E0();
  v85 = sub_1000E670(v84);
  v86 = sub_1000E120(a3, 0x96u, 2);
  v87 = sub_1000E690();
  sub_1000EA90(a1, (int)v86, v87, 400, 232, 0x3Du);
  v88 = sub_1000E120(a3, 0x207u, 2);
  sub_10019510(a1, 400, 232, v87, v85, (int)v88, a2);
  sub_1000E5E0();
  v90 = sub_1000E670(v89);
  v91 = sub_1000E120(a3, 0x97u, 2);
  v92 = sub_1000E690();
  sub_1000EA90(a1, (int)v91, v92, 500, 252, 0x3Du);
  v93 = sub_1000E120(a3, 0x208u, 2);
  sub_10019510(a1, 500, 252, v92, v90, (int)v93, a2);
  v94 = sub_1000E120(a3, 0x98u, 2);
  v95 = sub_1000E690();
  v96 = v95;
  v97 = 550 - (v95 >> 1);
  sub_1000EA90(a1, (int)v94, v95, 550 - (v95 >> 1), 252, 0x3Du);
  v98 = sub_1000E120(a3, 0x209u, 2);
  sub_10019510(a1, v97, 252, v96, v90, (int)v98, a2);
  v99 = sub_1000E120(a3, 0x99u, 2);
  v100 = sub_1000E690();
  v101 = 600 - v100;
  v102 = v100;
  sub_1000EA90(a1, (int)v99, v100, 600 - v100, 252, 0x3Du);
  v103 = sub_1000E120(a3, 0x20Au, 2);
  sub_10019510(a1, v101, 252, v102, v90, (int)v103, a2);
  sub_1000E5E0();
  v105 = sub_1000E670(v104);
  v106 = sub_1000E120(a3, 0x6Au, 2);
  v107 = sub_1000E690();
  v108 = 501 - (v107 >> 1);
  v109 = v107;
  sub_1000EA90(a1, (int)v106, v107, 501 - (v107 >> 1), 290, 0x3Du);
  v110 = sub_1000E120(a3, 0x20Bu, 2);
  sub_10019510(a1, v108, 290, v109, v105, (int)v110, a2);
  v111 = sub_1000E120(a3, 0x36u, 2);
  v112 = 440 - (v105 >> 1);
  v113 = sub_1000E690();
  sub_1000EA90(a1, (int)v111, v113, 542, 440 - (v105 >> 1), 0x3Du);
  v114 = sub_1000E120(a3, 0x20Cu, 2);
  sub_10019510(a1, 542, v112, v113, v105, (int)v114, a2);
  v115 = sub_1000E120(a3, 0x37u, 2);
  v116 = sub_1000E690();
  sub_1000EA90(a1, (int)v115, v116, 412, v112, 0x3Du);
  v117 = sub_1000E120(a3, 0x20Du, 2);
  sub_10019510(a1, 412, v112, v116, v105, (int)v117, a2);
  return sub_1000E5E0();
}
// 1006ACAC: using guessed type int dword_1006ACAC;

//----- (10019FD0) --------------------------------------------------------
char __cdecl writeSettings1(int a1)
{
  char v1; // bl
  char v2; // al
  unsigned __int8 v3; // al
  char v4; // cl
  char v5; // al
  char v6; // cl
  int v7; // esi
  char result; // al
  int v9; // [esp+8h] [ebp-40h]
  int v10; // [esp+Ch] [ebp-3Ch]
  int v11; // [esp+10h] [ebp-38h]
  int v12; // [esp+14h] [ebp-34h]
  int v13; // [esp+18h] [ebp-30h]
  char v14; // [esp+1Ch] [ebp-2Ch]
  char v15; // [esp+1Dh] [ebp-2Bh]
  int v16; // [esp+20h] [ebp-28h]
  int v17; // [esp+24h] [ebp-24h]
  int v18; // [esp+28h] [ebp-20h]
  int v19; // [esp+2Ch] [ebp-1Ch]
  int v20; // [esp+30h] [ebp-18h]
  int v21; // [esp+34h] [ebp-14h]
  int v22; // [esp+38h] [ebp-10h]
  char v23; // [esp+3Ch] [ebp-Ch]
  char v24; // [esp+3Dh] [ebp-Bh]
  int v25; // [esp+40h] [ebp-8h]
  int v26; // [esp+44h] [ebp-4h]

  v1 = 0;
  sub_10019200((int)&v9);
  if ( v9 != *(_DWORD *)a1 )
  {
    sub_100012C0("MAIN", "SCR_WIDTH", *(_DWORD *)a1);
    v1 = 1;
  }
  if ( v10 != *(_DWORD *)(a1 + 4) )
  {
    sub_100012C0("MAIN", "SCR_HEIGHT", *(_DWORD *)(a1 + 4));
    v1 = 1;
  }
  if ( v11 != *(_DWORD *)(a1 + 8) )
  {
    sub_100012C0("MAIN", "COLOUR_BITS", *(_DWORD *)(a1 + 8));
    v1 = 1;
  }
  if ( v12 != *(_DWORD *)(a1 + 12) )
  {
    sub_100012C0("MAIN", "REFRESH_RATE", *(_DWORD *)(a1 + 12));
    v1 = 1;
  }
  if ( v13 != *(_DWORD *)(a1 + 16) )
  {
    sub_100012C0("MAIN", "SCALE_2X", *(_DWORD *)(a1 + 16));
    v1 = 1;
  }
  v2 = *(_BYTE *)(a1 + 20);
  if ( v14 != v2 )
  {
    if ( v2 )
      sub_100012C0("MAIN", "WINDOWED", 1);
    else
      sub_100012C0("MAIN", "WINDOWED", 0);
    v1 = 1;
  }
  if ( v16 != *(_DWORD *)(a1 + 24) )
  {
    sub_100012C0("IFACE", "IFACE_BAR_SIDE_ART", *(_DWORD *)(a1 + 24));
    sub_10013FE0(*(_DWORD *)(a1 + 24));
  }
  v3 = *(_BYTE *)(a1 + 21);
  if ( v15 != v3 )
    sub_100012C0("HI_RES_PANEL", "DISPLAY_LIST_DESCENDING", v3);
  if ( v17 != *(_DWORD *)(a1 + 28) )
  {
    sub_100012C0("MOVIES", "MOVIE_SIZE", *(_DWORD *)(a1 + 28));
    sub_10016F10();
  }
  if ( v18 != *(_DWORD *)(a1 + 32) )
    sub_100012C0("STATIC_SCREENS", "SPLASH_SCRN_SIZE", *(_DWORD *)(a1 + 32));
  if ( v19 != *(_DWORD *)(a1 + 36) )
    sub_100012C0("STATIC_SCREENS", "HELP_SCRN_SIZE", *(_DWORD *)(a1 + 36));
  if ( v20 != *(_DWORD *)(a1 + 40) )
    sub_100012C0("STATIC_SCREENS", "DEATH_SCRN_SIZE", *(_DWORD *)(a1 + 40));
  if ( v21 != *(_DWORD *)(a1 + 44) )
    sub_100012C0("STATIC_SCREENS", "END_SLIDE_SIZE", *(_DWORD *)(a1 + 44));
  if ( v22 != *(_DWORD *)(a1 + 48) )
  {
    sub_100012C0("MAINMENU", "MAIN_MENU_SIZE", *(_DWORD *)(a1 + 48));
    sub_10015160();
  }
  v4 = *(_BYTE *)(a1 + 52);
  v5 = 0;
  if ( v23 != v4 )
  {
    if ( v4 )
      sub_100012C0("MAPS", "IGNORE_PLAYER_SCROLL_LIMITS", 1);
    else
      sub_100012C0("MAPS", "IGNORE_PLAYER_SCROLL_LIMITS", 0);
    v5 = 1;
  }
  v6 = *(_BYTE *)(a1 + 53);
  if ( v24 != v6 )
  {
    if ( v6 )
      sub_100012C0("MAPS", "FOG_OF_WAR", 1);
    else
      sub_100012C0("MAPS", "FOG_OF_WAR", 0);
    v5 = 1;
  }
  if ( v25 != *(_DWORD *)(a1 + 56) )
  {
    sub_100012C0("MAPS", "FOG_LIGHT_LEVEL", *(_DWORD *)(a1 + 56));
    v5 = 1;
  }
  v7 = *(_DWORD *)(a1 + 60);
  if ( v26 == v7 )
  {
    if ( v5 )
      sub_10016730();
    result = v1;
  }
  else
  {
    sub_100012C0("MAPS", "NumPathNodes", v7);
    sub_10016730();
    result = v1;
  }
  return result;
}

//----- (1001A270) --------------------------------------------------------
void __cdecl sub_1001A270(int a1, DWORD *a2, _DWORD *a3)
{
  int v3; // ecx
  DWORD v4; // ebx
  DWORD v5; // esi
  _DWORD *v6; // ebp
  DWORD v7; // eax
  DWORD v8; // esi
  _DWORD *v9; // ebx
  char *v10; // eax
  DWORD v11; // eax
  unsigned int v12; // esi
  _DWORD *v13; // eax

  v3 = *(_DWORD *)(a1 + 16);
  v4 = 480 << v3;
  v5 = 640 << v3;
  if ( sub_10018CF0(a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), 640 << v3, 480 << v3) )
    sub_10018D70(a2, *(_BYTE *)(a1 + 21));
  else
    sub_10018F20(a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), v5, v4, *(_BYTE *)(a1 + 21));
  v6 = operator new(4 * a2[4]);
  v7 = a2[4];
  v8 = 0;
  if ( v7 )
  {
    if ( v7 <= 0 )
    {
      v9 = 0;
      goto LABEL_8;
    }
    do
    {
      v9 = *(_DWORD **)(a2[5] + 4 * v8);
LABEL_8:
      v10 = (char *)operator new(0x10u);
      v6[v8] = v10;
      sprintf(v10, "%dx%d", *v9, v9[1]);
      ++v8;
    }
    while ( v8 < a2[4] );
  }
  sub_10006E80(a3, (int)v6, a2[4], 0x10u);
  v11 = a2[4];
  v12 = 0;
  if ( v11 )
  {
    if ( v11 <= 0 )
    {
      v13 = 0;
      goto LABEL_13;
    }
    do
    {
      v13 = *(_DWORD **)(a2[5] + 4 * v12);
LABEL_13:
      if ( *(_DWORD *)a1 == *v13 && *(_DWORD *)(a1 + 4) == v13[1] )
        sub_10006D80(a3, v12);
      j__free((void *)v6[v12++]);
    }
    while ( v12 < a2[4] );
  }
  j__free(v6);
}

//----- (1001A380) --------------------------------------------------------
int __cdecl sub_1001A380(int *a1, int a2, int a3)
{
  _DWORD *v3; // ebx
  unsigned int v4; // edi
  char *v5; // eax
  int v6; // ecx
  unsigned int v7; // edi
  int v8; // eax
  int result; // eax

  sub_100190B0((void **)a2, *a1, a1[1], a1[2]);
  v3 = operator new(4 * *(_DWORD *)a2);
  v4 = 0;
  if ( *(_DWORD *)a2 )
  {
    do
    {
      v5 = (char *)operator new(4u);
      v3[v4] = v5;
      if ( v4 >= *(_DWORD *)a2 )
        v6 = 0;
      else
        v6 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 4 * v4);
      sprintf(v5, "%d", v6);
      ++v4;
    }
    while ( v4 < *(_DWORD *)a2 );
  }
  sub_100079E0((_DWORD *)a3, (int)v3, *(_DWORD *)a2);
  v7 = 0;
  if ( *(_DWORD *)a2 )
  {
    if ( *(_DWORD *)a2 <= 0u )
    {
      v8 = 0;
      goto LABEL_10;
    }
    do
    {
      v8 = *(_DWORD *)(*(_DWORD *)(a2 + 4) + 4 * v7);
LABEL_10:
      if ( a1[3] == v8 )
        (*(void (__thiscall **)(int, unsigned int))(*(_DWORD *)a3 + 20))(a3, v7);
      j__free((void *)v3[v7++]);
    }
    while ( v7 < *(_DWORD *)a2 );
  }
  j__free(v3);
  result = j__atol(*(const char **)(a3 + 80));
  a1[3] = result;
  return result;
}

//----- (1001A4A0) --------------------------------------------------------
void __cdecl sub_1001A4A0(_DWORD *a1, int a2, void *a3, void *a4, unsigned int a5)
{
  unsigned int v5; // edx
  _DWORD *v6; // edx
  _DWORD *v7; // esi
  char v8; // [esp+4h] [ebp-8h]

  v5 = *(_DWORD *)(a2 + 16);
  if ( v5 )
  {
    if ( a5 >= v5 )
      v6 = 0;
    else
      v6 = *(_DWORD **)(*(_DWORD *)(a2 + 20) + 4 * a5);
    v7 = a1;
    *a1 = *v6;
    if ( a5 >= *(_DWORD *)(a2 + 16) )
      a1[1] = MEMORY[4];
    else
      a1[1] = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(a2 + 20) + 4 * a5) + 4);
  }
  else
  {
    v7 = a1;
    *a1 = 0;
    a1[1] = 0;
  }
  sprintf(&v8, "%d", *v7);
  sub_100076D0(a3, &v8);
  sprintf(&v8, "%d", v7[1]);
  sub_100076D0(a4, &v8);
}

//----- (1001A550) --------------------------------------------------------
int __cdecl sub_1001A550(int a1, char a2)
{
  int v2; // ebp
  int v3; // ebx
  int v4; // edi
  char *v5; // esi
  int v6; // eax
  int result; // eax
  unsigned __int16 *v8; // ecx
  signed int v9; // ecx
  char *v10; // eax
  char *v11; // edi
  char v12; // [esp+10h] [ebp-20h]

  v2 = a1;
  if ( !a2 )
    v2 = a1 + 1;
  v3 = 129;
  v4 = 94;
  sprintf(&v12, "HR_IFACERHT%d.frm", v2);
  v5 = sub_10005DF0((int)&v12, 6u);
  v6 = sub_10005B40(dword_1003C874, "IFACE_SELECT", 6);
  if ( v5 )
  {
    v8 = (unsigned __int16 *)*((_DWORD *)v5 + 16);
    if ( (signed int)*v8 < 129 )
      v3 = *v8;
    v9 = v8[1];
    if ( v9 < 94 )
      v4 = v9;
    sub_1001D260(
      *(_DWORD *)(*((_DWORD *)v5 + 16) + 12),
      v3,
      v4,
      **((unsigned __int16 **)v5 + 16),
      *(_DWORD *)(*(_DWORD *)(v6 + 64) + 12),
      **(unsigned __int16 **)(v6 + 64),
      *(unsigned __int16 *)(*(_DWORD *)(v6 + 64) + 2),
      0.0,
      0);
    v10 = (char *)*((_DWORD *)v5 + 16);
    if ( v10 )
    {
      v11 = v10 - 4;
      `eh vector destructor iterator'(v10, 0x10u, *((_DWORD *)v10 - 1), sub_10005680);
      j__free(v11);
    }
    j__free(v5);
    result = v2;
  }
  else
  {
    memset(
      *(void **)(*(_DWORD *)(v6 + 64) + 12),
      0xE4u,
      **(unsigned __int16 **)(v6 + 64) * *(unsigned __int16 *)(*(_DWORD *)(v6 + 64) + 2));
    result = 0;
  }
  return result;
}

//----- (1001A650) --------------------------------------------------------
int __cdecl sub_1001A650(int a1)
{
  int result; // eax
  int v2; // esi
  int *v3; // edi
  void *v4; // ecx
  int v5; // [esp+0h] [ebp-4h]

  v5 = 0;
  result = sub_1000F0B0(a1, (int)&v5);
  v2 = result;
  if ( result )
  {
    v3 = *(int **)(result + 68);
    *v3 = sub_1001A550(*v3, 0);
    sub_1000ECC0(v5, (_DWORD *)(v2 + 8));
    result = sub_1000F110(v4);
  }
  return result;
}

//----- (1001A6B0) --------------------------------------------------------
void __usercall __spoils<ecx> sub_1001A6B0(int a1@<eax>)
{
  sub_1001A650(a1);
}

//----- (1001A6C0) --------------------------------------------------------
int __cdecl sub_1001A6C0(int a1)
{
  int result; // eax
  void *v2; // ecx
  int v3; // ebx
  int v4; // esi
  char *v5; // eax
  char *v6; // edi
  char *v7; // eax
  char *v8; // ebp
  int v9; // eax
  int v10; // eax
  char *v11; // ebp
  char *v12; // edi
  char *v13; // eax
  char *v14; // esi
  int v15; // edi
  int v16; // ebp

  result = sub_1000EF30(scr_width / 2 - 320, newBytes / 2 - 240, 640, 480, 0, 8);
  v3 = result;
  if ( result != -1 )
  {
    v4 = sub_1000EF10(v2);
    if ( v4 )
    {
      sub_1000E5F0();
      v5 = sub_10006080(dword_1003C874, "HR_SCRN_BG.FRM", 6u, 0);
      sub_1001D1B0(
        *(char **)(*((_DWORD *)v5 + 16) + 12),
        **((unsigned __int16 **)v5 + 16),
        (char *)*(unsigned __int16 *)(*((_DWORD *)v5 + 16) + 2),
        **((unsigned __int16 **)v5 + 16),
        *(char **)(v4 + 44),
        *(_DWORD *)(v4 + 24));
      sub_10006180(dword_1003C874, "HR_SCRN_BG.FRM", 6);
      v6 = sub_10006080(dword_1003C874, "LILREDUP.frm", 6u, 0);
      v7 = sub_10006080(dword_1003C874, "LILREDDN.frm", 6u, 0);
      v8 = v7;
      v9 = sub_1000F000(
             v3,
             521,
             431,
             **((unsigned __int16 **)v6 + 16),
             *(unsigned __int16 *)(*((_DWORD *)v6 + 16) + 2),
             -1,
             -1,
             -1,
             13,
             *(_DWORD *)(*((_DWORD *)v6 + 16) + 12),
             *(_DWORD *)(*((_DWORD *)v7 + 16) + 12),
             0,
             96);
      sub_1000F040(v9, 0, (int)sub_100194E0, (int)sub_100194C0, (int)sub_100194D0);
      v10 = sub_1000F000(
              v3,
              391,
              431,
              **((unsigned __int16 **)v6 + 16),
              *(unsigned __int16 *)(*((_DWORD *)v6 + 16) + 2),
              -1,
              -1,
              -1,
              27,
              *(_DWORD *)(*((_DWORD *)v6 + 16) + 12),
              *(_DWORD *)(*((_DWORD *)v8 + 16) + 12),
              0,
              96);
      sub_1000F040(v10, 0, (int)sub_100194E0, (int)sub_100194C0, (int)sub_100194D0);
      v11 = sub_10005BE0(dword_1003C874, 128, 94, 2, 1, "IFACE_SELECT", 6, 0);
      v12 = sub_10005DF0((int)"HR_IFACE_SELECT.frm", 6u);
      sub_1001D200(
        *(_BYTE **)(*((_DWORD *)v12 + 16) + 12),
        **((unsigned __int16 **)v12 + 16),
        *(unsigned __int16 *)(*((_DWORD *)v12 + 16) + 2),
        **((unsigned __int16 **)v12 + 16),
        310 * *(_DWORD *)(v4 + 24) + *(_DWORD *)(v4 + 44) + 406,
        *(_DWORD *)(v4 + 24));
      v13 = (char *)*((_DWORD *)v12 + 16);
      if ( v13 )
      {
        v14 = v13 - 4;
        `eh vector destructor iterator'(v13, 0x10u, *((_DWORD *)v13 - 1), sub_10005680);
        j__free(v14);
      }
      j__free(v12);
      v15 = sub_1000F000(v3, 453, 317, 128, 94, -1, -1, -1, -1, *(_DWORD *)(*((_DWORD *)v11 + 16) + 12), 0, 0, 96);
      v16 = sub_1000F0B0(v15, 0);
      *(_DWORD *)(a1 + 24) = sub_1001A550(*(_DWORD *)(a1 + 24), 1);
      *(_DWORD *)(v16 + 68) = a1 + 24;
      sub_1000F040(v15, 0, 0, 0, (int)sub_1001A6B0);
      sub_1000E5E0();
      result = v3;
    }
    else
    {
      result = -1;
    }
  }
  return result;
}

//----- (1001A940) --------------------------------------------------------
signed int sub_1001A940()
{
  int *v0; // eax
  int *v1; // edi
  unsigned __int16 **v3; // esi
  int v4; // eax
  void *v5; // ecx
  int v6; // eax
  char *v7; // esi
  void *v8; // ecx
  int v9; // ebp
  int v10; // eax
  unsigned __int16 *v11; // edx
  int v12; // edi
  unsigned __int16 *v13; // ebx
  int v14; // esi
  int v15; // eax
  const char *v16; // ebp
  signed int v17; // edi
  int v18; // eax
  int *v19; // esi
  int v20; // eax
  void *v21; // ecx
  int v22; // ebp
  bool v23; // [esp+Ah] [ebp-26h]
  bool v24; // [esp+Bh] [ebp-25h]
  int *v25; // [esp+Ch] [ebp-24h]
  char *v26; // [esp+10h] [ebp-20h]
  char *v27; // [esp+14h] [ebp-1Ch]
  const char *v28; // [esp+18h] [ebp-18h]
  signed int v29; // [esp+18h] [ebp-18h]
  int v30; // [esp+1Ch] [ebp-14h]
  unsigned __int16 **v31; // [esp+20h] [ebp-10h]
  char *v32; // [esp+24h] [ebp-Ch]
  int v33; // [esp+28h] [ebp-8h]

  v0 = (int *)operator new(8u);
  if ( v0 )
  {
    v1 = v0;
    v0[1] = 0;
    *v0 = 0;
    v25 = v0;
  }
  else
  {
    v25 = 0;
    v1 = 0;
  }
  if ( !sub_1000E0A0((int)v1, (int)"game\\ScrnSet.msg") )
    return 1;
  v3 = (unsigned __int16 **)sub_10005DF0((int)"HR_OPTIONS_BG.FRM", 6u);
  if ( !v3 )
    return 1;
  v4 = sub_1000F0B0(dword_1003B134, 0);
  v30 = sub_1000EF30(*(_DWORD *)(v4 + 8), *(_DWORD *)(v4 + 12), *v3[16], v3[16][1], 0, 20);
  if ( v30 == -1 )
    return 1;
  v6 = sub_1000EF10(v5);
  v33 = v6;
  if ( !v6 )
    return 1;
  sub_1001D1B0(*((char **)v3[16] + 3), *v3[16], (char *)v3[16][1], *v3[16], *(char **)(v6 + 44), *(_DWORD *)(v6 + 24));
  sub_100061D0(v3, 1);
  v7 = sub_10005DF0((int)"HR_OPTIONS_UP.FRM", 6u);
  v31 = (unsigned __int16 **)v7;
  v26 = sub_10005DF0((int)"HR_OPTIONS_DN.FRM", 6u);
  v27 = sub_10005DF0((int)"HR_OPTIONS_UP.FRM", 6u);
  v32 = sub_10005DF0((int)"HR_OPTIONS_DN.FRM", 6u);
  sub_1000E5F0();
  sub_1000E5E0();
  v28 = sub_1000E120(v1, 0, 2);
  v9 = sub_1000E670(v8);
  v10 = sub_1000E690();
  v11 = (unsigned __int16 *)*((_DWORD *)v7 + 16);
  v12 = v10;
  if ( v10 > *v11 )
    v12 = *v11;
  v13 = (unsigned __int16 *)*((_DWORD *)v7 + 16);
  v14 = v9 / 2;
  sub_1000E630(
    *((_DWORD *)v13 + 3),
    (int)v28,
    v12,
    ((unsigned int)*v13 >> 1) - v12 / 2,
    ((unsigned int)v13[1] >> 1) - v9 / 2 + 2,
    *v13,
    0x3Du);
  sub_1000E630(
    *(_DWORD *)(*((_DWORD *)v26 + 16) + 12),
    (int)v28,
    v12,
    ((unsigned int)**((unsigned __int16 **)v26 + 16) >> 1) - v12 / 2,
    ((unsigned int)*(unsigned __int16 *)(*((_DWORD *)v26 + 16) + 2) >> 1) - v9 / 2 + 2,
    **((unsigned __int16 **)v26 + 16),
    0x3Eu);
  v15 = sub_1000F000(
          v30,
          17,
          20,
          *v31[16],
          v31[16][1],
          -1,
          -1,
          -1,
          103,
          *((_DWORD *)v31[16] + 3),
          *(_DWORD *)(*((_DWORD *)v26 + 16) + 12),
          0,
          32);
  sub_1000F070(v15, (int)sub_100194F0);
  v16 = sub_1000E120(v25, 1u, 2);
  v17 = sub_1000E690();
  if ( v17 > *v31[16] )
    v17 = *v31[16];
  sub_1000E630(
    *(_DWORD *)(*((_DWORD *)v27 + 16) + 12),
    (int)v16,
    v17,
    ((unsigned int)**((unsigned __int16 **)v27 + 16) >> 1) - v17 / 2,
    ((unsigned int)*(unsigned __int16 *)(*((_DWORD *)v27 + 16) + 2) >> 1) - v14 + 2,
    **((unsigned __int16 **)v27 + 16),
    0x3Du);
  sub_1000E630(
    *(_DWORD *)(*((_DWORD *)v32 + 16) + 12),
    (int)v16,
    v17,
    ((unsigned int)**((unsigned __int16 **)v32 + 16) >> 1) - v17 / 2,
    ((unsigned int)*(unsigned __int16 *)(*((_DWORD *)v32 + 16) + 2) >> 1) - v14 + 2,
    **((unsigned __int16 **)v32 + 16),
    0x3Eu);
  v18 = sub_1000F000(
          v30,
          17,
          *(_DWORD *)(v33 + 28) - *(unsigned __int16 *)(*((_DWORD *)v27 + 16) + 2) - 20,
          **((unsigned __int16 **)v27 + 16),
          *(unsigned __int16 *)(*((_DWORD *)v27 + 16) + 2),
          -1,
          -1,
          -1,
          115,
          *(_DWORD *)(*((_DWORD *)v27 + 16) + 12),
          *(_DWORD *)(*((_DWORD *)v32 + 16) + 12),
          0,
          32);
  sub_1000F070(v18, (int)sub_100194F0);
  v19 = (int *)(v33 + 8);
  v23 = sub_1000FA50((int *)(v33 + 8));
  v24 = sub_1000EEA0();
  v20 = IDA_mouse_show_();
  sub_1000EFA0(v20);
  v29 = 0;
  while ( !sub_1000EBB0() )
  {
    v22 = sub_1000F090(v21);
    switch ( v22 )
    {
      case 4294967294:
        if ( !sub_1000FA50(v19) )
          v22 = 27;
        goto LABEL_21;
      case 71:
      case 103:
        v29 = 1;
        goto LABEL_23;
      case 83:
      case 115:
        v29 = 2;
        goto LABEL_23;
      default:
LABEL_21:
        if ( v23 && !sub_1000FA50(v19) )
LABEL_23:
          v22 = 27;
        sub_1000EFD0();
        if ( v22 == 27 )
          goto LABEL_25;
        break;
    }
  }
LABEL_25:
  sub_100061D0(v31, 1);
  sub_100061D0(v26, 1);
  sub_100061D0(v27, 1);
  sub_100061D0(v32, 1);
  sub_1000E060(v25);
  sub_1000E5E0();
  sub_1000EF60();
  if ( v24 )
    IDA_mouse_hide_();
  return v29;
}
// 10064590: invalid function type has been ignored
// 100194F0: using guessed type int sub_100194F0();
// 1003B134: using guessed type int dword_1003B134;
// 10064550: using guessed type int (*IDA_mouse_show_)(void);
// 10064590: using guessed type int (*IDA_mouse_hide_)(void);

//----- (1001ADE0) --------------------------------------------------------
char __usercall sub_1001ADE0@<al>(int a1@<edi>)
{
  _DWORD *v1; // eax
  int *v2; // eax
  INT v4; // esi
  const char *v5; // ebx
  const char *v6; // edi
  const char *v7; // ebp
  UINT v8; // eax
  const char *v9; // eax
  const char *v10; // eax
  const char *v11; // eax
  const char *v12; // eax
  void **v13; // eax
  DWORD *v14; // eax
  DWORD *v15; // ebx
  _DWORD *v16; // eax
  void (__stdcall ***v17)(signed int); // eax
  int v18; // esi
  _DWORD *v19; // eax
  _DWORD *v20; // eax
  _DWORD *v21; // eax
  _DWORD *v22; // eax
  _DWORD *v23; // edi
  _DWORD *v24; // eax
  void *v25; // ecx
  void *v26; // ecx
  int v27; // esi
  _DWORD *v28; // ecx
  _DWORD *v29; // ebp
  void (__stdcall ***v30)(signed int); // eax
  int *v31; // esi
  _DWORD *v32; // esi
  int v33; // eax
  _DWORD *v34; // eax
  _DWORD *v35; // eax
  _DWORD *v36; // eax
  _DWORD *v37; // eax
  int v38; // eax
  void *v39; // ecx
  signed int v40; // eax
  signed int v41; // ebp
  _DWORD *v42; // esi
  int v43; // eax
  _DWORD *v44; // esi
  void (__stdcall ***v45)(signed int); // esi
  int v46; // eax
  int v47; // eax
  _DWORD *v48; // esi
  _DWORD *v49; // esi
  int v50; // eax
  int v51; // esi
  char v52; // bl
  void *v53; // esi
  unsigned int v54; // [esp+14h] [ebp-DCh]
  int v55; // [esp+1Ch] [ebp-D4h]
  int v56; // [esp+1Ch] [ebp-D4h]
  const char *v57; // [esp+2Ch] [ebp-C4h]
  void (__stdcall ***v58)(signed int); // [esp+2Ch] [ebp-C4h]
  _DWORD *v59; // [esp+30h] [ebp-C0h]
  _DWORD *v60; // [esp+30h] [ebp-C0h]
  _DWORD *v61; // [esp+30h] [ebp-C0h]
  _DWORD *v62; // [esp+30h] [ebp-C0h]
  _DWORD *v63; // [esp+30h] [ebp-C0h]
  int *v64; // [esp+34h] [ebp-BCh]
  void **v65; // [esp+38h] [ebp-B8h]
  _DWORD *v66; // [esp+3Ch] [ebp-B4h]
  _DWORD *v67; // [esp+40h] [ebp-B0h]
  void (__stdcall ***v68)(signed int); // [esp+44h] [ebp-ACh]
  _DWORD *v69; // [esp+48h] [ebp-A8h]
  void *v70; // [esp+4Ch] [ebp-A4h]
  void (__stdcall ***v71[2])(signed int); // [esp+50h] [ebp-A0h]
  const char *v72; // [esp+58h] [ebp-98h]
  _DWORD *v73; // [esp+5Ch] [ebp-94h]
  int v74; // [esp+60h] [ebp-90h]
  _DWORD *v75; // [esp+64h] [ebp-8Ch]
  int v76; // [esp+68h] [ebp-88h]
  int v77; // [esp+6Ch] [ebp-84h]
  DWORD v78; // [esp+70h] [ebp-80h]
  int v79; // [esp+74h] [ebp-7Ch]
  BOOL v80; // [esp+78h] [ebp-78h]
  int v81; // [esp+80h] [ebp-70h]
  int v82[6]; // [esp+84h] [ebp-6Ch]
  char v83; // [esp+9Ch] [ebp-54h]
  char v84; // [esp+9Dh] [ebp-53h]
  char *v85; // [esp+A0h] [ebp-50h]
  char *v86; // [esp+A4h] [ebp-4Ch]
  void (__stdcall ***v87)(signed int); // [esp+A8h] [ebp-48h]
  void (__stdcall ***v88)(signed int); // [esp+ACh] [ebp-44h]
  void *v89; // [esp+B0h] [ebp-40h]
  const char *v90; // [esp+B4h] [ebp-3Ch]
  const char *v91; // [esp+B8h] [ebp-38h]
  const char *v92; // [esp+BCh] [ebp-34h]
  const char *v93; // [esp+C0h] [ebp-30h]
  const char *v94; // [esp+C4h] [ebp-2Ch]
  const char *v95; // [esp+C8h] [ebp-28h]
  const char *v96; // [esp+CCh] [ebp-24h]
  const char *v97; // [esp+D0h] [ebp-20h]
  int v98; // [esp+D4h] [ebp-1Ch]
  int v99; // [esp+D8h] [ebp-18h]
  int v100; // [esp+DCh] [ebp-14h]
  int v101; // [esp+E0h] [ebp-10h]
  int v102; // [esp+E4h] [ebp-Ch]
  int v103; // [esp+ECh] [ebp-4h]
  signed int retaddr; // [esp+F0h] [ebp+0h]

  v98 = sub_1000E5F0();
  HIBYTE(v69) = 0;
  v1 = operator new(0x30u);
  if ( v1 )
  {
    *v1 = 0;
    v1[1] = 0;
    v1[2] = 0;
    v1[3] = 0;
    v1[4] = 0;
    v1[5] = 0;
    v1[6] = 0;
    v1[7] = 0;
    v1[8] = 0;
    v1[9] = 0;
    v1[10] = 0;
    v1[11] = 0;
  }
  else
  {
    v1 = 0;
  }
  dword_1003C874 = v1;
  sub_10019200((int)&v75);
  dword_1003B180 = sub_1001A6C0((int)&v75);
  if ( dword_1003B180 == -1 )
    return 0;
  v2 = (int *)operator new(8u);
  if ( v2 )
  {
    v2[1] = 0;
    *v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  v64 = v2;
  if ( !sub_1000E0A0((int)v2, (int)"game\\ScrnSet.msg") )
    return 0;
  v55 = a1;
  dword_1006ACA0 = operator new(0x100u);
  sprintf((char *)dword_1006ACA0, "Fallout Hi-Res Patch version %s.\nCreated by \"Mash\" Matt Wells.", "4.1.8.0");
  v4 = graphics_mode;
  v5 = sub_1000E120(v64, 0x8Cu, 2);
  v72 = sub_1000E120(v64, 3 * v4 + 141, 2);
  v70 = (void *)sub_1000E120(v64, 3 * v4 + 142, 2);
  v57 = sub_1000E120(v64, 3 * v4 + 143, 2);
  v6 = 0;
  v7 = 0;
  dword_1006ACA4 = (char *)operator new(0x100u);
  dword_1006ACA8 = (char *)operator new(0x100u);
  switch ( v4 )
  {
    case 0:
      dword_1006ACAC = (int)sub_1000E120(v64, 0xCFu, 2);
      v8 = F_GetPrivateProfileIntA_3("Graphics", "Mode", 0);
      if ( v8 == 4 )
      {
        v10 = sub_1000E120(v64, 0xCCu, 2);
      }
      else
      {
        if ( v8 != 5 )
        {
          v70 = (void *)sub_1000E120(v64, 0x3Cu, 2);
          v6 = sub_1000E120(v64, 0x3Cu, 2);
          v9 = sub_1000E120(v64, 0x3Cu, 2);
LABEL_27:
          v7 = v9;
          break;
        }
        v10 = sub_1000E120(v64, 0xCDu, 2);
      }
      v6 = v10;
      v9 = sub_1000E120(v64, 0x3Cu, 2);
      goto LABEL_27;
    case 1:
      v6 = sub_1000E120(v64, 0x3Cu, 2);
      v9 = sub_1000E120(v64, 0x3Cu, 2);
      goto LABEL_27;
    case 2:
      if ( byte_1003C820 )
        v11 = sub_1000E120(v64, 0x3Bu, 2);
      else
        v11 = sub_1000E120(v64, 0x3Au, 2);
      v6 = v11;
      if ( byte_1003B060 )
        v54 = 58;
      else
        v54 = 59;
      v9 = sub_1000E120(v64, v54, 2);
      goto LABEL_27;
  }
  sprintf(dword_1006ACA4, "%s %d", v5, v4);
  v12 = sub_1000E120(v64, 0x64u, 2);
  sprintf(dword_1006ACA8, "%s %s %s\n %s %s\n %s %s", v12, v5, v72, v70, v6, v57, v7, v55);
  v99 = sub_10006400(dword_1003B180, 210, 130, -1, &v80);
  v101 = sub_10006400(dword_1003B180, 70, 351, 1796, (_BYTE *)&v80 + 1);
  sub_1000E5E0();
  v100 = sub_1000EF10((void *)dword_1003B180);
  v13 = (void **)operator new(8u);
  if ( v13 )
  {
    *v13 = 0;
    v13[1] = 0;
    v65 = v13;
  }
  else
  {
    v65 = 0;
  }
  sub_100190B0(v65, (int)v75, v76, v77);
  v14 = (DWORD *)operator new(0x18u);
  if ( v14 )
  {
    *v14 = 640;
    v14[1] = 480;
    v14[4] = 0;
    v14[5] = 0;
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  sub_10018F20(v15, v77, v78, 640 << v79, 480 << v79, SBYTE1(v80));
  v16 = operator new(0x64u);
  v103 = 0;
  if ( v16 )
    v17 = (void (__stdcall ***)(signed int))sub_10006FE0(v16, "ResList", dword_1003B180, 70, 190, 118, 144, 511, 4);
  else
    v17 = 0;
  v68 = v17;
  v103 = -1;
  sub_1001A270((int)&v75, v15, v17);
  v18 = 0;
  if ( v77 != 8 )
  {
    if ( v77 == 16 )
    {
      v18 = 1;
    }
    else if ( v77 == 32 )
    {
      v18 = 2;
    }
  }
  v89 = (void *)sub_1000E120(v64, 0x67u, 2);
  v90 = sub_1000E120(v64, 0x68u, 2);
  v91 = sub_1000E120(v64, 0x69u, 2);
  v19 = operator new(0x54u);
  v103 = 1;
  if ( v19 )
    v70 = sub_10009070(v19, "HR_ColourDial", dword_1003B180, 260, 220, 3, v18, 1535, (int)&v89);
  else
    v70 = 0;
  v89 = 0;
  v90 = 0;
  v103 = -1;
  v91 = 0;
  sprintf((char *)v71, "%d", v75);
  v20 = operator new(0x60u);
  v103 = 2;
  if ( v20 )
    v67 = sub_10007CF0(v20, "customWidth", dword_1003B180, 110, 420, 1792, 4, v71, 4, 215, 16777217);
  else
    v67 = 0;
  v103 = -1;
  sprintf((char *)v71, "%d", v76);
  v21 = operator new(0x60u);
  v103 = 3;
  if ( v21 )
    v66 = sub_10007CF0(v21, "customHeight", dword_1003B180, 227, 420, 1793, 4, v71, 4, 215, 16777217);
  else
    v66 = 0;
  v103 = -1;
  sprintf((char *)v71, "%d", 0);
  v22 = operator new(0x60u);
  v103 = 4;
  if ( v22 )
    v23 = sub_10007CF0(v22, "customFreq", dword_1003B180, 278, 313, 1794, 4, v71, 3, 215, 0x1000000);
  else
    v23 = 0;
  v103 = -1;
  v24 = operator new(0x44u);
  v103 = 5;
  if ( v24 )
    v86 = (char *)sub_100080B0(v24, "customFreqUpDn", dword_1003B180, 0, 0, 1794, 0, 999, 0, 1, (int)v23, 3);
  else
    v86 = 0;
  v103 = -1;
  sub_1001A380((int *)&v75, (int)v65, (int)v23);
  HIBYTE(v59) = 0;
  if ( v79 )
    HIBYTE(v59) = 1;
  sub_10006400(dword_1003B180, 40, 90, 1795, (_BYTE *)&v59 + 3);
  sub_1000E5E0();
  sub_1000E670(v25);
  sub_1000E5E0();
  v27 = sub_1000E670(v26);
  sprintf((char *)v71, "%d", 0, 101, 101);
  v28 = operator new(0x60u);
  v103 = 6;
  if ( v28 )
    v29 = sub_10007CF0(v28, "panelScale", dword_1003B180, 397, 267 - v27 / 2, 1798, 101, v71, 10, 215, 3);
  else
    v29 = 0;
  v73 = v29;
  v103 = -1;
  *((_BYTE *)v29 + 92) = 0;
  v30 = (void (__stdcall ***)(signed int))operator new(0x44u);
  v58 = v30;
  v103 = 7;
  if ( v30 )
    v87 = (void (__stdcall ***)(signed int))sub_100080B0(
                                              v30,
                                              "panelScaleUpDn",
                                              dword_1003B180,
                                              0,
                                              0,
                                              1798,
                                              0,
                                              5,
                                              0,
                                              1,
                                              (int)v29,
                                              3);
  else
    v87 = 0;
  v31 = v64;
  v103 = -1;
  v92 = sub_1000E120(v64, 0x9Au, 2);
  v93 = sub_1000E120(v31, 0x9Bu, 2);
  v94 = sub_1000E120(v31, 0x9Cu, 2);
  v95 = sub_1000E120(v31, 0x9Du, 2);
  v96 = sub_1000E120(v31, 0x9Eu, 2);
  v97 = sub_1000E120(v31, 0x9Fu, 2);
  sub_100079E0(v29, (int)&v92, 6);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  (*(void (__thiscall **)(_DWORD *, _DWORD, int))(*v29 + 20))(v29, 0, v56);
  v32 = operator new(0x60u);
  v59 = v32;
  retaddr = 8;
  if ( v32 )
  {
    v33 = (*(int (__thiscall **)(_DWORD *))(*v29 + 40))(v29);
    v75 = sub_10008A20(v32, "panelScaleSlide", dword_1003B180, 500, 267, 100, 1799, 0, 2, v82[v33], 0);
  }
  else
  {
    v75 = 0;
  }
  sub_10006400(dword_1003B180, 376, 62, -1, &v84);
  v34 = operator new(0x60u);
  v60 = v34;
  retaddr = 9;
  if ( v34 )
    v89 = sub_10008A20(v34, "fogLevel", dword_1003B180, 400, 120, 200, 1802, 0, 10, (int)v85, 0);
  else
    v89 = 0;
  sub_10006400(dword_1003B180, 376, 145, -1, &v83);
  v35 = operator new(0x60u);
  v61 = v35;
  retaddr = 10;
  if ( v35 )
    v73 = sub_10008A20(v35, "pathNodes", dword_1003B180, 400, 210, 200, 1803, 1, 20, (int)v86, 0);
  else
    v73 = 0;
  v36 = operator new(0x50u);
  v62 = v36;
  retaddr = 11;
  if ( v36 )
    v37 = sub_10008E20(v36, "toolTipTextBox", dword_1003B180, 380, 14, 238, 32, 101, 215, 0);
  else
    v37 = 0;
  v63 = v37;
  retaddr = -1;
  sub_10019570(dword_1003B180, (int)v37, (int *)v65);
  BYTE2(v70) = sub_1000EEA0();
  v38 = IDA_mouse_show_();
  sub_1000EFA0(v38);
  while ( !sub_1000EBB0() )
  {
    v40 = sub_1000F090(v39);
    v41 = v40;
    if ( v40 <= 119 )
    {
      if ( v40 == 119 )
      {
LABEL_94:
        v45 = v68;
        sub_10007750((int)v68);
        v76 = j__atol((const char *)v45[20]);
        sub_1001A380(&v76, (int)v66, (int)v23);
      }
      else
      {
        switch ( v40 )
        {
          case 13:
            v52 = writeSettings1((int)&v76);
            goto LABEL_125;
          case 65:
          case 97:
            sub_10006330(v102);
            goto LABEL_93;
          case 72:
          case 104:
            v42 = v67;
            sub_10007750((int)v67);
            v77 = j__atol((const char *)v42[20]);
            sub_1001A380(&v76, (int)v66, (int)v23);
            goto LABEL_123;
          case 73:
          case 105:
            v81 = sub_1001A550(v81, 0);
            sub_1000ECB0();
            goto LABEL_123;
          case 77:
          case 109:
            v43 = (*((int (**)(void))*v71[0] + 7))();
            if ( v43 )
            {
              if ( v43 == 1 )
              {
                v78 = 16;
              }
              else if ( v43 == 2 )
              {
                v78 = 32;
              }
            }
            else
            {
              v78 = 8;
            }
            goto LABEL_93;
          case 82:
          case 114:
            sub_1000EFA0(v40);
            sub_1000EFD0();
            goto LABEL_123;
          case 83:
          case 115:
            sub_10006330(v100);
            goto LABEL_123;
          case 87:
            goto LABEL_94;
          default:
            goto LABEL_123;
        }
      }
      goto LABEL_123;
    }
    if ( v40 > 1794 )
    {
      switch ( v40 )
      {
        case 1795:
          v49 = v69;
          v80 = HIBYTE(v64) != 0;
          sub_1001A270((int)&v76, v15, v69);
          sub_1001A4A0(&v76, (int)v15, v68, v67, v49[19]);
          sub_1001A380(&v76, (int)v66, (int)v23);
          break;
        case 1796:
LABEL_93:
          v44 = v69;
          sub_1001A270((int)&v76, v15, v69);
          sub_1001A4A0(&v76, (int)v15, v68, v67, v44[19]);
          sub_1001A380(&v76, (int)v66, (int)v23);
          break;
        case 1798:
          v50 = (*(int (**)(void))(*(_DWORD *)v74 + 40))();
          sub_10008790((int)v75, v82[v50]);
          break;
        case 1799:
          v51 = v75[17];
          v82[(*(int (**)(void))(*(_DWORD *)v74 + 40))()] = v51;
          break;
        case 1802:
          v85 = dword_1003C878;
          break;
        case 1803:
          v86 = dword_1003C878;
          break;
        default:
          goto LABEL_123;
      }
      goto LABEL_123;
    }
    if ( v40 == 1794 )
    {
      v79 = j__atol(dword_1003C878);
    }
    else if ( v40 > 1535 )
    {
      if ( v40 == 1792 )
      {
        v76 = j__atol(dword_1003C878);
        sub_1001A380(&v76, (int)v66, (int)v23);
      }
      else
      {
        if ( v40 != 1793 )
          goto LABEL_123;
        v77 = j__atol(dword_1003C878);
        sub_1001A380(&v76, (int)v66, (int)v23);
      }
    }
    else
    {
      switch ( v40 )
      {
        case 1535:
          if ( dword_1003C878 )
          {
            if ( dword_1003C878 == (char *)1 )
            {
              v78 = 16;
            }
            else if ( dword_1003C878 == (char *)2 )
            {
              v78 = 32;
            }
          }
          else
          {
            v78 = 8;
          }
          v48 = v69;
          sub_1001A270((int)&v76, v15, v69);
          sub_1001A4A0(&v76, (int)v15, v68, v67, v48[19]);
          sub_1001A380(&v76, (int)v66, (int)v23);
          break;
        case 328:
          v47 = sub_10006E00(v69);
          sub_1001A4A0(&v76, (int)v15, v68, v67, v47);
          sub_1001A380(&v76, (int)v66, (int)v23);
          break;
        case 336:
          v46 = sub_10006DC0(v69);
          sub_1001A4A0(&v76, (int)v15, v68, v67, v46);
          sub_1001A380(&v76, (int)v66, (int)v23);
          break;
        case 511:
          sub_1001A4A0(&v76, (int)v15, v68, v67, (unsigned int)dword_1003C878);
          sub_1001A380(&v76, (int)v66, (int)v23);
          break;
        default:
LABEL_123:
          if ( v41 == 27 )
            goto LABEL_124;
          break;
      }
    }
  }
LABEL_124:
  v52 = HIBYTE(v70);
LABEL_125:
  if ( v71[0] )
    (**v71[0])(1);
  if ( v69 )
    (*(void (__stdcall **)(signed int))*v69)(1);
  if ( v68 )
    (**v68)(1);
  if ( v67 )
    (*(void (__stdcall **)(signed int))*v67)(1);
  if ( v87 )
    (**v87)(1);
  if ( v23 )
    (*(void (__thiscall **)(_DWORD *, signed int))*v23)(v23, 1);
  if ( v88 )
    (**v88)(1);
  (**(void (__cdecl ***)(signed int))v74)(1);
  if ( v88 )
    (**v88)(1);
  if ( v72 )
    (**(void (__stdcall ***)(signed int))v72)(1);
  if ( v58 )
    (**v58)(1);
  j__free(dword_1006ACA0);
  dword_1006ACA0 = 0;
  j__free(dword_1006ACA4);
  dword_1006ACA4 = 0;
  j__free(dword_1006ACA8);
  dword_1006ACA8 = 0;
  dword_1006ACAC = 0;
  if ( BYTE2(v69) )
    IDA_mouse_hide_();
  sub_1000EF60();
  sub_1000E060(v64);
  dword_1003B180 = -1;
  if ( dword_1003C874 )
  {
    v53 = dword_1003C874;
    sub_1001BE90((char *)dword_1003C874);
    j__free(v53);
  }
  dword_1003C874 = 0;
  sub_1000E5E0();
  return v52;
}
// 1001ADE0: could not find valid save-restore pair for edi
// 1003B060: using guessed type char byte_1003B060;
// 1003B180: using guessed type int dword_1003B180;
// 1003C820: using guessed type char byte_1003C820;
// 10064550: using guessed type int (*IDA_mouse_show_)(void);
// 10064590: using guessed type int (*IDA_mouse_hide_)(void);
// 1006ACAC: using guessed type int dword_1006ACAC;
// 1001ADE0: using guessed type int var_6C[6];

//----- (1001BE90) --------------------------------------------------------
int __thiscall sub_1001BE90(char *this)
{
  int v1; // ebp
  _DWORD *v2; // esi
  _DWORD *v3; // ebx
  char *v4; // eax
  char *v5; // edi
  int result; // eax
  signed int v7; // [esp+10h] [ebp-8h]
  int v8; // [esp+14h] [ebp-4h]

  v1 = (int)(this + 4);
  v7 = 11;
  do
  {
    if ( *(_DWORD *)v1 )
    {
      do
      {
        v2 = *(_DWORD **)v1;
        v8 = *(_DWORD *)(*(_DWORD *)v1 + 16);
        if ( *(_DWORD *)v1 )
        {
          v3 = (_DWORD *)v2[2];
          if ( v3 )
          {
            v4 = (char *)v3[16];
            if ( v4 )
            {
              v5 = v4 - 4;
              `eh vector destructor iterator'(v4, 0x10u, *((_DWORD *)v4 - 1), sub_10005680);
              j__free(v5);
            }
            j__free(v3);
          }
          v2[3] = 0;
          v2[4] = 0;
          j__free(v2);
        }
        *(_DWORD *)v1 = v8;
      }
      while ( v8 );
      *(_DWORD *)v1 = 0;
    }
    v1 += 4;
    result = v7-- - 1;
  }
  while ( v7 );
  return result;
}

//----- (1001BF30) --------------------------------------------------------
// In this function, all the calls below write game EXE addresses to
// global variables. Some only do that, others do more things, like
// writing to global variables which mods are enabled and which are not,
// and also patch things.
// 
// The unnamed functions only write the addresses. The others have a name
// saying what they do *aside* from writing addresses, which probably they
// do (just check inside if you want to know).
void Initialize()
{
  F_initFunc1_TeamChecker();
  F_initFunc2();
  F_initFunc3();
  F_initFunc4();
  F_initFunc5();
  F_initFunc6_fadeTimeMod2();
  F_initFunc7();
  F_initFunc8();
  F_initFunc9();
  F_initFunc10_gameFixes2();
  F_initFunc11();
  F_initFunc12();
  F_initFunc13_fadeTimeMod();
  F_initFunc14();
  F_initFunc15_enableFOWAndOthers();
  F_initFunc16_resStuff5();
  F_initFunc17();
  F_initFunc18();
  F_initFunc185_gameFixes();
  F_initFunc19();
  F_initFunc20();
  F_initFunc21();
  F_initFunc22_resStuf4();
  F_initFunc23_resStuf3();
  F_initFunc24();
  F_initFunc25_resStuf2();
  F_initFunc26_resStuf1();
  F_initFunc27();
  F_initFunc28();
  F_initFunc29();
  F_initFunc30_doubleClickRun();
  F_initFunc31_end_err_chk();
}

//----- (1001BFD0) --------------------------------------------------------
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  dword_1006ACB8 = (int)hinstDLL;
  F_initFunc1_TeamChecker();
  if ( fdwReason == 1 )
    Initialize();
  return 1;
}
// 1006ACB8: using guessed type int dword_1006ACB8;

//----- (1001C000) --------------------------------------------------------
int __thiscall sub_1001C000(_DWORD *this)
{
  _DWORD *v1; // esi
  unsigned int v2; // eax
  char v4; // [esp+4h] [ebp-4h]

  v1 = this;
  std::_Lockit::_Lockit((std::_Lockit *)&v4, 0);
  v2 = v1[1];
  if ( v2 < 0xFFFFFFFF )
    v1[1] = v2 + 1;
  return std::_Lockit::~_Lockit((std::_Lockit *)&v4);
}

//----- (1001C030) --------------------------------------------------------
signed int __fastcall sub_1001C030(int a1)
{
  int v1; // esi
  unsigned int v2; // eax
  signed int v3; // esi
  char v5; // [esp+4h] [ebp-4h]

  v1 = a1;
  std::_Lockit::_Lockit((std::_Lockit *)&v5, 0);
  v2 = *(_DWORD *)(v1 + 4);
  if ( v2 && v2 < 0xFFFFFFFF )
    *(_DWORD *)(v1 + 4) = v2 - 1;
  v3 = *(_DWORD *)(v1 + 4) != 0 ? 0 : v1;
  std::_Lockit::~_Lockit((std::_Lockit *)&v5);
  return v3;
}

//----- (1001C070) --------------------------------------------------------
void __thiscall sub_1001C070(_DWORD *this)
{
  *this = &std::locale::facet::`vftable';
}
// 1003873C: using guessed type void *std::locale::facet::`vftable';

//----- (1001C0A0) --------------------------------------------------------
void *__thiscall sub_1001C0A0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  *(_DWORD *)this = &std::locale::facet::`vftable';
  if ( a2 & 1 )
    j__free(this);
  return v2;
}
// 1003873C: using guessed type void *std::locale::facet::`vftable';

//----- (1001C0C0) --------------------------------------------------------
char sub_1001C0C0()
{
  return 1;
}

//----- (1001C0D0) --------------------------------------------------------
signed int sub_1001C0D0()
{
  return 1;
}

//----- (1001C0E0) --------------------------------------------------------
_DWORD *__thiscall sub_1001C0E0(_DWORD **this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // edi
  unsigned int v4; // eax

  v2 = *this[9];
  v3 = a2;
  *a2 = v2;
  std::_Lockit::_Lockit((std::_Lockit *)&a2, 0);
  v4 = *(_DWORD *)(v2 + 4);
  if ( v4 < 0xFFFFFFFF )
    *(_DWORD *)(v2 + 4) = v4 + 1;
  std::_Lockit::~_Lockit((std::_Lockit *)&a2);
  return v3;
}

//----- (1001C120) --------------------------------------------------------
void *__thiscall sub_1001C120(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  std::ios_base::~ios_base((std::ios_base *)this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1001C140) --------------------------------------------------------
int __cdecl F_ptrCorrection_(int addr)
{
  unsigned int v2; // edx
  int v3; // ecx
  int v4; // eax
  unsigned int v5; // ebx
  int v6; // ecx
  unsigned int v7; // ebx

  if ( !find_out_for_sub_1001C140_dword_1006ACC4 )
    return addr;
  v2 = addr;
  if ( (unsigned int)addr < 0x410000 )
    v2 = addr + 0x410000;
  v3 = *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4);
  v4 = *(_DWORD *)find_out_for_sub_1001C140_dword_1006ACC4 - 1;
  v5 = *(_DWORD *)(v3 + 4 * v4);
  v6 = v3 + 4 * v4;
  if ( v2 < v5 )
  {
    do
    {
      if ( v4 <= 0 )
        break;
      v7 = *(_DWORD *)(v6 - 4);
      v6 -= 4;
      --v4;
    }
    while ( v2 < v7 );
  }
  return addr + *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 4 * v4);
}
// 1006ACC4: using guessed type int find_out_for_sub_1001C140_dword_1006ACC4;

//----- (1001C1A0) --------------------------------------------------------
int sub_1001C1A0()
{
  _DWORD *v0; // eax
  int result; // eax

  v0 = operator new(0xCu);
  if ( v0 )
  {
    *v0 = 0;
    v0[1] = 0;
    v0[2] = 0;
  }
  else
  {
    v0 = 0;
  }
  find_out_for_sub_1001C140_dword_1006ACC4 = (int)v0;
  *v0 = 56;
  *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) = operator new(4 * *(_DWORD *)find_out_for_sub_1001C140_dword_1006ACC4);
  *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) = operator new(4 * *(_DWORD *)find_out_for_sub_1001C140_dword_1006ACC4);
  **(_DWORD **)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) = 0;
  **(_DWORD **)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) = 0;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 4) = 4293340;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 4) = -100;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 8) = 4297789;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 8) = -388;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 12) = 4298016;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 12) = -384;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 16) = 4339805;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 16) = -612;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 20) = 4343488;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 20) = -624;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 24) = 4383737;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 24) = -623;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 28) = 4384293;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 28) = -681;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 32) = 4384476;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 32) = -680;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 36) = 4423200;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 36) = -672;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 40) = 4437118;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 40) = -817;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 44) = 4438236;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 44) = -820;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 48) = 4438806;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 48) = -810;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 52) = 4440878;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 52) = -818;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 56) = 4441614;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 56) = -943;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 60) = 4442420;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 60) = -944;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 64) = 4446705;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 64) = -1091;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 68) = 4446725;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 68) = -1089;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 72) = 4446753;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 72) = -1093;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 76) = 4446784;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 76) = -1103;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 80) = 4446813;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 80) = -1100;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 84) = 4446837;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 84) = -1113;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 88) = 4446960;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 88) = -1120;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 92) = 4654158;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 92) = -1125;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 96) = 4655028;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 96) = -1124;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 100) = 4663824;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 100) = -1120;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 104) = 4664030;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 104) = -1122;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 108) = 4664084;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 108) = -1116;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 112) = 4664240;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 112) = -1113;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 116) = 4664592;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 116) = -1092;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 120) = 4666304;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 120) = -1088;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 124) = 4680945;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 124) = -1167;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 128) = 4681256;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 128) = -1168;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 132) = 4728237;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 132) = -1169;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 136) = 4728382;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 136) = -1170;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 140) = 4729408;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 140) = -1172;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 144) = 4740400;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 144) = -1184;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 148) = 4762421;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 148) = -1176;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 152) = 4771100;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 152) = -1184;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 156) = 4813289;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 156) = -1290;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 160) = 4813424;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 160) = -1296;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 164) = 4911572;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 164) = -1316;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 168) = 4911855;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 168) = -1332;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 172) = 4912064;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 172) = -1328;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 176) = 5057391;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 176) = -1399;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 180) = 5057567;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 180) = -1328;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 184) = 5223580;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 184) = -192;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 188) = 5228948;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 188) = -200;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 192) = 5237668;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 192) = -240;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 196) = 5242880;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 196) = -244;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 200) = 5266944;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 200) = -240;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 204) = 5636096;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 204) = -32;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 208) = 5701632;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 208) = 0;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 212) = 5767168;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 212) = -32;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 216) = 6684672;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 216) = -32;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 220) = 7077888;
  result = *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8);
  *(_DWORD *)(result + 220) = 0;
  return result;
}
// 1006ACC4: using guessed type int find_out_for_sub_1001C140_dword_1006ACC4;

//----- (1001C950) --------------------------------------------------------
int sub_1001C950()
{
  _DWORD *v0; // eax
  int result; // eax

  v0 = operator new(0xCu);
  if ( v0 )
  {
    *v0 = 0;
    v0[1] = 0;
    v0[2] = 0;
  }
  else
  {
    v0 = 0;
  }
  find_out_for_sub_1001C140_dword_1006ACC4 = (int)v0;
  *v0 = 47;
  *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) = operator new(4 * *(_DWORD *)find_out_for_sub_1001C140_dword_1006ACC4);
  *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) = operator new(4 * *(_DWORD *)find_out_for_sub_1001C140_dword_1006ACC4);
  **(_DWORD **)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) = 0;
  **(_DWORD **)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) = 0;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 4) = 4383737;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 4) = 1;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 8) = 4384320;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 8) = -57;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 12) = 4384476;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 12) = -56;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 16) = 4423200;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 16) = -48;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 20) = 4437118;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 20) = -193;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 24) = 4438236;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 24) = -196;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 28) = 4438806;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 28) = -186;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 32) = 4440800;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 32) = -191;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 36) = 4440859;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 36) = -194;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 40) = 4441614;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 40) = -319;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 44) = 4442420;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 44) = -320;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 48) = 4446733;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 48) = -465;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 52) = 4446813;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 52) = -486;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 56) = 4446837;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 56) = -489;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 60) = 4446960;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 60) = -496;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 64) = 4507875;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 64) = -492;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 68) = 4507965;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 68) = -424;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 72) = 4535888;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 72) = -432;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 76) = 4664035;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 76) = -434;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 80) = 4664084;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 80) = -428;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 84) = 4664240;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 84) = -425;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 88) = 4664544;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 88) = -407;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 92) = 4664592;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 92) = -404;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 96) = 4666304;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 96) = -400;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 100) = 4673648;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 100) = -396;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 104) = 4679520;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 104) = -400;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 108) = 4680945;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 108) = -479;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 112) = 4681256;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 112) = -480;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 116) = 4728237;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 116) = -481;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 120) = 4728382;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 120) = -482;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 124) = 4729081;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 124) = -483;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 128) = 4729182;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 128) = -482;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 132) = 4729264;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 132) = -483;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 136) = 4729408;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 136) = -484;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 140) = 4740400;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 140) = -496;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 144) = 4762422;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 144) = -488;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 148) = 4771100;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 148) = -496;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 152) = 4813289;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 152) = -602;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 156) = 4813347;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 156) = -605;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 160) = 4813424;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 160) = -608;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 164) = 4911572;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 164) = -628;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 168) = 4911855;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 168) = -644;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 172) = 4912064;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 172) = -640;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 176) = 5223580;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 176) = -160;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 180) = 5237572;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 180) = -208;
  result = *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4);
  *(_DWORD *)(result + 184) = 5636096;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 184) = 0;
  return result;
}
// 1006ACC4: using guessed type int find_out_for_sub_1001C140_dword_1006ACC4;

//----- (1001CFD0) --------------------------------------------------------
int sub_1001CFD0()
{
  _DWORD *v0; // eax
  int result; // eax

  v0 = operator new(0xCu);
  if ( v0 )
  {
    *v0 = 0;
    v0[1] = 0;
    v0[2] = 0;
  }
  else
  {
    v0 = 0;
  }
  find_out_for_sub_1001C140_dword_1006ACC4 = (int)v0;
  *v0 = 6;
  *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) = operator new(4 * *(_DWORD *)find_out_for_sub_1001C140_dword_1006ACC4);
  *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) = operator new(4 * *(_DWORD *)find_out_for_sub_1001C140_dword_1006ACC4);
  **(_DWORD **)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) = 0;
  **(_DWORD **)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) = 0;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 4) = 4507961;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 4) = 72;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 8) = 4535888;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 8) = 64;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 12) = 4673648;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 12) = 68;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 16) = 4679520;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8) + 16) = 64;
  *(_DWORD *)(*(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 4) + 20) = 5177344;
  result = *(_DWORD *)(find_out_for_sub_1001C140_dword_1006ACC4 + 8);
  *(_DWORD *)(result + 20) = 0;
  return result;
}
// 1006ACC4: using guessed type int find_out_for_sub_1001C140_dword_1006ACC4;

//----- (1001D170) --------------------------------------------------------
BOOL __cdecl sub_1001D170(DWORD flOldProtect, char a2)
{
  char *v2; // esi

  v2 = (char *)F_ptrCorrection_(flOldProtect);
  VirtualProtect(v2, 2u, 0x40u, &flOldProtect);
  *v2 = a2;
  return VirtualProtect(v2, 2u, flOldProtect, &flOldProtect);
}

//----- (1001D1B0) --------------------------------------------------------
char *__cdecl sub_1001D1B0(char *a1, unsigned int a2, char *a3, int a4, char *a5, int a6)
{
  char *result; // eax
  char *v7; // edx

  result = a3;
  if ( (signed int)a3 > 0 )
  {
    v7 = a5;
    result = a1;
    do
    {
      qmemcpy(v7, result, a2);
      result += a4;
      v7 += a6;
      --a3;
    }
    while ( a3 );
  }
  return result;
}

//----- (1001D200) --------------------------------------------------------
int __cdecl sub_1001D200(_BYTE *a1, int a2, int a3, int a4, int a5, int a6)
{
  int result; // eax
  int v7; // ebx
  _BYTE *v8; // esi
  _BYTE *v9; // eax
  int v10; // edi

  result = a3;
  if ( a3 > 0 )
  {
    v7 = a5;
    v8 = a1;
    do
    {
      if ( a2 > 0 )
      {
        v9 = v8;
        v10 = a2;
        do
        {
          if ( *v9 )
            v9[v7 - (_DWORD)v8] = *v9;
          ++v9;
          --v10;
        }
        while ( v10 );
      }
      v8 += a4;
      v7 += a6;
      result = a3-- - 1;
    }
    while ( a3 );
  }
  return result;
}

//----- (1001D260) --------------------------------------------------------
int __cdecl sub_1001D260(int a1, int a2, int a3, int a4, int a5, int a6, int a7, float a8, char a9)
{
  double v9; // st7
  double v10; // st7
  double v11; // st7
  double v12; // st6
  double v13; // st4
  int v14; // ebx
  double v15; // st7
  int v16; // esi
  double v17; // st7
  double v18; // st7
  unsigned __int64 v19; // rax
  double v20; // st6
  int i; // edi
  unsigned __int64 v22; // rax
  float v24; // [esp+0h] [ebp-10h]
  float v25; // [esp+4h] [ebp-Ch]
  int v26; // [esp+4h] [ebp-Ch]
  float v27; // [esp+8h] [ebp-8h]
  float v28; // [esp+8h] [ebp-8h]
  float v29; // [esp+Ch] [ebp-4h]
  float v30; // [esp+Ch] [ebp-4h]
  int v31; // [esp+18h] [ebp+8h]
  int v32; // [esp+2Ch] [ebp+1Ch]
  float v33; // [esp+30h] [ebp+20h]

  v9 = (double)a6;
  v27 = v9;
  v25 = v9;
  v10 = (double)a7;
  v29 = v10;
  v24 = v10;
  if ( LOBYTE(a8) )
  {
    v11 = (double)a2;
    v12 = (double)a3;
    v13 = v27 / v29;
    if ( v13 <= v11 / v12 )
    {
      if ( v13 < v11 / v12 )
      {
        v24 = v12 / v11 * v25;
        if ( a9 )
        {
          v14 = a6 * ((signed int)(a7 - (unsigned __int64)v24) / 2) + a5;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v25 = v11 / v12 * v24;
      if ( a9 )
      {
        v14 = (signed int)(a6 - (unsigned __int64)v25) / 2 + a5;
        goto LABEL_9;
      }
    }
  }
  v14 = a5;
LABEL_9:
  v15 = (double)a2;
  v16 = 0;
  v33 = v15;
  v30 = v15 / v25;
  v17 = (double)a3;
  *(float *)&v31 = v17;
  v28 = v17 / v24;
  v18 = 0.0;
  v19 = (unsigned __int64)v24;
  if ( (signed int)v19 > 0 )
  {
    v32 = (unsigned __int64)v25;
    v26 = v19;
    do
    {
      v20 = 0.0;
      for ( i = 0; i < v32; ++i )
      {
        v22 = (unsigned __int64)v20;
        v20 = v20 + v30;
        *(_BYTE *)(i + v14) = *(_BYTE *)(v16 + v22 + a1);
        if ( v20 >= v33 )
          v20 = v33 - 1.0;
      }
      v18 = v18 + v28;
      if ( (signed int)(unsigned __int64)v18 >= a3 )
        v18 = *(float *)&v31 - 1.0;
      v16 = a4 * (unsigned __int64)v18;
      v14 += a6;
      LODWORD(v19) = v26-- - 1;
    }
    while ( v26 );
  }
  return v19;
}

//----- (1001D410) --------------------------------------------------------
signed int F_initFunc1_TeamChecker()
{
  signed int result; // eax

  if ( MEMORY[0x469A99] == 5265236 )
  {
    result = 1;
    dword_1006ACC0 = (int)"TEAMX 1.2";
    dword_1006ACBC = 1;
  }
  else if ( MEMORY[0x469639] == 5264992 )
  {
    dword_1006ACC0 = (int)"US 1.1";
    dword_1006ACBC = 2;
    sub_1001C1A0();
    result = dword_1006ACBC;
  }
  else if ( MEMORY[0x4698E9] == 5265028 )
  {
    dword_1006ACC0 = (int)"Polish 1.2";
    dword_1006ACBC = 3;
    sub_1001C950();
    result = dword_1006ACBC;
  }
  else if ( MEMORY[0x469AD9] == 5265236 )
  {
    dword_1006ACC0 = (int)"Collection Edition 1.2";
    dword_1006ACBC = 4;
    sub_1001CFD0();
    result = dword_1006ACBC;
  }
  else
  {
    result = 0;
    dword_1006ACC0 = (int)"UNKNOWN";
    dword_1006ACBC = 0;
  }
  return result;
}
// 1006ACBC: using guessed type int dword_1006ACBC;
// 1006ACC0: using guessed type int dword_1006ACC0;

//----- (1001D4D0) --------------------------------------------------------
_DWORD *__cdecl sub_1001D4D0(const void *a1, int a2, int a3, int a4)
{
  void *v4; // eax
  const void *v6; // [esp+Ch] [ebp-10h]
  int v7; // [esp+10h] [ebp-Ch]
  int v8; // [esp+14h] [ebp-8h]
  void *v9; // [esp+18h] [ebp-4h]

  v6 = a1;
  v7 = a4;
  v8 = a2;
  v4 = operator new(a4);
  qmemcpy(v4, a1, a4);
  v9 = v4;
  return sub_100226D0(&unk_1006ACC8, &v6);
}

//----- (1001D530) --------------------------------------------------------
int __cdecl F_writeMem32(DWORD addr, int old32, int new32)
{
  int *v3; // eax
  int v4; // ebx
  int *v5; // esi
  int v6; // edi
  char *v7; // ST08_4
  char *v8; // eax
  int result; // eax
  DWORD v10; // ST08_4

  v3 = (int *)F_ptrCorrection_(addr);
  v4 = old32;
  v5 = v3;
  v6 = -4 - (_DWORD)v3 + new32;
  if ( *v3 == old32 )
  {
    VirtualProtect(v3, 5u, 0x40u, &addr);
    v10 = addr;
    *v5 = v6;
    result = VirtualProtect(v5, 5u, v10, &addr);
  }
  else
  {
    v7 = sub_10002640(-4 - (_DWORD)v3 + new32);
    v8 = sub_10002640(v4);
    result = (int)sub_1001D4D0(v5, (int)v8, (int)v7, 4);
  }
  return result;
}

//----- (1001D5B0) --------------------------------------------------------
int __cdecl F_writeMem24(DWORD addr, int old24, int new24)
{
  int v3; // edi
  int *v4; // esi
  int v5; // ebp
  int v6; // edi
  char *v7; // ST08_4
  char *v8; // eax
  int result; // eax
  DWORD v10; // ST08_4

  v3 = old24 + addr + 4;
  v4 = (int *)F_ptrCorrection_(addr);
  v5 = -4 - (_DWORD)v4 + F_ptrCorrection_(new24);
  v6 = -4 - (_DWORD)v4 + F_ptrCorrection_(v3);
  if ( *v4 == v6 )
  {
    VirtualProtect(v4, 5u, 0x40u, &addr);
    v10 = addr;
    *v4 = v5;
    result = VirtualProtect(v4, 5u, v10, &addr);
  }
  else
  {
    v7 = sub_10002640(v5);
    v8 = sub_10002640(v6);
    result = (int)sub_1001D4D0(v4, (int)v8, (int)v7, 4);
  }
  return result;
}

//----- (1001D6D0) --------------------------------------------------------
int __cdecl F_writeMemUnk(DWORD addr, int oldBytes, int newBytes)
{
  int *v3; // eax
  int v4; // edi
  int *v5; // esi
  char *v6; // ST08_4
  char *v7; // eax
  int result; // eax
  DWORD v9; // ST08_4

  v3 = (int *)F_ptrCorrection_(addr);
  v4 = oldBytes;
  v5 = v3;
  if ( *v3 == oldBytes )
  {
    VirtualProtect(v3, 5u, 0x40u, &addr);
    v9 = addr;
    *v5 = newBytes;
    result = VirtualProtect(v5, 5u, v9, &addr);
  }
  else
  {
    v6 = sub_10002640(newBytes);
    v7 = sub_10002640(v4);
    result = (int)sub_1001D4D0(v5, (int)v7, (int)v6, 4);
  }
  return result;
}

//----- (1001D740) --------------------------------------------------------
int __cdecl func_writeMem16(int addr, WORD old16, __int16 new16)
{
  __int16 *v3; // eax
  WORD v4; // di
  __int16 *v5; // esi
  char *v6; // ST08_4
  char *v7; // eax
  int result; // eax
  DWORD v9; // ST08_4

  v3 = (__int16 *)F_ptrCorrection_(addr);
  v4 = old16;
  v5 = v3;
  if ( *v3 == old16 )
  {
    VirtualProtect(v3, 3u, 0x40u, (PDWORD)&old16);
    v9 = old16;
    *v5 = new16;
    result = VirtualProtect(v5, 3u, v9, (PDWORD)&old16);
  }
  else
  {
    v6 = sub_10002640((unsigned __int16)new16);
    v7 = sub_10002640(v4);
    result = (int)sub_1001D4D0(v5, (int)v7, (int)v6, 2);
  }
  return result;
}

//----- (1001D7C0) --------------------------------------------------------
int __cdecl F_writeMem8(int addr, DWORD old8, char new8)
{
  char *v3; // eax
  unsigned __int8 v4; // bl
  char *v5; // esi
  char *v6; // ST0C_4
  char *v7; // eax
  int result; // eax
  DWORD v9; // ST08_4

  v3 = (char *)F_ptrCorrection_(addr);
  v4 = old8;
  v5 = v3;
  if ( *v3 == (_BYTE)old8 )
  {
    VirtualProtect(v3, 2u, 0x40u, &old8);
    v9 = old8;
    *v5 = new8;
    result = VirtualProtect(v5, 2u, v9, &old8);
  }
  else
  {
    v6 = sub_10002640((unsigned __int8)new8);
    v7 = sub_10002640(v4);
    result = (int)sub_1001D4D0(v5, (int)v7, (int)v6, 1);
  }
  return result;
}

//----- (1001D840) --------------------------------------------------------
void F_initFunc31_end_err_chk()
{
  int v0; // ebp
  char *v1; // esi
  const char *v2; // ST08_4
  int v3; // eax
  int v4; // eax
  char *v5; // esi
  int v6; // esi
  _BYTE *v7; // eax
  char *v8; // esi
  int *v9; // esi
  _BYTE *v10; // eax
  int v11; // ecx
  int v12; // ecx
  char *v13; // esi
  int v14; // eax
  char v15; // cl
  int v16; // eax
  signed int v17; // edi
  std::ios_base *v18; // ecx
  int v19; // eax
  char *v20; // eax
  unsigned int v21; // esi
  int v22; // edi
  _BYTE *v23; // eax
  int v24; // edx
  _BYTE *v25; // eax
  int v26; // eax
  signed int v27; // esi
  std::ios_base *v28; // ecx
  int v29; // eax
  char *v30; // eax
  unsigned int v31; // esi
  int v32; // edi
  _BYTE *v33; // eax
  int v34; // edx
  _BYTE *v35; // eax
  int v36; // eax
  signed int v37; // esi
  std::ios_base *v38; // ecx
  int v39; // eax
  int v40; // eax
  signed int v41; // esi
  std::ios_base *v42; // ecx
  int v43; // eax
  const char *v44; // [esp-10h] [ebp-C0h]
  const char *v45; // [esp-10h] [ebp-C0h]
  unsigned int v46; // [esp+4h] [ebp-ACh]
  char v47; // [esp+8h] [ebp-A8h]
  int v48; // [esp+10h] [ebp-A0h]
  char v49[8]; // [esp+18h] [ebp-98h]
  int v50; // [esp+20h] [ebp-90h]
  int v51; // [esp+38h] [ebp-78h]
  int v52; // [esp+6Ch] [ebp-44h]
  int (__thiscall **v53)(void *, char); // [esp+70h] [ebp-40h]
  int v54; // [esp+ACh] [ebp-4h]

  v0 = 0;
  if ( dword_1006ACCC && (unsigned int)((dword_1006ACD0 - (signed int)dword_1006ACCC) >> 4) > 0 )
  {
    MessageBoxA(0, "Memory Mismatch check f1_res_error.log for details", "Hi-Res patch Error", 0x10u);
    sub_10022520(&v47, "f1_res_error.log", 2, 438, 1);
    v54 = 0;
    if ( v52 )
    {
      sub_1001F760((char *)&v48, 0xAu);
      sub_1001E820((char *)&v48);
      v1 = (char *)sub_1001F020((int)&v48, "Fallout Hi-Res Patch Error Log.");
      sub_1001F760(v1, 0xAu);
      sub_1001E820(v1);
      sub_1001F760((char *)&v48, 0xAu);
      sub_1001E820((char *)&v48);
      v2 = (const char *)dword_1006ACC0;
      v3 = sub_1001F020((int)&v48, "falloutw.exe version: ");
      v4 = sub_1001F020(v3, v2);
      v5 = (char *)sub_1001F020(v4, ".");
      sub_1001F760(v5, 0xAu);
      sub_1001E820(v5);
      if ( dword_1006ACCC )
        v6 = (dword_1006ACD0 - (signed int)dword_1006ACCC) >> 4;
      else
        v6 = 0;
      sub_1001F760((char *)&v48, 0xAu);
      sub_1001E820((char *)&v48);
      v7 = sub_1001F5F0(&v48, v6);
      v8 = (char *)sub_1001F020((int)v7, " memory mismatch error(s) encountered.");
      sub_1001F760(v8, 0xAu);
      sub_1001E820(v8);
      sub_1001F760(v8, 0xAu);
      sub_1001E820(v8);
      sub_1001F760(v8, 0xAu);
      sub_1001E820(v8);
      v46 = 0;
      while ( dword_1006ACCC && v46 < (dword_1006ACD0 - (signed int)dword_1006ACCC) >> 4 )
      {
        v9 = (int *)((char *)dword_1006ACCC + v0);
        v10 = (_BYTE *)sub_1001F020((int)&v48, "Memory offset:  0x");
        if ( v10 )
          v11 = (int)&v10[*(_DWORD *)(*(_DWORD *)v10 + 4)];
        else
          v11 = 0;
        *(_DWORD *)(v11 + 16) |= 4u;
        if ( v10 )
          v12 = (int)&v10[*(_DWORD *)(*(_DWORD *)v10 + 4)];
        else
          v12 = 0;
        *(_DWORD *)(v12 + 16) = *(_DWORD *)(v12 + 16) & 0xFFFFF9FF | 0x800;
        v13 = sub_1001F5F0(v10, *v9);
        sub_1001F760(v13, 0xAu);
        v14 = *(_DWORD *)(*(_DWORD *)v13 + 4);
        v15 = v13[v14 + 8];
        v16 = (int)&v13[v14];
        v17 = 0;
        if ( !(v15 & 6) && (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(v16 + 40) + 44))(*(_DWORD *)(v16 + 40)) == -1 )
          v17 = 4;
        v18 = (std::ios_base *)&v13[*(_DWORD *)(*(_DWORD *)v13 + 4)];
        if ( v17 )
        {
          v19 = v17 | *((_DWORD *)v18 + 2);
          if ( !*((_DWORD *)v18 + 10) )
            v19 |= 4u;
          std::ios_base::clear(v18, v19, 0);
        }
        sub_1001F020((int)&v48, "Expected data:  ");
        v20 = (char *)dword_1006ACCC;
        v21 = 0;
        if ( *(_DWORD *)((char *)dword_1006ACCC + v0 + 4) )
        {
          do
          {
            v22 = (int)&v20[v0];
            if ( *(_BYTE *)(v21 + *(_DWORD *)&v20[v0 + 8]) >= 0x10u )
            {
              *(int *)((char *)&v48 + *(_DWORD *)(v48 + 4) + 16) = *(int *)((char *)&v50 + *(_DWORD *)(v48 + 4)) & 0xFFFFF9FF | 0x800;
              v44 = " ";
              v25 = sub_1001F480(&v48, *(unsigned __int8 *)(*(_DWORD *)(v22 + 8) + v21));
            }
            else
            {
              v23 = (_BYTE *)sub_1001F020((int)&v48, "0");
              if ( v23 )
                v24 = (int)&v23[*(_DWORD *)(*(_DWORD *)v23 + 4)];
              else
                v24 = 0;
              *(_DWORD *)(v24 + 16) = *(_DWORD *)(v24 + 16) & 0xFFFFF9FF | 0x800;
              v44 = " ";
              v25 = sub_1001F480(v23, *(unsigned __int8 *)(*(_DWORD *)(v22 + 8) + v21));
            }
            sub_1001F020((int)v25, v44);
            v20 = (char *)dword_1006ACCC;
            ++v21;
          }
          while ( v21 < *(_DWORD *)((char *)dword_1006ACCC + v0 + 4) );
        }
        sub_1001F760((char *)&v48, 0xAu);
        v26 = *(_DWORD *)(v48 + 4);
        v27 = 0;
        if ( !(v49[v26] & 6)
          && (*(int (__thiscall **)(_DWORD))(**(_DWORD **)((char *)&v51 + v26) + 44))(*(int *)((char *)&v51 + v26)) == -1 )
        {
          v27 = 4;
        }
        v28 = (std::ios_base *)((char *)&v48 + *(_DWORD *)(v48 + 4));
        if ( v27 )
        {
          v29 = v27 | *((_DWORD *)v28 + 2);
          if ( !*((_DWORD *)v28 + 10) )
            v29 |= 4u;
          std::ios_base::clear(v28, v29, 0);
        }
        sub_1001F020((int)&v48, "Found data:     ");
        v30 = (char *)dword_1006ACCC;
        v31 = 0;
        if ( *(_DWORD *)((char *)dword_1006ACCC + v0 + 4) )
        {
          do
          {
            v32 = (int)&v30[v0];
            if ( *(_BYTE *)(v31 + *(_DWORD *)&v30[v0 + 12]) >= 0x10u )
            {
              *(int *)((char *)&v48 + *(_DWORD *)(v48 + 4) + 16) = *(int *)((char *)&v50 + *(_DWORD *)(v48 + 4)) & 0xFFFFF9FF | 0x800;
              v45 = " ";
              v35 = sub_1001F480(&v48, *(unsigned __int8 *)(*(_DWORD *)(v32 + 12) + v31));
            }
            else
            {
              v33 = (_BYTE *)sub_1001F020((int)&v48, "0");
              if ( v33 )
                v34 = (int)&v33[*(_DWORD *)(*(_DWORD *)v33 + 4)];
              else
                v34 = 0;
              *(_DWORD *)(v34 + 16) = *(_DWORD *)(v34 + 16) & 0xFFFFF9FF | 0x800;
              v45 = " ";
              v35 = sub_1001F480(v33, *(unsigned __int8 *)(*(_DWORD *)(v32 + 12) + v31));
            }
            sub_1001F020((int)v35, v45);
            v30 = (char *)dword_1006ACCC;
            ++v31;
          }
          while ( v31 < *(_DWORD *)((char *)dword_1006ACCC + v0 + 4) );
        }
        sub_1001F760((char *)&v48, 0xAu);
        v36 = *(_DWORD *)(v48 + 4);
        v37 = 0;
        if ( !(v49[v36] & 6)
          && (*(int (__thiscall **)(_DWORD))(**(_DWORD **)((char *)&v51 + v36) + 44))(*(int *)((char *)&v51 + v36)) == -1 )
        {
          v37 = 4;
        }
        v38 = (std::ios_base *)((char *)&v48 + *(_DWORD *)(v48 + 4));
        if ( v37 )
        {
          v39 = v37 | *((_DWORD *)v38 + 2);
          if ( !*((_DWORD *)v38 + 10) )
            v39 |= 4u;
          std::ios_base::clear(v38, v39, 0);
        }
        sub_1001F760((char *)&v48, 0xAu);
        v40 = *(_DWORD *)(v48 + 4);
        v41 = 0;
        if ( !(v49[v40] & 6)
          && (*(int (__thiscall **)(_DWORD))(**(_DWORD **)((char *)&v51 + v40) + 44))(*(int *)((char *)&v51 + v40)) == -1 )
        {
          v41 = 4;
        }
        v42 = (std::ios_base *)((char *)&v48 + *(_DWORD *)(v48 + 4));
        if ( v41 )
        {
          v43 = v41 | *((_DWORD *)v42 + 2);
          if ( !*((_DWORD *)v42 + 10) )
            v43 |= 4u;
          std::ios_base::clear(v42, v43, 0);
        }
        ++v46;
        v0 += 16;
      }
    }
    else
    {
      MessageBoxA(0, "Can't create f1_res_error.log", "File Error", 0x10u);
    }
    v54 = -1;
    sub_10022620(&v53);
    v53 = &off_10036100;
    std::ios_base::~ios_base((std::ios_base *)&v53);
  }
}
// 10036100: using guessed type int (__thiscall *off_10036100)(void *, char);
// 1006ACC0: using guessed type int dword_1006ACC0;
// 1006ACD0: using guessed type int dword_1006ACD0;
// 1001D840: using guessed type char var_98[8];

//----- (1001DD90) --------------------------------------------------------
int __thiscall sub_1001DD90(std::ios_base *this)
{
  *(_DWORD *)this = &off_10036100;
  return std::ios_base::~ios_base(this);
}
// 10036100: using guessed type int (__thiscall *off_10036100)(void *, char);

//----- (1001DDB0) --------------------------------------------------------
int __thiscall sub_1001DDB0(_DWORD *this)
{
  int v1; // eax
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 3) + 4) - 12) = &off_10036108;
  if ( this == (_DWORD *)12 )
    v1 = 0;
  else
    v1 = (int)(this - 1);
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v1 + 4) + v1) = &off_100360FC;
  result = *(this - 3);
  *(_DWORD *)((char *)this + *(_DWORD *)(result + 4) - 12) = off_10036104;
  return result;
}
// 100360FC: using guessed type int (__stdcall *off_100360FC)(char);
// 10036104: using guessed type int (__stdcall *off_10036104[2])(char);
// 10036108: using guessed type int (__stdcall *off_10036108)(char);

//----- (1001DDF0) --------------------------------------------------------
void *__thiscall sub_1001DDF0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_1001DD90((std::ios_base *)this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1001DE10) --------------------------------------------------------
_DWORD *__thiscall sub_1001DE10(_DWORD **this, _DWORD *a2)
{
  int v2; // esi
  _DWORD *v3; // edi
  unsigned int v4; // eax

  v2 = *this[14];
  v3 = a2;
  *a2 = v2;
  std::_Lockit::_Lockit((std::_Lockit *)&a2, 0);
  v4 = *(_DWORD *)(v2 + 4);
  if ( v4 < 0xFFFFFFFF )
    *(_DWORD *)(v2 + 4) = v4 + 1;
  std::_Lockit::~_Lockit((std::_Lockit *)&a2);
  return v3;
}

//----- (1001DE70) --------------------------------------------------------
_DWORD *__cdecl sub_1001DE70(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result; // eax
  _DWORD *v4; // edi

  for ( result = a1; result != a2; v4[3] = a3[3] )
  {
    v4 = result;
    *result = *a3;
    result[1] = a3[1];
    result[2] = a3[2];
    result += 4;
  }
  return result;
}

//----- (1001DEB0) --------------------------------------------------------
_DWORD *__cdecl sub_1001DEB0(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3; // ecx
  _DWORD *result; // eax

  v3 = a2;
  for ( result = a3; v3 != a1; result[3] = v3[3] )
  {
    v3 -= 4;
    result -= 4;
    *result = *v3;
    result[1] = v3[1];
    result[2] = v3[2];
  }
  return result;
}

//----- (1001DEF0) --------------------------------------------------------
_DWORD *__thiscall sub_1001DEF0(_DWORD *this, int a2, char a3, int a4)
{
  _DWORD *v4; // esi
  _Ctypevec *v5; // eax
  unsigned int *v6; // edx
  int v7; // eax
  char v9; // [esp+Ch] [ebp-90h]
  char v10; // [esp+1Ch] [ebp-80h]
  int v11; // [esp+98h] [ebp-4h]

  v4 = this;
  this[1] = a4;
  v11 = 0;
  *this = &off_1003610C;
  std::_Locinfo::_Locinfo((std::_Locinfo *)&v10, "C");
  v5 = _Getctype((_Ctypevec *)&v9);
  v6 = v4 + 2;
  *v6 = v5->_Hand;
  v6[1] = v5->_Page;
  v6[2] = (unsigned int)v5->_Table;
  v6[3] = v5->_Delfl;
  std::_Locinfo::~_Locinfo((std::_Locinfo *)&v10);
  if ( a2 )
  {
    v7 = v4[5];
    if ( v7 <= 0 )
    {
      if ( v7 < 0 )
        j_j__free((void *)v4[4]);
    }
    else
    {
      free((void *)v4[4]);
    }
    v4[4] = a2;
    v4[5] = -(a3 != 0);
  }
  return v4;
}
// 1003610C: using guessed type int (__thiscall *off_1003610C)(void *, char);

//----- (1001DFD0) --------------------------------------------------------
int __thiscall sub_1001DFD0(int this, unsigned __int8 a2)
{
  return _Tolower(a2, (const _Ctypevec *)(this + 8));
}

//----- (1001DFF0) --------------------------------------------------------
_BYTE *__thiscall sub_1001DFF0(char *this, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3; // esi
  const _Ctypevec *v4; // edi

  v3 = a2;
  if ( a2 != a3 )
  {
    v4 = (const _Ctypevec *)(this + 8);
    do
    {
      *v3 = _Tolower((unsigned __int8)*v3, v4);
      ++v3;
    }
    while ( v3 != a3 );
  }
  return v3;
}

//----- (1001E020) --------------------------------------------------------
int __thiscall sub_1001E020(int this, unsigned __int8 a2)
{
  return _Toupper(a2, (const _Ctypevec *)(this + 8));
}

//----- (1001E040) --------------------------------------------------------
_BYTE *__thiscall sub_1001E040(char *this, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3; // esi
  const _Ctypevec *v4; // edi

  v3 = a2;
  if ( a2 != a3 )
  {
    v4 = (const _Ctypevec *)(this + 8);
    do
    {
      *v3 = _Toupper((unsigned __int8)*v3, v4);
      ++v3;
    }
    while ( v3 != a3 );
  }
  return v3;
}

//----- (1001E080) --------------------------------------------------------
int __stdcall sub_1001E080(const void *a1, int a2, void *a3)
{
  int result; // eax

  result = a2;
  qmemcpy(a3, a1, a2 - (_DWORD)a1);
  return result;
}

//----- (1001E0C0) --------------------------------------------------------
int __stdcall sub_1001E0C0(const void *a1, int a2, int a3, void *a4)
{
  int result; // eax

  result = a2;
  qmemcpy(a4, a1, a2 - (_DWORD)a1);
  return result;
}

//----- (1001E0F0) --------------------------------------------------------
signed int __cdecl sub_1001E0F0(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax

  if ( a1 && !*a1 )
  {
    v1 = operator new(0x18u);
    if ( v1 )
      v2 = sub_1001DEF0(v1, 0, 0, 0);
    else
      v2 = 0;
    *a1 = v2;
  }
  return 2;
}

//----- (1001E160) --------------------------------------------------------
void *__thiscall sub_1001E160(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_1001E180(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1001E180) --------------------------------------------------------
void __thiscall sub_1001E180(void *this)
{
  _DWORD *v1; // esi
  int v2; // eax

  v1 = this;
  v2 = *((_DWORD *)this + 5);
  *(_DWORD *)this = &off_1003610C;
  if ( v2 <= 0 )
  {
    if ( v2 < 0 )
      j_j__free(*((void **)this + 4));
    *v1 = &std::locale::facet::`vftable';
  }
  else
  {
    free(*((void **)this + 4));
    *v1 = &std::locale::facet::`vftable';
  }
}
// 1003610C: using guessed type int (__thiscall *off_1003610C)(void *, char);
// 1003873C: using guessed type void *std::locale::facet::`vftable';

//----- (1001E1C0) --------------------------------------------------------
int __thiscall sub_1001E1C0(_DWORD *this)
{
  _DWORD *v1; // ebx
  int *v2; // edi
  int v3; // esi
  unsigned int v4; // eax
  void (__thiscall ***v5)(_DWORD, signed int); // esi
  char v7; // [esp+8h] [ebp-4h]

  v1 = this;
  v2 = (int *)this[14];
  *this = &off_10036134;
  if ( v2 )
  {
    v3 = *v2;
    if ( *v2 )
    {
      std::_Lockit::_Lockit((std::_Lockit *)&v7, 0);
      v4 = *(_DWORD *)(v3 + 4);
      if ( v4 && v4 < 0xFFFFFFFF )
        *(_DWORD *)(v3 + 4) = v4 - 1;
      v5 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v3 + 4) != 0 ? 0 : v3);
      std::_Lockit::~_Lockit((std::_Lockit *)&v7);
      if ( v5 )
        (**v5)(v5, 1);
    }
    j__free(v2);
  }
  return std::_Mutex::~_Mutex((std::_Mutex *)(v1 + 1));
}
// 10036134: using guessed type int (__thiscall *off_10036134)(void *, char);

//----- (1001E230) --------------------------------------------------------
signed int __stdcall sub_1001E230(int a1)
{
  return -1;
}

//----- (1001E240) --------------------------------------------------------
signed int sub_1001E240()
{
  return -1;
}

//----- (1001E250) --------------------------------------------------------
void *__thiscall sub_1001E250(void *this, int a2, int a3)
{
  return this;
}

//----- (1001E260) --------------------------------------------------------
int sub_1001E260()
{
  return 0;
}

//----- (1001E2B0) --------------------------------------------------------
int __thiscall sub_1001E2B0(_DWORD **this, _BYTE *a2, int a3)
{
  int v3; // edi
  int result; // eax
  _DWORD **v5; // ebx
  _BYTE *v6; // ebp
  const void *v7; // esi
  signed int v8; // eax
  int v9; // eax
  int v10; // [esp+8h] [ebp-4h]

  v3 = a3;
  result = 0;
  v5 = this;
  v10 = 0;
  if ( a3 > 0 )
  {
    v6 = a2;
    do
    {
      v7 = (const void *)*v5[8];
      if ( v7 && (v8 = *v5[12], v8 > 0) )
      {
        if ( v3 < v8 )
          v8 = v3;
        qmemcpy(v6, v7, v8);
        v10 += v8;
        *v5[12] -= v8;
        v3 = a3 - v8;
        v6 += v8;
        a3 -= v8;
        *v5[8] += v8;
      }
      else
      {
        v9 = ((int (__thiscall *)(_DWORD **))(*v5)[5])(v5);
        if ( v9 == -1 )
          break;
        *v6++ = v9;
        --v3;
        ++v10;
        a3 = v3;
      }
    }
    while ( v3 > 0 );
    result = v10;
  }
  return result;
}

//----- (1001E350) --------------------------------------------------------
int __thiscall sub_1001E350(_DWORD **this, unsigned __int8 *a2, signed int a3)
{
  signed int v3; // esi
  int result; // eax
  _DWORD **v5; // ebx
  unsigned __int8 *v6; // ebp
  unsigned __int8 *v7; // edi
  signed int v8; // eax
  int v9; // [esp+8h] [ebp-4h]

  v3 = a3;
  result = 0;
  v5 = this;
  v9 = 0;
  if ( a3 > 0 )
  {
    v6 = a2;
    do
    {
      v7 = (unsigned __int8 *)*v5[9];
      if ( v7 && (v8 = *v5[13], v8 > 0) )
      {
        if ( v3 < v8 )
          v8 = v3;
        qmemcpy(v7, v6, v8);
        v9 += v8;
        *v5[13] -= v8;
        v6 += v8;
        a3 -= v8;
        *v5[9] += v8;
        v3 = a3;
      }
      else
      {
        if ( ((int (__thiscall *)(_DWORD **, _DWORD))(*v5)[1])(v5, *v6) == -1 )
          break;
        ++v6;
        --v3;
        ++v9;
        a3 = v3;
      }
    }
    while ( v3 > 0 );
    result = v9;
  }
  return result;
}

//----- (1001E400) --------------------------------------------------------
_DWORD *__stdcall sub_1001E400(_DWORD *a1, int a2, int a3, int a4)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = -1;
  a1[2] = dword_1006B2E0;
  a1[3] = dword_1006B2E4;
  a1[4] = dword_1006ACD8;
  return result;
}
// 1006ACD8: using guessed type int dword_1006ACD8;
// 1006B2E0: using guessed type int dword_1006B2E0;
// 1006B2E4: using guessed type int dword_1006B2E4;

//----- (1001E430) --------------------------------------------------------
_DWORD *__stdcall sub_1001E430(_DWORD *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  _DWORD *result; // eax

  result = a1;
  *a1 = -1;
  a1[2] = dword_1006B2E0;
  a1[3] = dword_1006B2E4;
  a1[4] = dword_1006ACD8;
  return result;
}
// 1006ACD8: using guessed type int dword_1006ACD8;
// 1006B2E0: using guessed type int dword_1006B2E0;
// 1006B2E4: using guessed type int dword_1006B2E4;

//----- (1001E460) --------------------------------------------------------
char *__thiscall sub_1001E460(std::ios_base *this, char a2)
{
  char *v2; // esi

  v2 = (char *)this - 4;
  *(_DWORD *)((char *)this + *(_DWORD *)(*((_DWORD *)this - 1) + 4) - 4) = &off_100360FC;
  sub_1001DD90(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}
// 100360FC: using guessed type int (__stdcall *off_100360FC)(char);

//----- (1001E490) --------------------------------------------------------
char *__thiscall sub_1001E490(std::ios_base *this, char a2)
{
  char *v2; // esi

  v2 = (char *)this - 8;
  *(_DWORD *)((char *)this + *(_DWORD *)(*((_DWORD *)this - 2) + 4) - 8) = off_10036104;
  sub_1001DD90(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}
// 10036104: using guessed type int (__stdcall *off_10036104[2])(char);

//----- (1001E4C0) --------------------------------------------------------
void *__thiscall sub_1001E4C0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_1001E1C0(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1001E4E0) --------------------------------------------------------
_DWORD *__thiscall sub_1001E4E0(std::ios_base *this, char a2)
{
  _DWORD *v2; // esi
  std::ios_base *v3; // edi

  v2 = (_DWORD *)((char *)this - 12);
  v3 = this;
  sub_1001DDB0(this);
  sub_1001DD90(v3);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1001E510) --------------------------------------------------------
_DWORD *__thiscall sub_1001E510(_DWORD *this)
{
  _DWORD *result; // eax

  this[8] = this + 6;
  this[9] = this + 7;
  this[4] = this + 2;
  this[12] = this + 10;
  this[5] = this + 3;
  this[13] = this + 11;
  this[3] = 0;
  *(_DWORD *)this[9] = 0;
  *(_DWORD *)this[13] = 0;
  *(_DWORD *)this[4] = 0;
  *(_DWORD *)this[8] = 0;
  result = (_DWORD *)this[12];
  *result = 0;
  return result;
}

//----- (1001E570) --------------------------------------------------------
std::locale::facet *__cdecl sub_1001E570(std::locale *a1)
{
  int v1; // edi
  std::locale::facet *v2; // esi
  unsigned int v3; // eax
  std::locale::facet *v5; // [esp+8h] [ebp-24h]
  char v6; // [esp+Ch] [ebp-20h]
  char v7; // [esp+10h] [ebp-1Ch]
  char v8; // [esp+14h] [ebp-18h]
  int v9; // [esp+28h] [ebp-4h]

  std::_Lockit::_Lockit((std::_Lockit *)&v7, 0);
  v1 = dword_1006ACE0;
  v9 = 0;
  v5 = (std::locale::facet *)dword_1006ACE0;
  if ( !dword_1006B2C8 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
    if ( !dword_1006B2C8 )
      dword_1006B2C8 = ++dword_1006B2C0;
    std::_Lockit::~_Lockit((std::_Lockit *)&v6);
  }
  v2 = std::locale::_Getfacet(a1, dword_1006B2C8);
  if ( !v2 )
  {
    if ( v1 )
    {
      v2 = (std::locale::facet *)v1;
    }
    else
    {
      if ( sub_1001E0F0(&v5) == -1 )
      {
        sub_10026182((exception *)&v8, "bad cast");
        _CxxThrowException(&v8, &_TI2_AVbad_cast__);
      }
      v2 = v5;
      dword_1006ACE0 = (int)v5;
      std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
      v3 = *((_DWORD *)v2 + 1);
      if ( v3 < 0xFFFFFFFF )
        *((_DWORD *)v2 + 1) = v3 + 1;
      std::_Lockit::~_Lockit((std::_Lockit *)&v6);
      std::locale::facet::_Register(v2);
    }
  }
  v9 = -1;
  std::_Lockit::~_Lockit((std::_Lockit *)&v7);
  return v2;
}
// 10026258: using guessed type void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD);
// 1003900C: using guessed type int _TI2_AVbad_cast__;
// 1006ACE0: using guessed type int dword_1006ACE0;
// 1006B2C0: using guessed type int dword_1006B2C0;

//----- (1001E680) --------------------------------------------------------
_DWORD *__thiscall sub_1001E680(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  _Cvtvec v3; // rax
  char v5; // [esp+8h] [ebp-80h]
  int v6; // [esp+84h] [ebp-4h]

  v2 = this;
  this[1] = a2;
  v6 = 0;
  *this = &off_10036174;
  std::_Locinfo::_Locinfo((std::_Locinfo *)&v5, "C");
  v3 = _Getcvt();
  v2[2] = v3._Hand;
  v2[3] = v3._Page;
  std::_Locinfo::~_Locinfo((std::_Locinfo *)&v5);
  return v2;
}
// 10036174: using guessed type int (__thiscall *off_10036174)(void *, char);

//----- (1001E700) --------------------------------------------------------
_DWORD *__thiscall sub_1001E700(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  char v4; // [esp+8h] [ebp-80h]
  int v5; // [esp+84h] [ebp-4h]

  v2 = this;
  this[1] = a2;
  v5 = 0;
  *this = &off_10036198;
  std::_Locinfo::_Locinfo((std::_Locinfo *)&v4, "C");
  std::_Locinfo::~_Locinfo((std::_Locinfo *)&v4);
  return v2;
}
// 10036198: using guessed type int (__thiscall *off_10036198)(void *, char);

//----- (1001E770) --------------------------------------------------------
signed int __stdcall sub_1001E770(int a1, int a2, int a3, _DWORD *a4, int a5, int a6, _DWORD *a7)
{
  *a4 = a2;
  *a7 = a5;
  return 3;
}

//----- (1001E790) --------------------------------------------------------
signed int __stdcall sub_1001E790(int a1, int a2, int a3, int a4)
{
  return 3;
}

//----- (1001E7A0) --------------------------------------------------------
int __stdcall sub_1001E7A0(int a1, int a2, int a3, unsigned int a4)
{
  int result; // eax

  result = a3 - a2;
  if ( a4 < a3 - a2 )
    result = a4;
  return result;
}

//----- (1001E7C0) --------------------------------------------------------
void *__thiscall sub_1001E7C0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_1001C070(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1001E7E0) --------------------------------------------------------
_DWORD *__cdecl sub_1001E7E0(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3; // ecx
  _DWORD *result; // eax

  v3 = a1;
  for ( result = a3; v3 != a2; result += 4 )
  {
    if ( result )
    {
      *result = *v3;
      result[1] = v3[1];
      result[2] = v3[2];
      result[3] = v3[3];
    }
    v3 += 4;
  }
  return result;
}

//----- (1001E820) --------------------------------------------------------
char *__thiscall sub_1001E820(char *this)
{
  char *v1; // esi
  int v2; // eax
  signed int v3; // edi
  std::ios_base *v4; // ecx
  int v5; // eax

  v1 = this;
  v2 = (int)&this[*(_DWORD *)(*(_DWORD *)this + 4)];
  v3 = 0;
  if ( !(*(_BYTE *)(v2 + 8) & 6)
    && (*(int (__thiscall **)(_DWORD))(**(_DWORD **)(v2 + 40) + 44))(*(_DWORD *)(v2 + 40)) == -1 )
  {
    v3 = 4;
  }
  v4 = (std::ios_base *)&v1[*(_DWORD *)(*(_DWORD *)v1 + 4)];
  if ( v3 )
  {
    v5 = v3 | *((_DWORD *)v4 + 2);
    if ( !*((_DWORD *)v4 + 10) )
      v5 |= 4u;
    std::ios_base::clear(v4, v5, 0);
  }
  return v1;
}

//----- (1001E880) --------------------------------------------------------
std::_String_base *__thiscall sub_1001E880(std::_String_base *this, unsigned int a2, unsigned int a3)
{
  std::_String_base *v3; // esi
  int v4; // edi
  unsigned int v5; // eax
  unsigned int v6; // ecx
  int *v7; // ebx
  int v8; // edx
  int v9; // ecx
  unsigned int v10; // ecx
  int v11; // eax

  v3 = this;
  if ( *((_DWORD *)this + 5) < a2 )
    std::_String_base::_Xran(this);
  v4 = a3;
  v5 = *((_DWORD *)this + 5) - a2;
  if ( v5 < a3 )
    v4 = *((_DWORD *)this + 5) - a2;
  if ( v4 )
  {
    v6 = *((_DWORD *)this + 6);
    v7 = (int *)((char *)v3 + 4);
    if ( v6 < 0x10 )
      v8 = (int)v3 + 4;
    else
      v8 = *v7;
    if ( v6 < 0x10 )
      v9 = (int)v3 + 4;
    else
      v9 = *v7;
    memcpy((void *)(a2 + v9), (const void *)(v4 + a2 + v8), v5 - v4);
    v10 = *((_DWORD *)v3 + 6);
    v11 = *((_DWORD *)v3 + 5) - v4;
    *((_DWORD *)v3 + 5) = v11;
    if ( v10 >= 0x10 )
      v7 = (int *)*v7;
    *((_BYTE *)v7 + v11) = 0;
  }
  return v3;
}

//----- (1001E900) --------------------------------------------------------
void __thiscall sub_1001E900(_DWORD *this, char a2, unsigned int a3)
{
  _DWORD *v3; // ebx
  void *v4; // eax

  v3 = this;
  if ( a2 && this[6] >= 0x10u )
  {
    v4 = (void *)this[1];
    if ( a3 )
      qmemcpy(this + 1, v4, a3);
    j__free(v4);
  }
  v3[5] = a3;
  v3[6] = 15;
  *((_BYTE *)v3 + a3 + 4) = 0;
}

//----- (1001E960) --------------------------------------------------------
_DWORD *__thiscall sub_1001E960(_DWORD *this, int a2)
{
  _DWORD *v2; // edi
  int v3; // eax
  int v4; // eax
  int v5; // ecx
  int v6; // eax
  char *v7; // eax

  v2 = this;
  *this = a2;
  v3 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a2 + 4) + a2 + 40);
  if ( v3 )
    sub_1003207B((LPCRITICAL_SECTION *)(v3 + 4));
  v4 = *(_DWORD *)(*(_DWORD *)a2 + 4);
  v5 = *(_DWORD *)(v4 + a2 + 8);
  v6 = a2 + v4;
  if ( !v5 )
  {
    v7 = *(char **)(v6 + 44);
    if ( v7 )
      sub_1001E820(v7);
  }
  *((_BYTE *)v2 + 4) = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a2 + 4) + a2 + 8) == 0;
  return v2;
}

//----- (1001E9F0) --------------------------------------------------------
int __thiscall sub_1001E9F0(int this)
{
  int result; // eax

  result = this;
  *(_DWORD *)(this + 24) = 15;
  *(_DWORD *)(this + 20) = 0;
  *(_BYTE *)(this + 4) = 0;
  return result;
}

//----- (1001EA10) --------------------------------------------------------
_DWORD *__thiscall sub_1001EA10(_DWORD *this)
{
  _DWORD *v1; // esi
  std::locale *v2; // eax
  int v3; // eax

  v1 = this;
  *this = &off_10036134;
  std::_Mutex::_Mutex((std::_Mutex *)(this + 1));
  v2 = (std::locale *)operator new(4u);
  if ( v2 )
    v3 = std::locale::locale(v2);
  else
    v3 = 0;
  v1[14] = v3;
  sub_1001E510(v1);
  return v1;
}
// 10036134: using guessed type int (__thiscall *off_10036134)(void *, char);

//----- (1001EA80) --------------------------------------------------------
_BYTE *__thiscall sub_1001EA80(_DWORD *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3; // ebx
  int v4; // esi
  unsigned int v5; // edi
  unsigned int v6; // ecx
  void *v7; // edx
  unsigned int v8; // ecx
  const void *v9; // esi
  _BYTE *result; // eax
  int v11; // [esp+0h] [ebp-24h]
  _DWORD *v12; // [esp+10h] [ebp-14h]
  int *v13; // [esp+14h] [ebp-10h]
  int v14; // [esp+20h] [ebp-4h]
  void *v15; // [esp+2Ch] [ebp+8h]

  v3 = a2 | 0xF;
  v4 = (int)this;
  v13 = &v11;
  v12 = this;
  if ( (a2 | 0xF) <= 0xFFFFFFFE )
  {
    v5 = this[6];
    v6 = this[6] >> 1;
    if ( v3 / 3 < v6 && v5 <= -2 - v6 )
      v3 = v6 + v5;
  }
  else
  {
    v3 = a2;
  }
  v14 = 0;
  v7 = operator new(v3 + 1);
  v15 = v7;
  v8 = a3;
  if ( a3 )
  {
    if ( *(_DWORD *)(v4 + 24) < 0x10u )
      v9 = (const void *)(v4 + 4);
    else
      v9 = *(const void **)(v4 + 4);
    qmemcpy(v7, v9, a3);
    v4 = (int)v12;
    v8 = a3;
  }
  if ( *(_DWORD *)(v4 + 24) >= 0x10u )
  {
    j__free(*(void **)(v4 + 4));
    v7 = v15;
    v8 = a3;
  }
  result = (_BYTE *)(v4 + 4);
  *result = 0;
  *(_DWORD *)result = v7;
  *(_DWORD *)(v4 + 24) = v3;
  *(_DWORD *)(v4 + 20) = v8;
  if ( v3 >= 0x10 )
    result = v7;
  result[v8] = 0;
  return result;
}
// 10026258: using guessed type void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD);

//----- (1001EBC0) --------------------------------------------------------
int __thiscall sub_1001EBC0(_DWORD **this, int a2)
{
  std::locale *v2; // eax
  std::locale::facet *v3; // eax
  int v4; // esi
  std::locale::facet *v5; // edi
  unsigned int v6; // eax
  void (__thiscall ***v7)(_DWORD, signed int); // esi
  int v9; // [esp+8h] [ebp-14h]
  char v10; // [esp+Ch] [ebp-10h]
  int v11; // [esp+18h] [ebp-4h]

  v2 = (std::locale *)sub_1001C0E0(this, &v9);
  v11 = 0;
  v3 = sub_1001E570(v2);
  v4 = v9;
  v5 = v3;
  v11 = -1;
  if ( v9 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&v10, 0);
    v6 = *(_DWORD *)(v4 + 4);
    if ( v6 && v6 < 0xFFFFFFFF )
      *(_DWORD *)(v4 + 4) = v6 - 1;
    v7 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v4 + 4) != 0 ? 0 : v4);
    std::_Lockit::~_Lockit((std::_Lockit *)&v10);
    if ( v7 )
      (**v7)(v7, 1);
  }
  return (*(int (__thiscall **)(std::locale::facet *, int))(*(_DWORD *)v5 + 24))(v5, a2);
}

//----- (1001EC70) --------------------------------------------------------
signed int __cdecl sub_1001EC70(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax

  if ( a1 && !*a1 )
  {
    v1 = operator new(0x10u);
    if ( v1 )
      v2 = sub_1001E680(v1, 0);
    else
      v2 = 0;
    *a1 = v2;
  }
  return 4;
}

//----- (1001ECE0) --------------------------------------------------------
signed int __cdecl sub_1001ECE0(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // eax

  if ( a1 && !*a1 )
  {
    v1 = operator new(8u);
    if ( v1 )
      v2 = sub_1001E700(v1, 0);
    else
      v2 = 0;
    *a1 = v2;
  }
  return 2;
}

//----- (1001ED50) --------------------------------------------------------
_DWORD *__cdecl sub_1001ED50(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *result; // eax
  _DWORD *v4; // ecx

  result = a2;
  if ( a2 )
  {
    v4 = a2;
    result = a1;
    do
    {
      if ( result )
      {
        *result = *a3;
        result[1] = a3[1];
        result[2] = a3[2];
        result[3] = a3[3];
      }
      result += 4;
      v4 = (_DWORD *)((char *)v4 - 1);
    }
    while ( v4 );
  }
  return result;
}

//----- (1001ED90) --------------------------------------------------------
int __thiscall sub_1001ED90(int this)
{
  int v1; // esi
  int result; // eax

  v1 = this;
  if ( *(_DWORD *)(this + 24) >= 0x10u )
    j__free(*(void **)(this + 4));
  result = 0;
  *(_DWORD *)(v1 + 24) = 15;
  *(_DWORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 4) = 0;
  return result;
}

//----- (1001EDC0) --------------------------------------------------------
int __thiscall sub_1001EDC0(_DWORD *this, char *a2, size_t a3)
{
  int v3; // edi
  FILE *v4; // ecx
  int v5; // eax
  int result; // eax

  v3 = (int)this;
  v4 = (FILE *)this[22];
  if ( !v4 || (a2 || a3 ? (v5 = 0) : (v5 = 4), setvbuf(v4, a2, v5, a3)) )
    result = 0;
  else
    result = v3;
  return result;
}

//----- (1001EE10) --------------------------------------------------------
signed int __thiscall sub_1001EE10(_DWORD *this)
{
  _DWORD *v1; // esi
  signed int result; // eax

  v1 = this;
  if ( this[22] && (*(int (__stdcall **)(signed int))(*this + 4))(-1) != -1 && fflush((FILE *)v1[22]) < 0 )
    result = -1;
  else
    result = 0;
  return result;
}

//----- (1001EE40) --------------------------------------------------------
signed int __thiscall sub_1001EE40(int this, int a2)
{
  int v2; // esi
  unsigned int v3; // eax
  _BYTE *v5; // eax
  _DWORD *v6; // edx

  v2 = this;
  v3 = **(_DWORD **)(this + 32);
  if ( v3 && **(_DWORD **)(this + 16) < v3 && (a2 == -1 || *(unsigned __int8 *)(v3 - 1) == a2) )
  {
    std::basic_streambuf<char,std::char_traits<char>>::_Gndec(this);
    return a2 == -1 ? 0 : a2;
  }
  if ( *(_DWORD *)(this + 88) && a2 != -1 )
  {
    if ( !*(_DWORD *)(this + 60) && ungetc_0((unsigned __int8)a2, *(FILE **)(this + 88)) != -1 )
      return a2;
    v5 = (_BYTE *)(v2 + 68);
    if ( **(_DWORD **)(v2 + 32) != v2 + 68 )
    {
      v6 = *(_DWORD **)(v2 + 16);
      *v5 = a2;
      *v6 = v5;
      **(_DWORD **)(v2 + 32) = v5;
      **(_DWORD **)(v2 + 48) = 1;
      return a2;
    }
  }
  return -1;
}
// 1001EEE0: using guessed type int __thiscall std::basic_streambuf<char,std::char_traits<char>>::_Gndec(_DWORD);

//----- (1001EEF0) --------------------------------------------------------
int __thiscall sub_1001EEF0(_DWORD *this)
{
  _DWORD *v1; // esi
  unsigned __int8 **v2; // eax
  int result; // eax
  int v4; // edi

  v1 = this;
  v2 = (unsigned __int8 **)this[8];
  if ( *v2 && *v2 < &(*v2)[*(_DWORD *)this[12]] )
    return **v2;
  result = (*(int (__thiscall **)(_DWORD *))(*this + 20))(this);
  v4 = result;
  if ( result != -1 )
  {
    (*(void (__thiscall **)(_DWORD *, int))(*v1 + 8))(v1, result);
    result = v4;
  }
  return result;
}

//----- (1001EF40) --------------------------------------------------------
_DWORD *__thiscall sub_1001EF40(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  _DWORD *result; // eax

  v2 = this;
  result = (_DWORD *)(*(int (__thiscall **)(int))(*(_DWORD *)a2 + 4))(a2);
  if ( (_BYTE)result )
  {
    v2[15] = 0;
  }
  else
  {
    v2[15] = a2;
    sub_1001E510(v2);
    result = (_DWORD *)v2[18];
    if ( !result )
    {
      result = operator new(0x1Cu);
      if ( result )
      {
        result[6] = 15;
        result[5] = 0;
        *((_BYTE *)result + 4) = 0;
        v2[18] = result;
      }
      else
      {
        result = 0;
        v2[18] = 0;
      }
    }
  }
  return result;
}

//----- (1001EFB0) --------------------------------------------------------
void __thiscall sub_1001EFB0(char **this)
{
  char **v1; // esi
  int v2; // eax

  v1 = this;
  if ( !__uncaught_exception() && (*v1)[*(_DWORD *)(*(_DWORD *)*v1 + 4) + 16] & 2 )
    sub_1001E820(*v1);
  v2 = *(_DWORD *)&(*v1)[*(_DWORD *)(*(_DWORD *)*v1 + 4) + 40];
  if ( v2 )
    sub_10032084((LPCRITICAL_SECTION *)(v2 + 4));
}

//----- (1001F020) --------------------------------------------------------
int __cdecl sub_1001F020(int a1, const char *a2)
{
  int v2; // ebx
  signed int v3; // edi
  int v4; // eax
  signed int v5; // edx
  int v6; // eax
  int v7; // edx
  int v8; // eax
  int v9; // ecx
  _DWORD *v10; // edx
  _DWORD *v11; // ecx
  _BYTE *v12; // edx
  int v13; // edx
  int v14; // eax
  int v15; // ecx
  _DWORD *v16; // edx
  _DWORD *v17; // ecx
  _BYTE *v18; // edx
  int v19; // edx
  std::ios_base *v20; // ecx
  int v21; // eax
  int v23; // [esp+0h] [ebp-2Ch]
  char *v24; // [esp+Ch] [ebp-20h]
  char v25; // [esp+10h] [ebp-1Ch]
  int v26; // [esp+14h] [ebp-18h]
  int v27; // [esp+18h] [ebp-14h]
  int *v28; // [esp+1Ch] [ebp-10h]
  int v29; // [esp+28h] [ebp-4h]

  v2 = 0;
  v28 = &v23;
  v27 = 0;
  v3 = strlen(a2);
  v4 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a1 + 4) + a1 + 24);
  if ( v4 > 0 && v4 > v3 )
    v2 = v4 - v3;
  v26 = v2;
  sub_1001E960(&v24, a1);
  v29 = 0;
  if ( !v25 )
  {
    v5 = 4;
    goto LABEL_29;
  }
  v6 = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a1 + 4) + a1 + 16) & 0x1C0;
  LOBYTE(v29) = 1;
  if ( v6 == 64 )
  {
LABEL_16:
    if ( (*(int (__stdcall **)(const char *, signed int))(**(_DWORD **)(*(_DWORD *)(*(_DWORD *)a1 + 4) + a1 + 40) + 28))(
           a2,
           v3) == v3 )
    {
      while ( v2 > 0 )
      {
        v13 = *(_DWORD *)(*(_DWORD *)a1 + 4);
        LOBYTE(v14) = *(_BYTE *)(v13 + a1 + 48);
        v15 = *(_DWORD *)(v13 + a1 + 40);
        v16 = *(_DWORD **)(v15 + 36);
        if ( *v16 && *v16 < (unsigned int)(*v16 + **(_DWORD **)(v15 + 52)) )
        {
          --**(_DWORD **)(v15 + 52);
          v17 = *(_DWORD **)(v15 + 36);
          v18 = (_BYTE *)(*v17)++;
          *v18 = v14;
          v14 = (unsigned __int8)v14;
        }
        else
        {
          v14 = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)v15 + 4))((unsigned __int8)v14);
        }
        if ( v14 == -1 )
        {
          v19 = *(_DWORD *)a1;
          v27 |= 4u;
          *(_DWORD *)(a1 + *(_DWORD *)(v19 + 4) + 24) = 0;
          goto LABEL_28;
        }
        --v2;
      }
    }
    else
    {
      v27 = 4;
    }
    goto LABEL_18;
  }
  while ( v2 > 0 )
  {
    v7 = *(_DWORD *)(*(_DWORD *)a1 + 4);
    LOBYTE(v8) = *(_BYTE *)(v7 + a1 + 48);
    v9 = *(_DWORD *)(v7 + a1 + 40);
    v10 = *(_DWORD **)(v9 + 36);
    if ( *v10 )
    {
      if ( *v10 < (unsigned int)(*v10 + **(_DWORD **)(v9 + 52)) )
      {
        --**(_DWORD **)(v9 + 52);
        v11 = *(_DWORD **)(v9 + 36);
        v12 = (_BYTE *)(*v11)++;
        v2 = v26;
        *v12 = v8;
        v8 = (unsigned __int8)v8;
        goto LABEL_13;
      }
      v2 = v26;
    }
    v8 = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)v9 + 4))((unsigned __int8)v8);
LABEL_13:
    if ( v8 == -1 )
    {
      v27 |= 4u;
      break;
    }
    v26 = --v2;
  }
  if ( !v27 )
    goto LABEL_16;
LABEL_18:
  *(_DWORD *)(a1 + *(_DWORD *)(*(_DWORD *)a1 + 4) + 24) = 0;
LABEL_28:
  v5 = v27;
LABEL_29:
  v20 = (std::ios_base *)(a1 + *(_DWORD *)(*(_DWORD *)a1 + 4));
  v29 = 0;
  if ( v5 )
  {
    v21 = v5 | *((_DWORD *)v20 + 2);
    if ( !*((_DWORD *)v20 + 10) )
      v21 |= 4u;
    std::ios_base::clear(v20, v21, 0);
  }
  v29 = -1;
  sub_1001EFB0(&v24);
  return a1;
}

//----- (1001F230) --------------------------------------------------------
std::locale::facet *__cdecl sub_1001F230(std::locale *a1)
{
  int v1; // edi
  std::locale::facet *v2; // esi
  unsigned int v3; // eax
  std::locale::facet *v5; // [esp+8h] [ebp-24h]
  char v6; // [esp+Ch] [ebp-20h]
  char v7; // [esp+10h] [ebp-1Ch]
  char v8; // [esp+14h] [ebp-18h]
  int v9; // [esp+28h] [ebp-4h]

  std::_Lockit::_Lockit((std::_Lockit *)&v7, 0);
  v1 = dword_1006ACE4;
  v9 = 0;
  v5 = (std::locale::facet *)dword_1006ACE4;
  if ( !dword_1006ACF8 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
    if ( !dword_1006ACF8 )
      dword_1006ACF8 = ++dword_1006B2C0;
    std::_Lockit::~_Lockit((std::_Lockit *)&v6);
  }
  v2 = std::locale::_Getfacet(a1, dword_1006ACF8);
  if ( !v2 )
  {
    if ( v1 )
    {
      v2 = (std::locale::facet *)v1;
    }
    else
    {
      if ( sub_1001EC70(&v5) == -1 )
      {
        sub_10026182((exception *)&v8, "bad cast");
        _CxxThrowException(&v8, &_TI2_AVbad_cast__);
      }
      v2 = v5;
      dword_1006ACE4 = (int)v5;
      std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
      v3 = *((_DWORD *)v2 + 1);
      if ( v3 < 0xFFFFFFFF )
        *((_DWORD *)v2 + 1) = v3 + 1;
      std::_Lockit::~_Lockit((std::_Lockit *)&v6);
      std::locale::facet::_Register(v2);
    }
  }
  v9 = -1;
  std::_Lockit::~_Lockit((std::_Lockit *)&v7);
  return v2;
}
// 10026258: using guessed type void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD);
// 1003900C: using guessed type int _TI2_AVbad_cast__;
// 1006ACE4: using guessed type int dword_1006ACE4;
// 1006B2C0: using guessed type int dword_1006B2C0;

//----- (1001F340) --------------------------------------------------------
std::locale::facet *__cdecl sub_1001F340(std::locale *a1)
{
  int v1; // edi
  std::locale::facet *v2; // esi
  unsigned int v3; // eax
  std::locale::facet *v5; // [esp+8h] [ebp-24h]
  char v6; // [esp+Ch] [ebp-20h]
  char v7; // [esp+10h] [ebp-1Ch]
  char v8; // [esp+14h] [ebp-18h]
  int v9; // [esp+28h] [ebp-4h]

  std::_Lockit::_Lockit((std::_Lockit *)&v7, 0);
  v1 = dword_1006ACE8;
  v9 = 0;
  v5 = (std::locale::facet *)dword_1006ACE8;
  if ( !dword_1006ACF0 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
    if ( !dword_1006ACF0 )
      dword_1006ACF0 = ++dword_1006B2C0;
    std::_Lockit::~_Lockit((std::_Lockit *)&v6);
  }
  v2 = std::locale::_Getfacet(a1, dword_1006ACF0);
  if ( !v2 )
  {
    if ( v1 )
    {
      v2 = (std::locale::facet *)v1;
    }
    else
    {
      if ( sub_1001ECE0(&v5) == -1 )
      {
        sub_10026182((exception *)&v8, "bad cast");
        _CxxThrowException(&v8, &_TI2_AVbad_cast__);
      }
      v2 = v5;
      dword_1006ACE8 = (int)v5;
      std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
      v3 = *((_DWORD *)v2 + 1);
      if ( v3 < 0xFFFFFFFF )
        *((_DWORD *)v2 + 1) = v3 + 1;
      std::_Lockit::~_Lockit((std::_Lockit *)&v6);
      std::locale::facet::_Register(v2);
    }
  }
  v9 = -1;
  std::_Lockit::~_Lockit((std::_Lockit *)&v7);
  return v2;
}
// 10026258: using guessed type void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD);
// 1003900C: using guessed type int _TI2_AVbad_cast__;
// 1006ACE8: using guessed type int dword_1006ACE8;
// 1006B2C0: using guessed type int dword_1006B2C0;

//----- (1001F460) --------------------------------------------------------
void *__thiscall sub_1001F460(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10020880((void **)this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1001F480) --------------------------------------------------------
_BYTE *__thiscall sub_1001F480(_BYTE *this, int a2)
{
  _BYTE *v2; // esi
  std::locale *v3; // eax
  std::locale::facet *v4; // eax
  int v5; // edi
  std::locale::facet *v6; // ebx
  unsigned int v7; // eax
  void (__thiscall ***v8)(_DWORD, signed int); // edi
  int v9; // eax
  int v10; // ecx
  char v11; // dl
  int v12; // ecx
  int v13; // edx
  std::ios_base *v14; // ecx
  int v15; // eax
  int v17; // [esp+0h] [ebp-3Ch]
  int v18; // [esp+Ch] [ebp-30h]
  char *v19; // [esp+14h] [ebp-28h]
  char v20; // [esp+18h] [ebp-24h]
  int v21; // [esp+1Ch] [ebp-20h]
  int v22; // [esp+20h] [ebp-1Ch]
  int v23; // [esp+24h] [ebp-18h]
  void *v24; // [esp+28h] [ebp-14h]
  int *v25; // [esp+2Ch] [ebp-10h]
  int v26; // [esp+38h] [ebp-4h]

  v2 = this;
  v25 = &v17;
  v24 = this;
  v23 = 0;
  sub_1001E960(&v19, (int)this);
  v26 = 0;
  if ( v20 )
  {
    v3 = (std::locale *)sub_1001C0E0((_DWORD **)&v2[*(_DWORD *)(*(_DWORD *)v2 + 4)], &v22);
    LOBYTE(v26) = 1;
    v4 = sub_1001F230(v3);
    v5 = v22;
    v6 = v4;
    LOBYTE(v26) = 0;
    if ( v22 )
    {
      std::_Lockit::_Lockit((std::_Lockit *)&v21, 0);
      v7 = *(_DWORD *)(v5 + 4);
      if ( v7 && v7 < 0xFFFFFFFF )
        *(_DWORD *)(v5 + 4) = v7 - 1;
      v8 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v5 + 4) != 0 ? 0 : v5);
      std::_Lockit::~_Lockit((std::_Lockit *)&v21);
      if ( v8 )
        (**v8)(v8, 1);
    }
    v9 = *(_DWORD *)(*(_DWORD *)v2 + 4);
    v10 = *(_DWORD *)(*(_DWORD *)v2 + 4);
    v11 = v2[v10 + 48];
    v12 = *(_DWORD *)&v2[v10 + 40];
    LOBYTE(v21) = v11;
    v13 = *(_DWORD *)v6;
    LOBYTE(v18) = 0;
    LOBYTE(v26) = 2;
    (*(void (__thiscall **)(std::locale::facet *, int *, int, int, _BYTE *, int, int))(v13 + 28))(
      v6,
      &v18,
      v18,
      v12,
      &v2[v9],
      v21,
      a2);
    if ( (_BYTE)v18 )
      v23 = 4;
  }
  v14 = (std::ios_base *)&v2[*(_DWORD *)(*(_DWORD *)v2 + 4)];
  v26 = 0;
  if ( v23 )
  {
    v15 = v23 | *((_DWORD *)v14 + 2);
    if ( !*((_DWORD *)v14 + 10) )
      v15 |= 4u;
    std::ios_base::clear(v14, v15, 0);
  }
  v26 = -1;
  sub_1001EFB0(&v19);
  return v2;
}

//----- (1001F5F0) --------------------------------------------------------
_BYTE *__thiscall sub_1001F5F0(_BYTE *this, int a2)
{
  _BYTE *v2; // esi
  std::locale *v3; // eax
  std::locale::facet *v4; // eax
  int v5; // edi
  std::locale::facet *v6; // ebx
  unsigned int v7; // eax
  void (__thiscall ***v8)(_DWORD, signed int); // edi
  int v9; // eax
  int v10; // ecx
  char v11; // dl
  int v12; // ecx
  int v13; // edx
  std::ios_base *v14; // ecx
  int v15; // eax
  int v17; // [esp+0h] [ebp-3Ch]
  int v18; // [esp+Ch] [ebp-30h]
  char *v19; // [esp+14h] [ebp-28h]
  char v20; // [esp+18h] [ebp-24h]
  int v21; // [esp+1Ch] [ebp-20h]
  int v22; // [esp+20h] [ebp-1Ch]
  int v23; // [esp+24h] [ebp-18h]
  void *v24; // [esp+28h] [ebp-14h]
  int *v25; // [esp+2Ch] [ebp-10h]
  int v26; // [esp+38h] [ebp-4h]

  v2 = this;
  v25 = &v17;
  v24 = this;
  v23 = 0;
  sub_1001E960(&v19, (int)this);
  v26 = 0;
  if ( v20 )
  {
    v3 = (std::locale *)sub_1001C0E0((_DWORD **)&v2[*(_DWORD *)(*(_DWORD *)v2 + 4)], &v22);
    LOBYTE(v26) = 1;
    v4 = sub_1001F230(v3);
    v5 = v22;
    v6 = v4;
    LOBYTE(v26) = 0;
    if ( v22 )
    {
      std::_Lockit::_Lockit((std::_Lockit *)&v21, 0);
      v7 = *(_DWORD *)(v5 + 4);
      if ( v7 && v7 < 0xFFFFFFFF )
        *(_DWORD *)(v5 + 4) = v7 - 1;
      v8 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v5 + 4) != 0 ? 0 : v5);
      std::_Lockit::~_Lockit((std::_Lockit *)&v21);
      if ( v8 )
        (**v8)(v8, 1);
    }
    v9 = *(_DWORD *)(*(_DWORD *)v2 + 4);
    v10 = *(_DWORD *)(*(_DWORD *)v2 + 4);
    v11 = v2[v10 + 48];
    v12 = *(_DWORD *)&v2[v10 + 40];
    LOBYTE(v21) = v11;
    v13 = *(_DWORD *)v6;
    LOBYTE(v18) = 0;
    LOBYTE(v26) = 2;
    (*(void (__thiscall **)(std::locale::facet *, int *, int, int, _BYTE *, int, int))(v13 + 24))(
      v6,
      &v18,
      v18,
      v12,
      &v2[v9],
      v21,
      a2);
    if ( (_BYTE)v18 )
      v23 = 4;
  }
  v14 = (std::ios_base *)&v2[*(_DWORD *)(*(_DWORD *)v2 + 4)];
  v26 = 0;
  if ( v23 )
  {
    v15 = v23 | *((_DWORD *)v14 + 2);
    if ( !*((_DWORD *)v14 + 10) )
      v15 |= 4u;
    std::ios_base::clear(v14, v15, 0);
  }
  v26 = -1;
  sub_1001EFB0(&v19);
  return v2;
}

//----- (1001F760) --------------------------------------------------------
char *__thiscall sub_1001F760(char *this, unsigned __int8 a2)
{
  char *v2; // esi
  signed int v3; // edi
  int v4; // ecx
  _DWORD *v5; // edx
  bool v6; // zf
  _DWORD *v7; // ecx
  unsigned __int8 *v8; // eax
  int v9; // eax
  std::ios_base *v10; // ecx
  int v11; // eax
  int v13; // [esp+0h] [ebp-2Ch]
  char *v14; // [esp+Ch] [ebp-20h]
  char v15; // [esp+10h] [ebp-1Ch]
  int v16; // [esp+14h] [ebp-18h]
  char *v17; // [esp+18h] [ebp-14h]
  int *v18; // [esp+1Ch] [ebp-10h]
  int v19; // [esp+28h] [ebp-4h]

  v2 = this;
  v18 = &v13;
  v3 = 0;
  v17 = this;
  v16 = 0;
  sub_1001E960(&v14, (int)this);
  v19 = 0;
  if ( v15 )
  {
    v4 = *(_DWORD *)&v2[*(_DWORD *)(*(_DWORD *)v2 + 4) + 40];
    v5 = *(_DWORD **)(v4 + 36);
    v6 = *v5 == 0;
    LOBYTE(v19) = 1;
    if ( v6 || *v5 >= (unsigned int)(*v5 + **(_DWORD **)(v4 + 52)) )
    {
      v9 = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)v4 + 4))(a2);
    }
    else
    {
      --**(_DWORD **)(v4 + 52);
      v7 = *(_DWORD **)(v4 + 36);
      v8 = (unsigned __int8 *)(*v7)++;
      *v8 = a2;
      v9 = a2;
    }
    if ( v9 == -1 )
      v3 = 4;
  }
  else
  {
    v3 = 4;
  }
  v10 = (std::ios_base *)&v2[*(_DWORD *)(*(_DWORD *)v2 + 4)];
  v19 = 0;
  if ( v3 )
  {
    v11 = v3 | *((_DWORD *)v10 + 2);
    if ( !*((_DWORD *)v10 + 10) )
      v11 |= 4u;
    std::ios_base::clear(v10, v11, 0);
  }
  v19 = -1;
  sub_1001EFB0(&v14);
  return v2;
}

//----- (1001F880) --------------------------------------------------------
_DWORD *__thiscall sub_1001F880(_DWORD *this, std::locale *a2)
{
  _DWORD *v2; // esi
  std::locale::facet *v3; // eax

  v2 = this;
  v3 = sub_1001F340(a2);
  return sub_1001EF40(v2, (int)v3);
}

//----- (1001F8A0) --------------------------------------------------------
std::_String_base *__userpurge sub_1001F8A0@<eax>(std::_String_base *this@<ecx>, int a2@<ebx>, unsigned int a3, char a4)
{
  std::_String_base *v4; // esi
  unsigned int v5; // ebp
  unsigned int v6; // eax
  bool v7; // zf
  int v8; // edx
  char *v10; // edi
  int v11; // eax
  bool v12; // cf

  v4 = this;
  if ( -1 - *((_DWORD *)this + 5) <= a3 )
    std::_String_base::_Xlen(this);
  if ( !a3 )
    return v4;
  v5 = a3 + *((_DWORD *)this + 5);
  if ( v5 > 0xFFFFFFFE )
    std::_String_base::_Xlen(this);
  v6 = *((_DWORD *)this + 6);
  if ( v6 < v5 )
  {
    sub_1001EA80(this, v5, *((_DWORD *)this + 5));
    v7 = v5 == 0;
    goto LABEL_8;
  }
  v7 = v5 == 0;
  if ( v5 )
  {
LABEL_8:
    if ( !v7 )
    {
      if ( *((_DWORD *)v4 + 6) < 0x10u )
        v8 = (int)v4 + 4;
      else
        v8 = *((_DWORD *)v4 + 1);
      LOBYTE(a2) = a4;
      BYTE1(a2) = a4;
      v10 = (char *)(v8 + *((_DWORD *)v4 + 5));
      v11 = a2 << 16;
      LOWORD(v11) = a2;
      memset32(v10, v11, a3 >> 2);
      memset(&v10[4 * (a3 >> 2)], a4, a3 & 3);
      v12 = *((_DWORD *)v4 + 6) < 0x10u;
      *((_DWORD *)v4 + 5) = v5;
      if ( !v12 )
      {
        *(_BYTE *)(*((_DWORD *)v4 + 1) + v5) = 0;
        return v4;
      }
      *((_BYTE *)v4 + v5 + 4) = 0;
    }
    return v4;
  }
  *((_DWORD *)this + 5) = 0;
  if ( v6 < 0x10 )
    *((_BYTE *)this + 4) = 0;
  else
    **((_BYTE **)this + 1) = 0;
  return this;
}

//----- (1001F970) --------------------------------------------------------
std::_String_base *__thiscall sub_1001F970(std::_String_base *this, std::_String_base *a2, unsigned int a3, unsigned int a4)
{
  std::_String_base *v4; // ebx
  unsigned int v5; // ebp
  unsigned int v7; // eax
  bool v8; // zf
  int v9; // edx
  void **v10; // eax
  void *v11; // edi
  bool v12; // cf

  v4 = this;
  if ( *((_DWORD *)a2 + 5) < a3 )
    std::_String_base::_Xran(this);
  v5 = *((_DWORD *)a2 + 5) - a3;
  if ( a4 < v5 )
    v5 = a4;
  if ( this == a2 )
  {
    sub_1001E880(this, a3 + v5, 0xFFFFFFFF);
    sub_1001E880(v4, 0, a3);
    return v4;
  }
  if ( v5 > 0xFFFFFFFE )
    std::_String_base::_Xlen(this);
  v7 = *((_DWORD *)this + 6);
  if ( v7 >= v5 )
  {
    v8 = v5 == 0;
    if ( !v5 )
    {
      *((_DWORD *)this + 5) = 0;
      if ( v7 < 0x10 )
        *((_BYTE *)this + 4) = 0;
      else
        **((_BYTE **)this + 1) = 0;
      return this;
    }
  }
  else
  {
    sub_1001EA80(this, v5, *((_DWORD *)this + 5));
    v8 = v5 == 0;
  }
  if ( !v8 )
  {
    if ( *((_DWORD *)a2 + 6) < 0x10u )
      v9 = (int)a2 + 4;
    else
      v9 = *((_DWORD *)a2 + 1);
    v10 = (void **)((char *)v4 + 4);
    if ( *((_DWORD *)v4 + 6) < 0x10u )
      v11 = (char *)v4 + 4;
    else
      v11 = *v10;
    qmemcpy(v11, (const void *)(v9 + a3), v5);
    v12 = *((_DWORD *)v4 + 6) < 0x10u;
    *((_DWORD *)v4 + 5) = v5;
    if ( !v12 )
      v10 = (void **)*v10;
    *((_BYTE *)v10 + v5) = 0;
  }
  return v4;
}

//----- (1001FA60) --------------------------------------------------------
int __stdcall sub_1001FA60(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  sub_1001ED50(a1, a2, a3);
  return (int)&a1[4 * (_DWORD)a2];
}

//----- (1001FA90) --------------------------------------------------------
_DWORD *__thiscall sub_1001FA90(_DWORD *this, char *a2, int a3, int a4)
{
  _DWORD *v4; // esi
  struct _iobuf *v5; // edi
  std::locale *v6; // eax
  std::locale::facet *v7; // eax
  int v8; // edi
  unsigned int v9; // eax
  void (__thiscall ***v10)(_DWORD, signed int); // edi

  v4 = this;
  if ( this[22] )
    return 0;
  v5 = std::_Fiopen(a2, a3, a4);
  if ( !v5 )
    return 0;
  *((_BYTE *)v4 + 84) = 1;
  *((_BYTE *)v4 + 76) = 0;
  sub_1001E510(v4);
  v4[12] = (char *)v5 + 4;
  v4[13] = (char *)v5 + 4;
  v4[4] = (char *)v5 + 8;
  v4[5] = (char *)v5 + 8;
  v4[8] = v5;
  v4[9] = v5;
  v4[22] = v5;
  v4[20] = dword_1006ACDC;
  v4[16] = dword_1006ACDC;
  v4[15] = 0;
  v6 = (std::locale *)sub_1001DE10((_DWORD **)v4, &a4);
  v7 = sub_1001F340(v6);
  sub_1001EF40(v4, (int)v7);
  v8 = a4;
  if ( a4 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&a3, 0);
    v9 = *(_DWORD *)(v8 + 4);
    if ( v9 && v9 < 0xFFFFFFFF )
      *(_DWORD *)(v8 + 4) = v9 - 1;
    v10 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v8 + 4) != 0 ? 0 : v8);
    std::_Lockit::~_Lockit((std::_Lockit *)&a3);
    if ( v10 )
      (**v10)(v10, 1);
  }
  return v4;
}
// 1006ACDC: using guessed type int dword_1006ACDC;

//----- (1001FBC0) --------------------------------------------------------
std::_String_base *__fastcall sub_1001FBC0(std::_String_base *this, int a2, char *a3, unsigned int a4)
{
  std::_String_base *v4; // ebx
  unsigned int v5; // edx
  char *v6; // eax
  char *v7; // eax
  std::_String_base *v8; // ecx
  unsigned int v10; // eax
  bool v11; // zf
  char *v12; // edi
  bool v13; // cf

  v4 = this;
  v5 = *((_DWORD *)this + 6);
  if ( v5 < 0x10 )
    v6 = (char *)this + 4;
  else
    v6 = (char *)*((_DWORD *)this + 1);
  if ( a3 >= v6 )
  {
    v7 = (char *)this + 4;
    v8 = v5 < 0x10 ? (std::_String_base *)((char *)this + 4) : *(_DWORD *)v7;
    if ( (char *)v8 + *((_DWORD *)v4 + 5) > a3 )
    {
      if ( v5 >= 0x10 )
        v7 = *(char **)v7;
      return sub_1001F970(v4, v4, a3 - v7, a4);
    }
  }
  if ( a4 > 0xFFFFFFFE )
    std::_String_base::_Xlen(v4);
  v10 = *((_DWORD *)v4 + 6);
  if ( v10 >= a4 )
  {
    v11 = a4 == 0;
    if ( !a4 )
    {
      *((_DWORD *)v4 + 5) = 0;
      if ( v10 < 0x10 )
        *((_BYTE *)v4 + 4) = 0;
      else
        **((_BYTE **)v4 + 1) = 0;
      return v4;
    }
  }
  else
  {
    sub_1001EA80(v4, a4, *((_DWORD *)v4 + 5));
    v11 = a4 == 0;
  }
  if ( !v11 )
  {
    if ( *((_DWORD *)v4 + 6) < 0x10u )
      v12 = (char *)v4 + 4;
    else
      v12 = (char *)*((_DWORD *)v4 + 1);
    qmemcpy(v12, a3, a4);
    v13 = *((_DWORD *)v4 + 6) < 0x10u;
    *((_DWORD *)v4 + 5) = a4;
    if ( !v13 )
    {
      *(_BYTE *)(*((_DWORD *)v4 + 1) + a4) = 0;
      return v4;
    }
    *((_BYTE *)v4 + a4 + 4) = 0;
  }
  return v4;
}

//----- (1001FCB0) --------------------------------------------------------
int __thiscall sub_1001FCB0(int this, std::_String_base *a2)
{
  int v2; // esi

  v2 = this;
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 15;
  *(_BYTE *)(this + 4) = 0;
  sub_1001F970((std::_String_base *)this, a2, 0, 0xFFFFFFFF);
  return v2;
}

//----- (1001FCE0) --------------------------------------------------------
int __thiscall sub_1001FCE0(_DWORD *this)
{
  _DWORD *v1; // esi
  _DWORD *v2; // ecx
  _DWORD *v3; // eax
  _DWORD *v4; // esi
  unsigned __int8 *v5; // eax
  int result; // eax
  std::_String_base *v7; // ecx
  int v8; // eax
  _DWORD *v9; // eax
  int v10; // edi
  int v11; // edx
  int v12; // eax
  int v13; // eax
  int v14; // eax
  std::_String_base *v15; // ecx
  int v16; // eax
  int v17; // esi
  _DWORD *v18; // eax
  int v19; // ecx
  int v20; // edi
  int v21; // eax
  unsigned __int8 v22; // [esp+1Dh] [ebp-9h]
  int v23; // [esp+1Eh] [ebp-8h]
  char v24; // [esp+22h] [ebp-4h]

  v1 = this;
  v2 = (_DWORD *)this[8];
  if ( *v2 )
  {
    v3 = (_DWORD *)v1[12];
    if ( *v2 < (unsigned int)(*v2 + *v3) )
    {
      --*v3;
      v4 = (_DWORD *)v1[8];
      v5 = (unsigned __int8 *)(*v4)++;
      return *v5;
    }
  }
  if ( !v1[22] )
    return -1;
  if ( v1[15] )
  {
    v7 = (std::_String_base *)v1[18];
    v1[16] = v1[20];
    sub_1001E880(v7, 0, 0xFFFFFFFF);
    v8 = fgetc((FILE *)v1[22]);
    if ( v8 == -1 )
    {
LABEL_26:
      result = -1;
    }
    else
    {
      while ( 1 )
      {
        sub_1001F8A0((std::_String_base *)v1[18], 16, 1u, v8);
        v9 = (_DWORD *)v1[18];
        v10 = (int)(v9[6] < 0x10u ? v9 + 1 : v9[1]);
        v11 = v9[5];
        v12 = (int)(v9[6] < 0x10u ? v9 + 1 : v9[1]);
        v13 = (*(int (__stdcall **)(_DWORD *, int, int, int *, unsigned __int8 *, int *, char *))(*(_DWORD *)v1[15] + 16))(
                v1 + 20,
                v12,
                v11 + v10,
                &v23,
                &v22,
                &v23,
                &v24);
        if ( !v13 )
          break;
        v14 = v13 - 1;
        if ( v14 )
        {
          if ( v14 != 2 )
            goto LABEL_26;
          if ( *(_DWORD *)(v1[18] + 20) >= 1u )
          {
            v17 = v1[18];
            if ( *(_DWORD *)(v17 + 24) < 0x10u )
              result = *(unsigned __int8 *)(v17 + 4);
            else
              result = **(unsigned __int8 **)(v17 + 4);
            return result;
          }
        }
        else
        {
          v15 = (std::_String_base *)v1[18];
          if ( *((_DWORD *)v15 + 6) < 0x10u )
            v16 = (int)v15 + 4;
          else
            v16 = *((_DWORD *)v15 + 1);
          sub_1001E880(v15, 0, v23 - v16);
        }
        v8 = fgetc((FILE *)v1[22]);
        if ( v8 == -1 )
          goto LABEL_26;
      }
      v18 = (_DWORD *)v1[18];
      if ( v18[6] < 0x10u )
        v19 = (int)(v18 + 1);
      else
        v19 = v18[1];
      v20 = v19 + v18[5] - v23;
      while ( v20 > 0 )
      {
        v21 = *(char *)(v20-- + v23 - 1);
        ungetc_0(v21, (FILE *)v1[22]);
      }
      result = v22;
    }
  }
  else
  {
    result = fgetc((FILE *)v1[22]);
    if ( result == -1 )
      return -1;
    result = (unsigned __int8)result;
  }
  return result;
}

//----- (1001FEA0) --------------------------------------------------------
std::_String_base *__thiscall sub_1001FEA0(std::_String_base *this, char *a2)
{
  return sub_1001FBC0(this, 0, a2, strlen(a2));
}

//----- (1001FED0) --------------------------------------------------------
_DWORD *__thiscall sub_1001FED0(_DWORD *this, int a2, int a3)
{
  _DWORD *v3; // edi
  int v4; // esi

  v3 = this;
  if ( a3 )
  {
    *this = &unk_100361F4;
    this[2] = &unk_100361EC;
    this[3] = &off_10036100;
  }
  *(_DWORD *)((char *)this + *(_DWORD *)(*this + 4)) = off_10036104;
  this[1] = 0;
  *(_DWORD *)((char *)this + *(_DWORD *)(this[2] + 4) + 8) = &off_100360FC;
  v4 = (int)this + *(_DWORD *)(this[2] + 4) + 8;
  std::ios_base::_Init((std::ios_base *)v4);
  *(_DWORD *)(v4 + 40) = a2;
  *(_DWORD *)(v4 + 44) = 0;
  *(_BYTE *)(v4 + 48) = sub_1001EBC0((_DWORD **)v4, 32);
  if ( !*(_DWORD *)(v4 + 40) )
    std::ios_base::clear((std::ios_base *)v4, *(_DWORD *)(v4 + 8) | 4, 0);
  *(_DWORD *)(v4 + 4) = 0;
  *(_DWORD *)((char *)v3 + *(_DWORD *)(*v3 + 4)) = &off_10036108;
  return v3;
}
// 100360FC: using guessed type int (__stdcall *off_100360FC)(char);
// 10036100: using guessed type int (__thiscall *off_10036100)(void *, char);
// 10036104: using guessed type int (__stdcall *off_10036104[2])(char);
// 10036108: using guessed type int (__stdcall *off_10036108)(char);

//----- (1001FFB0) --------------------------------------------------------
char __thiscall sub_1001FFB0(_DWORD *this)
{
  _DWORD *v1; // esi
  void *v2; // eax
  char *v3; // edx
  int v4; // ebx
  int v5; // eax
  int v6; // eax
  void *v8; // eax
  _BYTE *v9; // ecx
  size_t v10; // edi
  _BYTE *v11; // [esp+14h] [ebp-2Ch]
  char v12; // [esp+18h] [ebp-28h]
  void *v13; // [esp+1Ch] [ebp-24h]
  int v14; // [esp+20h] [ebp-20h]
  char v15; // [esp+24h] [ebp-1Ch]
  int v16; // [esp+2Ch] [ebp-14h]
  unsigned int v17; // [esp+30h] [ebp-10h]
  int v18; // [esp+3Ch] [ebp-4h]

  v1 = this;
  if ( !this[15] || !*((_BYTE *)this + 76) )
    return 1;
  (*(void (__stdcall **)(signed int))(*this + 4))(-1);
  v17 = 15;
  v13 = 0;
  v14 = 0;
  v16 = 8;
  v15 = 0;
  v18 = 0;
  while ( 1 )
  {
    v2 = v13;
    v3 = (char *)v13;
    if ( v17 < 0x10 )
    {
      v3 = (char *)&v13;
      v2 = &v13;
    }
    v4 = (int)&v3[v16];
    v5 = (*(int (__stdcall **)(_DWORD *, void *, char *, _BYTE **))(*(_DWORD *)v1[15] + 24))(
           v1 + 20,
           v2,
           &v3[v16],
           &v11);
    if ( v5 )
      break;
    *((_BYTE *)v1 + 76) = 0;
LABEL_11:
    v8 = v13;
    v9 = v13;
    if ( v17 < 0x10 )
      v9 = &v13;
    if ( v11 != v9 )
    {
      if ( v17 < 0x10 )
        v8 = &v13;
      v10 = v11 - v9;
      if ( v10 != sub_1002672F(v8, v10, 1u, (FILE *)v1[22]) )
        goto LABEL_19;
    }
    if ( !*((_BYTE *)v1 + 76) )
      goto LABEL_9;
    sub_1001F8A0((std::_String_base *)&v12, v4, 8u, 0);
  }
  v6 = v5 - 1;
  if ( !v6 )
    goto LABEL_11;
  if ( v6 == 2 )
  {
LABEL_9:
    sub_1001ED90((int)&v12);
    return 1;
  }
LABEL_19:
  sub_1001ED90((int)&v12);
  return 0;
}

//----- (10020100) --------------------------------------------------------
_DWORD *__thiscall sub_10020100(void *this, _DWORD *a2, int a3, int a4, int a5, int a6, unsigned __int8 a7)
{
  int v7; // edx
  _DWORD *v8; // esi
  std::locale *v9; // eax
  std::locale::facet *v10; // eax
  int v11; // esi
  std::locale::facet *v12; // edi
  unsigned int v13; // eax
  void (__thiscall ***v14)(_DWORD, signed int); // esi
  std::_String_base *v15; // eax
  std::_String_base *v16; // eax
  int v17; // ebx
  unsigned int v18; // eax
  unsigned int v19; // edx
  int v20; // esi
  int v21; // ecx
  int v22; // eax
  unsigned __int8 *v23; // edi
  unsigned int v24; // ebx
  int v25; // ST14_4
  _DWORD *v26; // ST0C_4
  int v27; // ST08_4
  int v28; // ST00_4
  int v30; // [esp+10h] [ebp-60h]
  int v31; // [esp+14h] [ebp-5Ch]
  int v32; // [esp+18h] [ebp-58h]
  int v33; // [esp+1Ch] [ebp-54h]
  int v34; // [esp+20h] [ebp-50h]
  _DWORD *v35; // [esp+24h] [ebp-4Ch]
  char v36; // [esp+28h] [ebp-48h]
  void *v37; // [esp+2Ch] [ebp-44h]
  unsigned int v38; // [esp+3Ch] [ebp-34h]
  unsigned int v39; // [esp+40h] [ebp-30h]
  char v40; // [esp+44h] [ebp-2Ch]
  void *v41; // [esp+48h] [ebp-28h]
  unsigned int v42; // [esp+5Ch] [ebp-14h]
  int v43; // [esp+6Ch] [ebp-4h]

  v7 = *(_DWORD *)(a5 + 16);
  v33 = (int)this;
  if ( v7 & 0x4000 )
  {
    v9 = (std::locale *)sub_1001C0E0((_DWORD **)a5, &v30);
    v43 = 0;
    v10 = sub_10020440(v9);
    v11 = v30;
    v12 = v10;
    v43 = -1;
    if ( v30 )
    {
      std::_Lockit::_Lockit((std::_Lockit *)&v31, 0);
      v13 = *(_DWORD *)(v11 + 4);
      if ( v13 && v13 < 0xFFFFFFFF )
        *(_DWORD *)(v11 + 4) = v13 - 1;
      v14 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v11 + 4) != 0 ? 0 : v11);
      std::_Lockit::~_Lockit((std::_Lockit *)&v31);
      if ( v14 )
        (**v14)(v14, 1);
    }
    v39 = 15;
    v38 = 0;
    LOBYTE(v37) = 0;
    v43 = 1;
    if ( a7 )
    {
      v15 = (std::_String_base *)sub_10020420((void *)v12, (int)&v40);
      LOBYTE(v43) = 2;
      sub_1001F970((std::_String_base *)&v36, v15, 0, 0xFFFFFFFF);
      LOBYTE(v43) = 1;
      if ( v42 >= 0x10 )
        j__free(v41);
    }
    else
    {
      v16 = (std::_String_base *)sub_10020400((void *)v12, (int)&v40);
      LOBYTE(v43) = 3;
      sub_1001F970((std::_String_base *)&v36, v16, 0, 0xFFFFFFFF);
      LOBYTE(v43) = 1;
      if ( v42 >= 0x10 )
        j__free(v41);
    }
    v17 = a5;
    v18 = *(_DWORD *)(a5 + 24);
    v19 = v38;
    if ( (signed int)v18 <= 0 || v18 <= v38 )
      v20 = 0;
    else
      v20 = v18 - v38;
    v21 = a3;
    v22 = a4;
    if ( (*(_DWORD *)(a5 + 16) & 0x1C0) != 64 )
    {
      v31 = a3;
      v32 = a4;
      if ( v20 )
      {
        do
        {
          sub_10020330(&v31, a6);
          --v20;
        }
        while ( v20 );
        v19 = v38;
      }
      v21 = v31;
      v22 = v32;
      v20 = 0;
    }
    v23 = (unsigned __int8 *)v37;
    if ( v39 < 0x10 )
      v23 = (unsigned __int8 *)&v37;
    v34 = v21;
    v35 = (_DWORD *)v22;
    if ( v19 )
    {
      v24 = v19;
      do
      {
        sub_10020330(&v34, *v23++);
        --v24;
      }
      while ( v24 );
      v17 = a5;
    }
    v25 = v20;
    v8 = a2;
    v26 = v35;
    v27 = v34;
    v28 = v33;
    *(_DWORD *)(v17 + 24) = 0;
    sub_10020390(v28, a2, v27, v26, a6, v25);
    if ( v39 >= 0x10 )
      j__free(v37);
  }
  else
  {
    v8 = a2;
    (*(void (__stdcall **)(_DWORD *, int, int, int, int, _DWORD))(*(_DWORD *)this + 28))(a2, a3, a4, a5, a6, a7);
  }
  return v8;
}

//----- (10020330) --------------------------------------------------------
_BYTE *__thiscall sub_10020330(_DWORD *this, unsigned __int8 a2)
{
  _BYTE *v2; // esi
  int v3; // ecx
  _DWORD *v4; // eax
  unsigned __int8 **v5; // ecx
  unsigned __int8 *v6; // eax
  int v7; // eax

  v2 = this;
  v3 = this[1];
  if ( !v3
    || ((v4 = *(_DWORD **)(v3 + 36), !*v4) || *v4 >= (unsigned int)(*v4 + **(_DWORD **)(v3 + 52)) ? (v7 = (*(int (__stdcall **)(_DWORD))(*(_DWORD *)v3 + 4))(a2)) : (--**(_DWORD **)(v3 + 52), v5 = *(unsigned __int8 ***)(v3 + 36), v6 = *v5, ++*v5, *v6 = a2, v7 = a2),
        v7 == -1) )
  {
    *v2 = 1;
  }
  return v2;
}

//----- (10020390) --------------------------------------------------------
_DWORD *__cdecl sub_10020390(int a1, _DWORD *a2, int a3, _DWORD *a4, unsigned __int8 a5, int a6)
{
  int v6; // edi
  _DWORD *v7; // eax
  _DWORD *v8; // edx
  _DWORD *v9; // eax
  unsigned __int8 *v10; // ecx
  int v11; // eax
  _DWORD *result; // eax

  if ( a6 )
  {
    v6 = a6;
    do
    {
      if ( !a4 )
        goto LABEL_14;
      v7 = (_DWORD *)a4[9];
      if ( *v7 && (v8 = (_DWORD *)a4[13], *v7 < (unsigned int)(*v7 + *v8)) )
      {
        --*v8;
        v9 = (_DWORD *)a4[9];
        v10 = (unsigned __int8 *)(*v9)++;
        *v10 = a5;
        v11 = a5;
      }
      else
      {
        v11 = (*(int (__thiscall **)(_DWORD *, _DWORD))(*a4 + 4))(a4, a5);
      }
      if ( v11 == -1 )
LABEL_14:
        LOBYTE(a3) = 1;
      --v6;
    }
    while ( v6 );
  }
  result = a2;
  a2[1] = a4;
  *a2 = a3;
  return result;
}

//----- (10020400) --------------------------------------------------------
int __thiscall sub_10020400(void *this, int a2)
{
  (*(void (__stdcall **)(int))(*(_DWORD *)this + 16))(a2);
  return a2;
}

//----- (10020420) --------------------------------------------------------
int __thiscall sub_10020420(void *this, int a2)
{
  (*(void (__stdcall **)(int))(*(_DWORD *)this + 20))(a2);
  return a2;
}

//----- (10020440) --------------------------------------------------------
std::locale::facet *__cdecl sub_10020440(std::locale *a1)
{
  std::locale::facet *v1; // esi
  std::locale::facet *v2; // edi
  unsigned int v3; // eax
  std::locale::facet *v5; // [esp+0h] [ebp-24h]
  char v6; // [esp+4h] [ebp-20h]
  char v7; // [esp+8h] [ebp-1Ch]
  char v8; // [esp+Ch] [ebp-18h]
  int v9; // [esp+20h] [ebp-4h]

  std::_Lockit::_Lockit((std::_Lockit *)&v7, 0);
  v5 = (std::locale::facet *)dword_1006ACEC;
  v9 = 0;
  if ( !dword_1006ACF4 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
    if ( !dword_1006ACF4 )
      dword_1006ACF4 = ++dword_1006B2C0;
    std::_Lockit::~_Lockit((std::_Lockit *)&v6);
  }
  v1 = std::locale::_Getfacet(a1, dword_1006ACF4);
  if ( !v1 )
  {
    v1 = v5;
    if ( !v5 )
    {
      if ( sub_10020550(&v5) == -1 )
      {
        sub_10026182((exception *)&v8, "bad cast");
        _CxxThrowException(&v8, &_TI2_AVbad_cast__);
      }
      v1 = v5;
      dword_1006ACEC = (int)v5;
      v2 = v5;
      std::_Lockit::_Lockit((std::_Lockit *)&v6, 0);
      v3 = *((_DWORD *)v2 + 1);
      if ( v3 < 0xFFFFFFFF )
        *((_DWORD *)v2 + 1) = v3 + 1;
      std::_Lockit::~_Lockit((std::_Lockit *)&v6);
      std::locale::facet::_Register(v2);
    }
  }
  v9 = -1;
  std::_Lockit::~_Lockit((std::_Lockit *)&v7);
  return v1;
}
// 10026258: using guessed type void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD);
// 1003900C: using guessed type int _TI2_AVbad_cast__;
// 1006ACEC: using guessed type int dword_1006ACEC;
// 1006B2C0: using guessed type int dword_1006B2C0;

//----- (10020550) --------------------------------------------------------
signed int __cdecl sub_10020550(_DWORD *a1)
{
  _DWORD *v1; // eax
  _DWORD *v2; // esi
  int v3; // eax
  char v5; // [esp+8h] [ebp-80h]
  int v6; // [esp+84h] [ebp-4h]

  if ( a1 && !*a1 )
  {
    v1 = operator new(0x18u);
    v2 = v1;
    v6 = 0;
    if ( v1 )
    {
      v1[1] = 0;
      LOBYTE(v6) = 1;
      *v1 = &off_100361FC;
      v3 = std::_Locinfo::_Locinfo((std::_Locinfo *)&v5, "C");
      LOBYTE(v6) = 2;
      sub_100206C0(v2, v3);
      LOBYTE(v6) = 1;
      std::_Locinfo::~_Locinfo((std::_Locinfo *)&v5);
    }
    else
    {
      v2 = 0;
    }
    *a1 = v2;
  }
  return 4;
}
// 100361FC: using guessed type int (__thiscall *off_100361FC)(void *, char);

//----- (10020600) --------------------------------------------------------
char __thiscall sub_10020600(_BYTE *this)
{
  return this[12];
}

//----- (10020610) --------------------------------------------------------
char __thiscall sub_10020610(_BYTE *this)
{
  return this[13];
}

//----- (10020620) --------------------------------------------------------
void *__thiscall sub_10020620(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10020640((void **)this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10020640) --------------------------------------------------------
void __thiscall sub_10020640(void **this)
{
  void **v1; // esi

  v1 = this;
  *this = &off_100361FC;
  sub_10020690(this);
  *v1 = &std::locale::facet::`vftable';
}
// 100361FC: using guessed type int (__thiscall *off_100361FC)(void *, char);
// 1003873C: using guessed type void *std::locale::facet::`vftable';

//----- (10020690) --------------------------------------------------------
void __thiscall sub_10020690(void **this)
{
  void **v1; // esi

  v1 = this;
  j_j__free(this[2]);
  j_j__free(v1[4]);
  j_j__free(v1[5]);
}

//----- (100206C0) --------------------------------------------------------
_BYTE *__thiscall sub_100206C0(_DWORD *this, int a2)
{
  _DWORD *v2; // esi
  void **v3; // edi
  _Cvtvec v4; // rax
  const char *v5; // ecx
  _Cvtvec v6; // rax
  _Cvtvec v7; // rax
  _BYTE *result; // eax
  int v9; // [esp+0h] [ebp-30h]
  unsigned int v10; // [esp+Ch] [ebp-24h]
  unsigned int v11; // [esp+10h] [ebp-20h]
  unsigned int v12; // [esp+14h] [ebp-1Ch]
  unsigned int v13; // [esp+18h] [ebp-18h]
  void *v14; // [esp+1Ch] [ebp-14h]
  int *v15; // [esp+20h] [ebp-10h]
  int v16; // [esp+2Ch] [ebp-4h]

  v2 = this;
  v15 = &v9;
  v14 = this;
  v3 = sub_1002677B();
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0;
  v16 = 0;
  v4 = _Getcvt();
  v5 = (const char *)v3[2];
  v12 = v4._Hand;
  v13 = v4._Page;
  v2[2] = sub_100207A0(v5);
  v6 = _Getcvt();
  v13 = v6._Page;
  v12 = v6._Hand;
  v2[4] = sub_100207A0("false");
  v7 = _Getcvt();
  v10 = v7._Hand;
  v11 = v7._Page;
  v2[5] = sub_100207A0("true");
  _Getcvt();
  *((_BYTE *)v2 + 12) = *(_BYTE *)*v3;
  _Getcvt();
  result = v3[1];
  *((_BYTE *)v2 + 13) = *result;
  return result;
}
// 10026258: using guessed type void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD);

//----- (100207A0) --------------------------------------------------------
_BYTE *__cdecl sub_100207A0(const char *a1)
{
  const char *v1; // edi
  unsigned int v2; // kr00_4
  int v3; // esi
  _BYTE *result; // eax
  _BYTE *v5; // ecx

  v1 = a1;
  v2 = strlen(a1);
  v3 = v2 + 1;
  result = operator new(v2 + 1);
  v5 = result;
  if ( v2 != -1 )
  {
    do
    {
      *v5++ = *v1++;
      --v3;
    }
    while ( v3 );
  }
  return result;
}

//----- (100207E0) --------------------------------------------------------
int __thiscall sub_100207E0(int this, char *a2)
{
  int v2; // esi

  v2 = this;
  *(_DWORD *)(this + 24) = 15;
  *(_DWORD *)(this + 20) = 0;
  *(_BYTE *)(this + 4) = 0;
  sub_1001FBC0((std::_String_base *)this, (int)a2, a2, strlen(a2));
  return v2;
}

//----- (10020820) --------------------------------------------------------
_DWORD *__thiscall sub_10020820(_DWORD *this, std::_String_base *a2)
{
  _DWORD *v2; // esi
  int v3; // ecx

  v2 = this;
  sub_100260C7(this);
  v3 = (int)(v2 + 3);
  *v2 = &std::logic_error::`vftable';
  *(_DWORD *)(v3 + 20) = 0;
  *(_DWORD *)(v3 + 24) = 15;
  *(_BYTE *)(v3 + 4) = 0;
  sub_1001F970((std::_String_base *)(v2 + 3), a2, 0, 0xFFFFFFFF);
  return v2;
}
// 100387C8: using guessed type void *std::logic_error::`vftable';

//----- (10020880) --------------------------------------------------------
void __thiscall sub_10020880(void **this)
{
  void **v1; // esi

  v1 = this;
  *this = &std::logic_error::`vftable';
  if ( (unsigned int)this[9] >= 0x10 )
    j__free(this[4]);
  v1[9] = (void *)15;
  v1[8] = 0;
  *((_BYTE *)v1 + 16) = 0;
  sub_1002615F(v1);
}
// 100387C8: using guessed type void *std::logic_error::`vftable';

//----- (100208C0) --------------------------------------------------------
signed int __thiscall sub_100208C0(_DWORD **this, signed int a2)
{
  _DWORD **v2; // esi
  signed int result; // eax
  unsigned int v4; // ecx
  _DWORD *v5; // eax
  _DWORD *v6; // esi
  _BYTE *v7; // eax
  std::_String_base *v8; // ecx
  void **v9; // eax
  unsigned int v10; // ebp
  void **v11; // edx
  int v12; // eax
  _BYTE *v13; // ecx
  size_t v14; // edi
  bool v15; // zf
  char v16; // [esp+1Dh] [ebp-31h]
  _BYTE *v17; // [esp+1Eh] [ebp-30h]
  int v18; // [esp+22h] [ebp-2Ch]
  char v19; // [esp+26h] [ebp-28h]
  void *v20; // [esp+2Ah] [ebp-24h]
  int v21; // [esp+2Eh] [ebp-20h]
  char v22; // [esp+32h] [ebp-1Ch]
  unsigned int v23; // [esp+3Ah] [ebp-14h]
  unsigned int v24; // [esp+3Eh] [ebp-10h]
  int v25; // [esp+4Ah] [ebp-4h]

  v2 = this;
  if ( a2 == -1 )
    return 0;
  v4 = *this[9];
  if ( v4 )
  {
    v5 = v2[13];
    if ( v4 < v4 + *v5 )
    {
      --*v5;
      v6 = v2[9];
      v7 = (_BYTE *)(*v6)++;
      *v7 = a2;
      return a2;
    }
  }
  if ( !v2[22] )
    return -1;
  if ( v2[15] )
  {
    v8 = (std::_String_base *)v2[18];
    v16 = a2;
    sub_1001E880(v8, 0, 0xFFFFFFFF);
    v24 = 15;
    v20 = 0;
    v21 = 0;
    v23 = 8;
    v22 = 0;
    v25 = 0;
LABEL_12:
    v9 = (void **)v20;
    v10 = v24;
    while ( 1 )
    {
      v11 = v9;
      if ( v10 < 0x10 )
      {
        v11 = &v20;
        v9 = &v20;
      }
      v12 = (*(int (__stdcall **)(_DWORD **, char *, _BYTE **, int *, void **, void **, _BYTE **))(*v2[15] + 20))(
              v2 + 20,
              &v16,
              &v17,
              &v18,
              v9,
              &v11[v23 / 4],
              &v17);
      if ( v12 < 0 )
        goto LABEL_32;
      if ( v12 > 1 )
        break;
      v10 = v24;
      v9 = (void **)v20;
      v13 = v20;
      if ( v24 < 0x10 )
        v13 = &v20;
      v14 = v17 - v13;
      if ( v17 != v13 )
      {
        if ( v24 < 0x10 )
          v9 = &v20;
        if ( v14 != sub_1002672F(v9, 1u, v14, (FILE *)v2[22]) )
          goto LABEL_32;
        v9 = (void **)v20;
        v10 = v24;
      }
      v15 = v18 == (_DWORD)&v16;
      *((_BYTE *)v2 + 76) = 1;
      if ( !v15 )
      {
        sub_1001ED90((int)&v19);
        return a2;
      }
      if ( !v14 )
      {
        sub_1001F8A0((std::_String_base *)&v19, (int)(v2 + 20), 8u, 0);
        goto LABEL_12;
      }
    }
    if ( v12 != 3 )
    {
LABEL_32:
      sub_1001ED90((int)&v19);
      return -1;
    }
    if ( fputc(v16, (FILE *)v2[22]) == -1 )
    {
      sub_1001ED90((int)&v19);
      result = -1;
    }
    else
    {
      sub_1001ED90((int)&v19);
      result = a2;
    }
  }
  else
  {
    if ( fputc((char)a2, (FILE *)v2[22]) == -1 )
      return -1;
    result = a2;
  }
  return result;
}

//----- (10020B30) --------------------------------------------------------
_DWORD *__thiscall sub_10020B30(_DWORD *this, _DWORD *a2, int a3, int a4, int a5)
{
  _DWORD *v5; // esi
  _DWORD *v6; // ecx
  int i; // edi
  int v8; // eax
  int v9; // eax
  int v10; // eax
  _DWORD *result; // eax
  fpos_t v12; // kr00_8
  fpos_t v13; // [esp+8h] [ebp-8h]

  v5 = this;
  v6 = (_DWORD *)this[8];
  if ( (unsigned int)(*v6 + *(_DWORD *)v5[12]) > *v6 && (_DWORD *)*v6 == v5 + 17 && a4 == 1 )
  {
    if ( v5[15] )
    {
      for ( i = *(_DWORD *)(v5[18] + 20); i > 0; ungetc_0(*(char *)(v9 + i), (FILE *)v5[22]) )
      {
        v8 = v5[18];
        --i;
        if ( *(_DWORD *)(v8 + 24) < 0x10u )
          v9 = v8 + 4;
        else
          v9 = *(_DWORD *)(v8 + 4);
      }
      sub_1001E880((std::_String_base *)v5[18], 0, 0xFFFFFFFF);
      v5[20] = v5[16];
    }
    else
    {
      --a3;
    }
  }
  if ( !v5[22] || !sub_1001FFB0(v5) || (a3 || a4 != 1) && fseek((FILE *)v5[22], a3, a4) || fgetpos((FILE *)v5[22], &v13) )
  {
    result = a2;
    *a2 = -1;
    a2[2] = dword_1006B2E0;
    a2[3] = dword_1006B2E4;
    a2[4] = dword_1006ACD8;
  }
  else
  {
    v10 = (int)(v5 + 17);
    if ( *(_DWORD **)v5[8] == v5 + 17 )
    {
      *(_DWORD *)v5[4] = v10;
      *(_DWORD *)v5[8] = v10;
      *(_DWORD *)v5[12] = 0;
    }
    result = a2;
    v12 = v13;
    a2[4] = v5[20];
    *a2 = 0;
    *((_QWORD *)a2 + 1) = v12;
  }
  return result;
}
// 1006ACD8: using guessed type int dword_1006ACD8;
// 1006B2E0: using guessed type int dword_1006B2E0;
// 1006B2E4: using guessed type int dword_1006B2E4;

//----- (10020C70) --------------------------------------------------------
_DWORD *__thiscall sub_10020C70(_DWORD *this, _DWORD *a2, int a3, int a4, fpos_t a5, int a6, int a7, int a8)
{
  _DWORD *v8; // esi
  std::_String_base *v9; // ecx
  int v10; // eax
  _DWORD *result; // eax
  fpos_t v12; // kr00_8
  fpos_t v13; // [esp+4h] [ebp-8h]

  v8 = this;
  v13 = a5;
  if ( !this[22]
    || !sub_1001FFB0(this)
    || fsetpos((FILE *)v8[22], &v13)
    || a3 && fseek((FILE *)v8[22], a3, 1)
    || fgetpos((FILE *)v8[22], &v13) )
  {
    result = a2;
    *a2 = -1;
    a2[2] = dword_1006B2E0;
    a2[3] = dword_1006B2E4;
    a2[4] = dword_1006ACD8;
  }
  else
  {
    v9 = (std::_String_base *)v8[18];
    if ( v9 )
    {
      v8[20] = a6;
      sub_1001E880(v9, 0, 0xFFFFFFFF);
    }
    v10 = (int)(v8 + 17);
    if ( *(_DWORD **)v8[8] == v8 + 17 )
    {
      *(_DWORD *)v8[4] = v10;
      *(_DWORD *)v8[8] = v10;
      *(_DWORD *)v8[12] = 0;
    }
    result = a2;
    v12 = v13;
    a2[4] = v8[20];
    *a2 = 0;
    *((_QWORD *)a2 + 1) = v12;
  }
  return result;
}
// 1006ACD8: using guessed type int dword_1006ACD8;
// 1006B2E0: using guessed type int dword_1006B2E0;
// 1006B2E4: using guessed type int dword_1006B2E4;

//----- (10020D80) --------------------------------------------------------
_DWORD *__thiscall sub_10020D80(_DWORD *this)
{
  _DWORD *v1; // esi
  int v2; // edx

  v1 = this;
  if ( !this[22] || !sub_1001FFB0(this) || fclose((FILE *)v1[22]) )
    return 0;
  *((_BYTE *)v1 + 84) = 0;
  *((_BYTE *)v1 + 76) = 0;
  sub_1001E510(v1);
  v1[22] = 0;
  v1[20] = dword_1006ACDC;
  v2 = dword_1006ACDC;
  v1[15] = 0;
  v1[16] = v2;
  return v1;
}
// 1006ACDC: using guessed type int dword_1006ACDC;

//----- (10020DE0) --------------------------------------------------------
int __thiscall sub_10020DE0(void *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v7; // esi
  const char *v8; // eax
  int v9; // eax
  char v11; // [esp+8h] [ebp-48h]
  char v12; // [esp+10h] [ebp-40h]

  v7 = (int)this;
  v8 = sub_10020E40((int)this, &v11, "ld", *(_DWORD *)(a5 + 16));
  v9 = sprintf(&v12, v8, a7);
  sub_10020ED0(v7, a2, a3, a4, a5, a6, &v12, v9);
  return a2;
}

//----- (10020E40) --------------------------------------------------------
_BYTE *__cdecl sub_10020E40(int a1, _BYTE *a2, _BYTE *a3, __int16 a4)
{
  _BYTE *result; // eax
  _BYTE *v5; // edx
  _BYTE *v6; // edx
  int v7; // esi
  _BYTE *v8; // edx
  char v9; // cl

  result = a2;
  *a2 = 37;
  v5 = a2 + 1;
  if ( a4 & 0x20 )
  {
    *v5 = 43;
    v5 = a2 + 2;
  }
  if ( a4 & 8 )
    *v5++ = 35;
  if ( *a3 == 76 )
  {
    *v5 = 73;
    v6 = v5 + 1;
    *v6 = 54;
    v5 = v6 + 1;
    *v5 = 52;
  }
  else
  {
    *v5 = *a3;
  }
  v7 = a4 & 0xE00;
  v8 = v5 + 1;
  if ( v7 == 1024 )
  {
    *v8 = 111;
    v8[1] = 0;
  }
  else
  {
    if ( v7 == 2048 )
      v9 = ~(8 * a4) & 0x20 | 0x58;
    else
      v9 = a3[1];
    *v8 = v9;
    v8[1] = 0;
  }
  return result;
}

//----- (10020ED0) --------------------------------------------------------
int __cdecl sub_10020ED0(int a1, int a2, int a3, int a4, int a5, int a6, void *a7, size_t a8)
{
  std::locale *v8; // eax
  std::locale::facet *v9; // eax
  int v10; // esi
  std::locale::facet *v11; // edi
  unsigned int v12; // eax
  void (__thiscall ***v13)(_DWORD, signed int); // esi
  unsigned __int8 *v14; // ecx
  char v15; // al
  bool v16; // zf
  char v17; // al
  _BYTE *v18; // ebx
  _BYTE *v19; // eax
  _BYTE *v20; // eax
  int v21; // eax
  size_t v22; // ebp
  size_t v23; // esi
  unsigned __int8 *v24; // edi
  int v25; // esi
  int v26; // esi
  int v27; // eax
  _DWORD *v28; // eax
  int v29; // ecx
  signed int v30; // eax
  unsigned __int8 *v31; // ebx
  int *v32; // eax
  int v33; // ebx
  int v34; // eax
  int *v35; // eax
  int v36; // ecx
  _DWORD *v37; // eax
  signed int v39; // [esp+10h] [ebp-40h]
  int v40; // [esp+14h] [ebp-3Ch]
  int v41; // [esp+18h] [ebp-38h]
  std::locale::facet *v42; // [esp+1Ch] [ebp-34h]
  int v43; // [esp+20h] [ebp-30h]
  _DWORD *v44; // [esp+24h] [ebp-2Ch]
  char v45; // [esp+28h] [ebp-28h]
  void *v46; // [esp+2Ch] [ebp-24h]
  unsigned int v47; // [esp+40h] [ebp-10h]
  int v48; // [esp+4Ch] [ebp-4h]

  v8 = (std::locale *)sub_1001C0E0((_DWORD **)a5, &v41);
  v48 = 0;
  v9 = sub_10020440(v8);
  v10 = v41;
  v11 = v9;
  v42 = v9;
  v48 = -1;
  if ( v41 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&v40, 0);
    v12 = *(_DWORD *)(v10 + 4);
    if ( v12 > 0 && v12 < 0xFFFFFFFF )
      *(_DWORD *)(v10 + 4) = v12 - 1;
    v13 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v10 + 4) != 0 ? 0 : v10);
    std::_Lockit::~_Lockit((std::_Lockit *)&v40);
    if ( v13 )
      (**v13)(v13, 1);
  }
  sub_10021230((void *)v11, (int)&v45);
  v14 = (unsigned __int8 *)a7;
  v15 = *(_BYTE *)a7;
  v16 = *(_BYTE *)a7 == 43;
  v48 = 1;
  if ( v16 || v15 == 45 )
  {
    v39 = 1;
  }
  else if ( v15 != 48 || (v17 = *((_BYTE *)a7 + 1), v17 != 120) && v17 != 88 )
  {
    v39 = 0;
  }
  else
  {
    v39 = 2;
  }
  v18 = v46;
  v19 = v46;
  if ( v47 < 0x10 )
    v19 = &v46;
  if ( *v19 == 127 )
    goto LABEL_52;
  v20 = v46;
  if ( v47 < 0x10 )
    v20 = &v46;
  if ( *v20 <= 0 )
  {
LABEL_52:
    v22 = a8;
  }
  else
  {
    if ( v47 < 0x10 )
      v18 = &v46;
    LOBYTE(v21) = *v18;
    v22 = a8;
    v23 = a8;
    if ( *v18 != 127 )
    {
      while ( (char)v21 > 0 )
      {
        v21 = (char)v21;
        if ( (char)v21 >= v23 - v39 )
          break;
        v23 -= v21;
        v24 = &v14[v23];
        memcpy(&v14[v23 + 1], &v14[v23], v22 - v23 + 1);
        *v24 = 44;
        ++v22;
        if ( v18[1] > 0 )
          ++v18;
        LOBYTE(v21) = *v18;
        if ( *v18 == 127 )
        {
          v14 = (unsigned __int8 *)a7;
          break;
        }
        v14 = (unsigned __int8 *)a7;
      }
    }
  }
  v25 = *(_DWORD *)(a5 + 24);
  if ( v25 <= 0 || v25 <= v22 )
    v26 = 0;
  else
    v26 = v25 - v22;
  v27 = *(_DWORD *)(a5 + 16) & 0x1C0;
  if ( v27 == 64 )
  {
    v33 = a4;
  }
  else
  {
    v16 = v27 == 256;
    v28 = (_DWORD *)a4;
    if ( v16 )
    {
      v44 = (_DWORD *)a4;
      v30 = v39;
      v31 = v14;
      v43 = a3;
      if ( v39 )
      {
        v40 = v39;
        do
        {
          sub_10020330(&v43, *v31++);
          --v40;
        }
        while ( v40 );
        v14 = (unsigned __int8 *)a7;
        v30 = v39;
      }
      a7 = &v14[v30];
      v29 = v43;
      v22 -= v30;
      v28 = v44;
    }
    else
    {
      v29 = a3;
    }
    v32 = sub_10020390(a1, &v43, v29, v28, a6, v26);
    v33 = v32[1];
    a3 = *v32;
    v26 = 0;
  }
  v34 = (*(int (**)(void))(*(_DWORD *)v42 + 8))();
  v35 = (int *)sub_10021160(a1, (int)&v43, a3, v33, a7, v22, v34);
  v36 = *v35;
  v37 = (_DWORD *)v35[1];
  *(_DWORD *)(a5 + 24) = 0;
  sub_10020390(a1, (_DWORD *)a2, v36, v37, a6, v26);
  if ( v47 >= 0x10 )
    j__free(v46);
  return a2;
}

//----- (10021160) --------------------------------------------------------
int __cdecl sub_10021160(int a1, int a2, int a3, int a4, void *a5, size_t a6, int a7)
{
  int v7; // ebx
  int v8; // edi
  _BYTE *v9; // eax
  size_t v10; // esi
  int v11; // edx
  _DWORD *v12; // ecx
  size_t v13; // edi
  bool v14; // zf
  int *v15; // eax
  int result; // eax
  unsigned __int8 *v17; // [esp+Ch] [ebp-14h]
  int v18; // [esp+10h] [ebp-10h]
  _DWORD *v19; // [esp+14h] [ebp-Ch]
  char v20; // [esp+18h] [ebp-8h]
  char *v21; // [esp+38h] [ebp+18h]
  size_t v22; // [esp+3Ch] [ebp+1Ch]

  v7 = a4;
  v8 = a3;
  while ( 1 )
  {
    v9 = memchr(a5, 44, a6);
    if ( v9 )
      v10 = v9 - (_BYTE *)a5;
    else
      v10 = a6;
    v17 = (unsigned __int8 *)a5;
    v11 = v8;
    v12 = (_DWORD *)v7;
    v18 = v8;
    v19 = (_DWORD *)v7;
    if ( v10 )
    {
      v13 = v10;
      do
      {
        sub_10020330(&v18, *v17);
        --v13;
        ++v17;
      }
      while ( v13 );
      v12 = v19;
      v11 = v18;
    }
    v21 = (char *)a5 + v10;
    v14 = a6 == v10;
    v8 = v11;
    v7 = (int)v12;
    v22 = a6 - v10;
    if ( v14 )
      break;
    if ( (_BYTE)a7 )
    {
      v15 = sub_10020390(a1, &v20, v11, v12, a7, 1);
      v8 = *v15;
      v7 = v15[1];
    }
    a5 = v21 + 1;
    a6 = v22 - 1;
  }
  result = a2;
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v12;
  return result;
}

//----- (10021230) --------------------------------------------------------
int __thiscall sub_10021230(void *this, int a2)
{
  (*(void (__stdcall **)(int))(*(_DWORD *)this + 12))(a2);
  return a2;
}

//----- (10021250) --------------------------------------------------------
int __thiscall sub_10021250(int this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v7; // esi
  const char *v8; // eax
  int v9; // eax
  char v11; // [esp+8h] [ebp-48h]
  char v12; // [esp+10h] [ebp-40h]

  v7 = this;
  v8 = sub_10020E40(this, &v11, "lu", *(_DWORD *)(a5 + 16));
  v9 = sprintf(&v12, v8, a7);
  sub_10020ED0(v7, a2, a3, a4, a5, a6, &v12, v9);
  return a2;
}

//----- (100212B0) --------------------------------------------------------
int __thiscall sub_100212B0(int this, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8; // esi
  int v9; // ST2C_4
  int v10; // ST28_4
  const char *v11; // eax
  int v12; // eax
  char v14; // [esp+8h] [ebp-40h]

  v8 = this;
  v9 = a8;
  v10 = a7;
  v11 = sub_10020E40(this, &a7, "Ld", *(_DWORD *)(a5 + 16));
  v12 = sprintf(&v14, v11, v10, v9);
  sub_10020ED0(v8, a2, a3, a4, a5, a6, &v14, v12);
  return a2;
}

//----- (10021320) --------------------------------------------------------
int __thiscall sub_10021320(int this, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  int v8; // esi
  int v9; // ST2C_4
  int v10; // ST28_4
  const char *v11; // eax
  int v12; // eax
  char v14; // [esp+8h] [ebp-40h]

  v8 = this;
  v9 = a8;
  v10 = a7;
  v11 = sub_10020E40(this, &a7, "Lu", *(_DWORD *)(a5 + 16));
  v12 = sprintf(&v14, v11, v10, v9);
  sub_10020ED0(v8, a2, a3, a4, a5, a6, &v14, v12);
  return a2;
}

//----- (10021390) --------------------------------------------------------
int __thiscall sub_10021390(void *this, int a2, int a3, int a4, int a5, int a6, double a7)
{
  signed int v7; // eax
  int v8; // edx
  signed int v9; // ebp
  double v10; // st7
  int v11; // esi
  unsigned int v12; // ebx
  unsigned int v13; // edi
  char v14; // dl
  const char *v15; // eax
  int v16; // eax
  int v18; // [esp+18h] [ebp-78h]
  char v19; // [esp+1Ch] [ebp-74h]
  char v20; // [esp+24h] [ebp-6Ch]

  v18 = (int)this;
  v7 = *(_DWORD *)(a5 + 20);
  if ( v7 <= 0 )
  {
    v8 = *(_DWORD *)(a5 + 16);
    if ( !(v8 & 0x2000) )
      v7 = 6;
  }
  v9 = 36;
  if ( v7 <= 36 )
    v9 = v7;
  v10 = a7;
  v11 = v7 - v9;
  v12 = 0;
  v13 = 0;
  if ( (*(_DWORD *)(a5 + 16) & 0x3000) == 0x2000 )
  {
    if ( a7 >= 0.0 )
    {
      v14 = 0;
    }
    else
    {
      v14 = 1;
      v10 = -a7;
    }
    for ( ; v10 >= 1.0e35; v12 += 10 )
    {
      if ( v12 >= 0x1388 )
        break;
      v10 = v10 * 1.0e-10;
    }
    if ( v10 > 0.0 && v11 >= 10 )
    {
      do
      {
        if ( v10 > 1.0e-35 )
          break;
        if ( v13 >= 0x1388 )
          break;
        v10 = v10 * 1.0e10;
        v11 -= 10;
        v13 += 10;
      }
      while ( v11 >= 10 );
    }
    if ( v14 )
      v10 = -v10;
  }
  v15 = sub_100214F0((int)this, &v19, 0, *(_DWORD *)(a5 + 16));
  v16 = sprintf(&v20, v15, v9, LODWORD(v10), (_DWORD)(*(unsigned __int64 *)&v10 >> 32));
  sub_10021550(v18, a2, a3, a4, a5, a6, &v20, v12, v13, v11, v16);
  return a2;
}

//----- (100214F0) --------------------------------------------------------
_BYTE *__cdecl sub_100214F0(int a1, _BYTE *a2, char a3, __int16 a4)
{
  _BYTE *result; // eax
  _BYTE *v5; // ecx
  _BYTE *v6; // ecx
  _BYTE *v7; // ecx

  result = a2;
  *a2 = 37;
  v5 = a2 + 1;
  if ( a4 & 0x20 )
  {
    *v5 = 43;
    v5 = a2 + 2;
  }
  if ( a4 & 0x10 )
    *v5++ = 35;
  *v5 = 46;
  v6 = v5 + 1;
  *v6 = 42;
  v7 = v6 + 1;
  if ( a3 )
    *v7++ = a3;
  if ( (a4 & 0x3000) == 0x2000 )
    *v7 = 102;
  else
    *v7 = 2 * ((a4 & 0x3000) != 4096) + 101;
  v7[1] = 0;
  return result;
}

//----- (10021550) --------------------------------------------------------
int __cdecl sub_10021550(int a1, int a2, int a3, int a4, int a5, int a6, void *a7, int a8, int a9, int a10, size_t a11)
{
  std::locale *v11; // eax
  std::locale::facet *v12; // eax
  int v13; // esi
  std::locale::facet *v14; // edi
  unsigned int v15; // eax
  void (__thiscall ***v16)(_DWORD, signed int); // esi
  int v17; // edx
  unsigned __int8 *v18; // edi
  char v19; // al
  bool v20; // zf
  _BYTE *v21; // eax
  _BYTE *v22; // eax
  _BYTE *v23; // eax
  _BYTE *v24; // eax
  unsigned int v25; // esi
  _BYTE *v26; // edi
  const char *v27; // eax
  unsigned int v28; // esi
  int v29; // eax
  int v30; // ecx
  size_t v31; // eax
  int v32; // eax
  int *v33; // eax
  _DWORD *v34; // eax
  unsigned __int8 v35; // cl
  int v36; // ecx
  int v37; // ebp
  int v38; // ebx
  _BYTE *v39; // eax
  int v40; // eax
  int *v41; // eax
  int v42; // ebx
  _DWORD *v43; // ebp
  unsigned __int8 v44; // al
  int *v45; // eax
  int *v46; // eax
  _BYTE *v47; // eax
  int v48; // eax
  int *v49; // eax
  unsigned __int8 *v50; // ecx
  int v51; // edx
  int v52; // eax
  unsigned __int8 v53; // ST48_1
  int v54; // eax
  int *v55; // eax
  int v56; // ecx
  _DWORD *v57; // eax
  char v59[4]; // [esp+10h] [ebp-70h]
  unsigned int v60; // [esp+14h] [ebp-6Ch]
  _DWORD *v61; // [esp+18h] [ebp-68h]
  int v62; // [esp+1Ch] [ebp-64h]
  int v63; // [esp+20h] [ebp-60h]
  std::locale::facet *v64; // [esp+24h] [ebp-5Ch]
  int v65; // [esp+28h] [ebp-58h]
  int v66; // [esp+2Ch] [ebp-54h]
  int v67; // [esp+34h] [ebp-4Ch]
  char v68; // [esp+3Ch] [ebp-44h]
  char *v69; // [esp+40h] [ebp-40h]
  size_t v70; // [esp+50h] [ebp-30h]
  unsigned int v71; // [esp+54h] [ebp-2Ch]
  char v72; // [esp+58h] [ebp-28h]
  void *v73; // [esp+5Ch] [ebp-24h]
  unsigned int v74; // [esp+70h] [ebp-10h]
  int v75; // [esp+7Ch] [ebp-4h]
  void *v76; // [esp+9Ch] [ebp+1Ch]
  int v77; // [esp+A0h] [ebp+20h]

  v11 = (std::locale *)sub_1001C0E0((_DWORD **)a5, &v63);
  v75 = 0;
  v12 = sub_10020440(v11);
  v13 = v63;
  v14 = v12;
  v64 = v12;
  v75 = -1;
  if ( v63 )
  {
    std::_Lockit::_Lockit((std::_Lockit *)&v62, 0);
    v15 = *(_DWORD *)(v13 + 4);
    if ( v15 > 0 && v15 < 0xFFFFFFFF )
      *(_DWORD *)(v13 + 4) = v15 - 1;
    v16 = (void (__thiscall ***)(_DWORD, signed int))(*(_DWORD *)(v13 + 4) != 0 ? 0 : v13);
    std::_Lockit::~_Lockit((std::_Lockit *)&v62);
    if ( v16 )
      (**v16)(v16, 1);
  }
  sub_10021230((void *)v14, (int)&v72);
  v17 = *(_DWORD *)v14;
  v75 = 1;
  LOBYTE(v62) = (*(int (__thiscall **)(std::locale::facet *))(v17 + 8))(v14);
  v71 = 15;
  v70 = 0;
  LOBYTE(v69) = 0;
  v18 = (unsigned __int8 *)a7;
  v19 = *(_BYTE *)a7;
  v20 = *(_BYTE *)a7 == 43;
  LOBYTE(v75) = 2;
  if ( v20 || (v60 = 0, v19 == 45) )
    v60 = 1;
  v59[0] = *(_BYTE *)*sub_1002677B();
  v59[1] = 101;
  v59[2] = 0;
  v21 = v73;
  if ( v74 < 0x10 )
    v21 = &v73;
  if ( *v21 != 127 )
  {
    v22 = v73;
    if ( v74 < 0x10 )
      v22 = &v73;
    if ( *v22 > 0 )
    {
      sub_10021C20((std::_String_base *)&v68, (int)v73, (char *)a7, a11);
      v23 = memchr(a7, 101, a11);
      if ( v23 )
        sub_10021B00((std::_String_base *)&v68, v23 - (_BYTE *)a7, a10, 48);
      else
        sub_1001F8A0((std::_String_base *)&v68, 16, a10, 48);
      v24 = memchr(a7, v59[0], a11);
      if ( v24 )
      {
        v25 = v24 - (_BYTE *)a7;
        sub_10021B00((std::_String_base *)&v68, v24 - (_BYTE *)a7 + 1, a9, 48);
        sub_10021B00((std::_String_base *)&v68, v25, a8, 48);
      }
      else
      {
        sub_1001F8A0((std::_String_base *)&v68, 16, a8, 48);
      }
      v26 = v73;
      if ( v74 < 0x10 )
        v26 = &v73;
      v27 = v69;
      if ( v71 < 0x10 )
        v27 = (const char *)&v69;
      v28 = strcspn(v27, v59);
      for ( LOBYTE(v29) = *v26; *v26 != 127; LOBYTE(v29) = *v26 )
      {
        if ( (char)v29 <= 0 )
          break;
        v29 = (char)v29;
        if ( (char)v29 >= v28 - v60 )
          break;
        v28 -= v29;
        sub_10021B00((std::_String_base *)&v68, v28, 1u, 44);
        if ( v26[1] > 0 )
          ++v26;
      }
      v18 = (unsigned __int8 *)v69;
      if ( v71 < 0x10 )
        v18 = (unsigned __int8 *)&v69;
      a8 = 0;
      a9 = 0;
      a10 = 0;
      a11 = v70;
    }
  }
  v30 = *(_DWORD *)(a5 + 24);
  v31 = a11 + a10 + a8 + a9;
  if ( v30 <= 0 || v30 <= v31 )
    v76 = 0;
  else
    v76 = (void *)(v30 - v31);
  v32 = *(_DWORD *)(a5 + 16) & 0x1C0;
  if ( v32 == 64 )
  {
    v38 = a4;
    v37 = a3;
  }
  else
  {
    if ( v32 == 256 )
    {
      v34 = (_DWORD *)a4;
      if ( v60 <= 0 )
      {
        v36 = a3;
      }
      else
      {
        v35 = *v18;
        v60 = a3;
        v61 = (_DWORD *)a4;
        sub_10020330(&v60, v35);
        v36 = v60;
        v34 = v61;
        ++v18;
        --a11;
      }
      v33 = sub_10020390(a1, &v60, v36, v34, a6, (int)v76);
    }
    else
    {
      v33 = sub_10020390(a1, &v60, a3, (_DWORD *)a4, a6, (int)v76);
    }
    v37 = *v33;
    v38 = v33[1];
    v76 = 0;
  }
  v39 = memchr(v18, v59[0], a11);
  if ( v39 )
  {
    v60 = v39 - v18 + 1;
    v40 = sub_10021160(a1, (int)&v66, v37, v38, v18, v39 - v18, v62);
    v41 = sub_10020390(a1, &v67, *(_DWORD *)v40, *(_DWORD **)(v40 + 4), 0x30u, a8);
    v42 = *v41;
    v43 = (_DWORD *)v41[1];
    v44 = (*(int (**)(void))(*(_DWORD *)v64 + 4))();
    v45 = sub_10020390(a1, &v67, v42, v43, v44, 1);
    v46 = sub_10020390(a1, &v64, *v45, (_DWORD *)v45[1], 0x30u, a9);
    v37 = *v46;
    v38 = v46[1];
    v18 += v60;
    a11 -= v60;
  }
  v47 = memchr(v18, 101, a11);
  if ( v47 )
  {
    v77 = v47 - v18 + 1;
    v48 = sub_10021160(a1, (int)&v67, v37, v38, v18, v47 - v18, v62);
    v49 = sub_10020390(a1, &v66, *(_DWORD *)v48, *(_DWORD **)(v48 + 4), 0x30u, a10);
    a10 = 0;
    v50 = (unsigned __int8 *)&unk_1003625C;
    if ( !(*(_BYTE *)(a5 + 16) & 4) )
      v50 = (unsigned __int8 *)&unk_10036258;
    v51 = *v49;
    v52 = v49[1];
    v53 = *v50;
    v64 = (std::locale::facet *)v51;
    v65 = v52;
    sub_10020330(&v64, v53);
    v37 = (int)v64;
    v38 = v65;
    v18 += v77;
    a11 -= v77;
  }
  v54 = sub_10021160(a1, (int)&v67, v37, v38, v18, a11, v62);
  v55 = sub_10020390(a1, &v66, *(_DWORD *)v54, *(_DWORD **)(v54 + 4), 0x30u, a10);
  v56 = *v55;
  v57 = (_DWORD *)v55[1];
  *(_DWORD *)(a5 + 24) = 0;
  sub_10020390(a1, (_DWORD *)a2, v56, v57, a6, (int)v76);
  if ( v71 >= 0x10 )
    j__free(v69);
  v71 = 15;
  v70 = 0;
  LOBYTE(v69) = 0;
  if ( v74 >= 0x10 )
    j__free(v73);
  return a2;
}

//----- (10021B00) --------------------------------------------------------
std::_String_base *__thiscall sub_10021B00(std::_String_base *this, unsigned int a2, unsigned int a3, char a4)
{
  unsigned int v4; // ebx
  std::_String_base *v5; // esi
  unsigned int v6; // edi
  unsigned int v7; // eax
  bool v8; // zf
  unsigned int v9; // eax
  int *v10; // ebp
  int v11; // ecx
  int v13; // eax
  int v14; // edx
  char *v15; // edi
  int v16; // eax
  bool v17; // cf
  int v18; // [esp+10h] [ebp+4h]

  v4 = a2;
  v5 = this;
  if ( *((_DWORD *)this + 5) < a2 )
    std::_String_base::_Xran(this);
  if ( -1 - *((_DWORD *)this + 5) <= a3 )
    std::_String_base::_Xlen(this);
  if ( !a3 )
    return v5;
  v6 = a3 + *((_DWORD *)this + 5);
  v18 = a3 + *((_DWORD *)this + 5);
  if ( v6 > 0xFFFFFFFE )
    std::_String_base::_Xlen(this);
  v7 = *((_DWORD *)this + 6);
  if ( v7 < v6 )
  {
    sub_1001EA80(this, v6, *((_DWORD *)this + 5));
    v8 = v6 == 0;
    goto LABEL_10;
  }
  v8 = v6 == 0;
  if ( v6 )
  {
LABEL_10:
    if ( !v8 )
    {
      v9 = *((_DWORD *)v5 + 6);
      v10 = (int *)((char *)v5 + 4);
      if ( v9 < 0x10 )
        v11 = (int)v5 + 4;
      else
        v11 = *v10;
      if ( v9 < 0x10 )
        v13 = (int)v5 + 4;
      else
        v13 = *v10;
      memcpy((void *)(a3 + v4 + v13), (const void *)(v4 + v11), *((_DWORD *)v5 + 5) - v4);
      if ( *((_DWORD *)v5 + 6) < 0x10u )
        v14 = (int)v5 + 4;
      else
        v14 = *v10;
      v15 = (char *)(v14 + v4);
      LOBYTE(v4) = a4;
      BYTE1(v4) = a4;
      v16 = v4 << 16;
      LOWORD(v16) = v4;
      memset32(v15, v16, a3 >> 2);
      memset(&v15[4 * (a3 >> 2)], a4, a3 & 3);
      v17 = *((_DWORD *)v5 + 6) < 0x10u;
      *((_DWORD *)v5 + 5) = v18;
      if ( !v17 )
        v10 = (int *)*v10;
      *((_BYTE *)v10 + v18) = 0;
    }
    return v5;
  }
  *((_DWORD *)this + 5) = 0;
  if ( v7 < 0x10 )
    *((_BYTE *)this + 4) = 0;
  else
    **((_BYTE **)this + 1) = 0;
  return this;
}

//----- (10021C20) --------------------------------------------------------
std::_String_base *__fastcall sub_10021C20(std::_String_base *this, int a2, char *a3, unsigned int a4)
{
  std::_String_base *v4; // ebx
  unsigned int v5; // edx
  char *v6; // eax
  char *v7; // eax
  std::_String_base *v8; // ecx
  unsigned int v10; // ebp
  unsigned int v11; // eax
  bool v12; // zf
  int v13; // eax
  bool v14; // cf

  v4 = this;
  v5 = *((_DWORD *)this + 6);
  if ( v5 < 0x10 )
    v6 = (char *)this + 4;
  else
    v6 = (char *)*((_DWORD *)this + 1);
  if ( a3 >= v6 )
  {
    v7 = (char *)this + 4;
    v8 = v5 < 0x10 ? (std::_String_base *)((char *)this + 4) : *(_DWORD *)v7;
    if ( (char *)v8 + *((_DWORD *)v4 + 5) > a3 )
    {
      if ( v5 >= 0x10 )
        v7 = *(char **)v7;
      return sub_10021D30(v4, v4, a3 - v7, a4);
    }
  }
  if ( -1 - *((_DWORD *)v4 + 5) <= a4 )
    std::_String_base::_Xlen(v4);
  if ( !a4 )
    return v4;
  v10 = a4 + *((_DWORD *)v4 + 5);
  if ( v10 > 0xFFFFFFFE )
    std::_String_base::_Xlen(v4);
  v11 = *((_DWORD *)v4 + 6);
  if ( v11 < v10 )
  {
    sub_1001EA80(v4, v10, *((_DWORD *)v4 + 5));
    v12 = v10 == 0;
    goto LABEL_19;
  }
  v12 = v10 == 0;
  if ( v10 )
  {
LABEL_19:
    if ( !v12 )
    {
      if ( *((_DWORD *)v4 + 6) < 0x10u )
        v13 = (int)v4 + 4;
      else
        v13 = *((_DWORD *)v4 + 1);
      qmemcpy((void *)(v13 + *((_DWORD *)v4 + 5)), a3, a4);
      v14 = *((_DWORD *)v4 + 6) < 0x10u;
      *((_DWORD *)v4 + 5) = v10;
      if ( !v14 )
      {
        *(_BYTE *)(*((_DWORD *)v4 + 1) + v10) = 0;
        return v4;
      }
      *((_BYTE *)v4 + v10 + 4) = 0;
    }
    return v4;
  }
  *((_DWORD *)v4 + 5) = 0;
  if ( v11 < 0x10 )
    *((_BYTE *)v4 + 4) = 0;
  else
    **((_BYTE **)v4 + 1) = 0;
  return v4;
}

//----- (10021D30) --------------------------------------------------------
std::_String_base *__thiscall sub_10021D30(std::_String_base *this, _DWORD *a2, unsigned int a3, unsigned int a4)
{
  std::_String_base *v4; // ebx
  unsigned int v5; // esi
  unsigned int v6; // ebp
  unsigned int v7; // eax
  bool v8; // zf
  int v9; // edi
  int *v11; // edx
  int v12; // eax
  bool v13; // cf

  v4 = this;
  if ( a2[5] < a3 )
    std::_String_base::_Xran(this);
  v5 = a4;
  if ( a2[5] - a3 < a4 )
    v5 = a2[5] - a3;
  if ( -1 - *((_DWORD *)this + 5) <= v5 )
    std::_String_base::_Xlen(this);
  if ( !v5 )
    return v4;
  v6 = v5 + *((_DWORD *)this + 5);
  if ( v6 > 0xFFFFFFFE )
    std::_String_base::_Xlen(this);
  v7 = *((_DWORD *)this + 6);
  if ( v7 < v6 )
  {
    sub_1001EA80(this, v6, *((_DWORD *)this + 5));
    v8 = v6 == 0;
    goto LABEL_12;
  }
  v8 = v6 == 0;
  if ( v6 )
  {
LABEL_12:
    if ( !v8 )
    {
      if ( a2[6] < 0x10u )
        v9 = (int)(a2 + 1);
      else
        v9 = a2[1];
      v11 = (int *)((char *)v4 + 4);
      if ( *((_DWORD *)v4 + 6) < 0x10u )
        v12 = (int)v4 + 4;
      else
        v12 = *v11;
      qmemcpy((void *)(v12 + *((_DWORD *)v4 + 5)), (const void *)(v9 + a3), v5);
      v13 = *((_DWORD *)v4 + 6) < 0x10u;
      *((_DWORD *)v4 + 5) = v6;
      if ( !v13 )
        v11 = (int *)*v11;
      *((_BYTE *)v11 + v6) = 0;
    }
    return v4;
  }
  *((_DWORD *)this + 5) = 0;
  if ( v7 < 0x10 )
    *((_BYTE *)this + 4) = 0;
  else
    **((_BYTE **)this + 1) = 0;
  return this;
}

//----- (10021E20) --------------------------------------------------------
int __thiscall sub_10021E20(void *this, int a2, int a3, int a4, int a5, int a6, double a7)
{
  signed int v7; // eax
  int v8; // edx
  signed int v9; // ebp
  int v10; // ecx
  double v11; // st7
  int v12; // esi
  unsigned int v13; // ebx
  unsigned int v14; // edi
  char v15; // dl
  char *v16; // eax
  _BYTE *v17; // eax
  int v18; // ecx
  _BYTE *v19; // eax
  int v20; // ecx
  int v21; // eax
  int v23; // [esp+18h] [ebp-78h]
  char v24; // [esp+1Ch] [ebp-74h]
  char v25; // [esp+1Dh] [ebp-73h]
  char v26; // [esp+1Eh] [ebp-72h]
  char v27; // [esp+24h] [ebp-6Ch]

  v23 = (int)this;
  v7 = *(_DWORD *)(a5 + 20);
  if ( v7 <= 0 )
  {
    v8 = *(_DWORD *)(a5 + 16);
    if ( !(v8 & 0x2000) )
      v7 = 6;
  }
  v9 = 36;
  if ( v7 <= 36 )
    v9 = v7;
  v10 = *(_DWORD *)(a5 + 16);
  v11 = a7;
  v12 = v7 - v9;
  v13 = 0;
  v14 = 0;
  if ( (*(_DWORD *)(a5 + 16) & 0x3000) == 0x2000 )
  {
    if ( a7 >= 0.0 )
    {
      v15 = 0;
    }
    else
    {
      v15 = 1;
      v11 = -a7;
    }
    for ( ; v11 >= 1.0e35; v13 += 10 )
    {
      if ( v13 >= 0x1388 )
        break;
      v11 = v11 * 1.0e-10;
    }
    if ( v11 > 0.0 && v12 >= 10 )
    {
      do
      {
        if ( v11 > 1.0e-35 )
          break;
        if ( v14 >= 0x1388 )
          break;
        v11 = v11 * 1.0e10;
        v12 -= 10;
        v14 += 10;
      }
      while ( v12 >= 10 );
    }
    if ( v15 )
      v11 = -v11;
  }
  v24 = 37;
  v16 = &v25;
  if ( v10 & 0x20 )
  {
    v25 = 43;
    v16 = &v26;
  }
  if ( v10 & 0x10 )
    *v16++ = 35;
  *v16 = 46;
  v17 = v16 + 1;
  *v17++ = 42;
  *v17 = 76;
  v18 = v10 & 0x3000;
  v19 = v17 + 1;
  if ( v18 == 0x2000 )
  {
    LOBYTE(v20) = 102;
  }
  else
  {
    LOBYTE(v18) = v18 != 4096;
    v20 = 2 * v18 + 101;
  }
  *v19 = v20;
  v19[1] = 0;
  v21 = sprintf(&v27, &v24, v9, LODWORD(v11), (_DWORD)(*(unsigned __int64 *)&v11 >> 32));
  sub_10021550(v23, a2, a3, a4, a5, a6, &v27, v13, v14, v12, v21);
  return a2;
}

//----- (10021FC0) --------------------------------------------------------
int __thiscall sub_10021FC0(int this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v7; // esi
  int v8; // eax
  char v10; // [esp+8h] [ebp-40h]

  v7 = this;
  v8 = sprintf(&v10, "%p", a7);
  sub_10020ED0(v7, a2, a3, a4, a5, a6, &v10, v8);
  return a2;
}

//----- (10022010) --------------------------------------------------------
void __fastcall __noreturn sub_10022010(int a1, int a2)
{
  char v2; // [esp+0h] [ebp-50h]
  char v3; // [esp+4h] [ebp-4Ch]
  int v4; // [esp+14h] [ebp-3Ch]
  int v5; // [esp+18h] [ebp-38h]
  void **v6; // [esp+1Ch] [ebp-34h]
  int v7; // [esp+4Ch] [ebp-4h]

  v5 = 15;
  v4 = 0;
  v3 = 0;
  sub_1001FBC0((std::_String_base *)&v2, a2, "vector<T> too long", 0x12u);
  v7 = 0;
  sub_10020820(&v6, (std::_String_base *)&v2);
  v6 = &std::length_error::`vftable';
  _CxxThrowException(&v6, &_TI3_AVlength_error_std__);
}
// 10026258: using guessed type void __stdcall __noreturn _CxxThrowException(_DWORD, _DWORD);
// 100387D4: using guessed type void *std::length_error::`vftable';
// 10039678: using guessed type int _TI3_AVlength_error_std__;

//----- (10022080) --------------------------------------------------------
exception *__thiscall sub_10022080(exception *this, struct exception *a2)
{
  exception *v2; // esi
  int v3; // ecx

  v2 = this;
  exception::exception(this, a2);
  v3 = (int)v2 + 12;
  *(_DWORD *)v2 = &std::logic_error::`vftable';
  *(_DWORD *)(v3 + 24) = 15;
  *(_DWORD *)(v3 + 20) = 0;
  *(_BYTE *)(v3 + 4) = 0;
  sub_1001F970((exception *)((char *)v2 + 12), (struct exception *)((char *)a2 + 12), 0, 0xFFFFFFFF);
  return v2;
}
// 100387C8: using guessed type void *std::logic_error::`vftable';

//----- (100220F0) --------------------------------------------------------
int __thiscall sub_100220F0(_DWORD *this, int a2)
{
  char *v2; // ecx

  v2 = (char *)this[2];
  *(_DWORD *)(a2 + 24) = 15;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 4) = 0;
  sub_1001FBC0((std::_String_base *)a2, 0, v2, strlen(v2));
  return a2;
}

//----- (10022140) --------------------------------------------------------
int __thiscall sub_10022140(_DWORD *this, int a2)
{
  char *v2; // ecx

  v2 = (char *)this[4];
  *(_DWORD *)(a2 + 24) = 15;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 4) = 0;
  sub_1001FBC0((std::_String_base *)a2, 0, v2, strlen(v2));
  return a2;
}

//----- (10022190) --------------------------------------------------------
int __thiscall sub_10022190(_DWORD *this, int a2)
{
  char *v2; // ecx

  v2 = (char *)this[5];
  *(_DWORD *)(a2 + 24) = 15;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 4) = 0;
  sub_1001FBC0((std::_String_base *)a2, 0, v2, strlen(v2));
  return a2;
}

//----- (100221E0) --------------------------------------------------------
exception *__thiscall sub_100221E0(exception *this, struct exception *a2)
{
  exception *v2; // esi

  v2 = this;
  sub_10022080(this, a2);
  *(_DWORD *)v2 = &std::length_error::`vftable';
  return v2;
}
// 100387D4: using guessed type void *std::length_error::`vftable';

//----- (10022520) --------------------------------------------------------
_DWORD *__thiscall sub_10022520(_DWORD *this, char *a2, int a3, int a4, int a5)
{
  _DWORD *v5; // edi
  _DWORD *v6; // esi
  int v7; // ecx
  int v8; // eax
  int v9; // edx
  std::ios_base *v10; // ecx
  int v11; // eax

  v5 = this;
  if ( a5 )
  {
    *this = &unk_10036284;
    this[2] = &unk_1003627C;
    this[26] = &off_10036100;
  }
  v6 = this + 3;
  sub_1001FED0(this, (int)(this + 3), 0);
  *(_DWORD *)((char *)v5 + *(_DWORD *)(*v5 + 4)) = &off_10036278;
  sub_1001EA10(v5 + 3);
  *v6 = &off_100361B8;
  v5[21] = 0;
  *((_BYTE *)v5 + 96) = 0;
  *((_BYTE *)v5 + 88) = 0;
  sub_1001E510(v5 + 3);
  v5[25] = 0;
  v5[23] = dword_1006ACDC;
  v5[19] = dword_1006ACDC;
  v5[18] = 0;
  if ( !sub_1001FA90(v5 + 3, a2, a3, a4) )
  {
    v7 = *(_DWORD *)(*v5 + 4);
    v8 = *(_DWORD *)((char *)v5 + v7 + 8);
    v9 = *(_DWORD *)((char *)v5 + v7 + 40);
    v10 = (std::ios_base *)((char *)v5 + v7);
    v11 = v8 | 2;
    if ( !v9 )
      v11 |= 4u;
    std::ios_base::clear(v10, v11, 0);
  }
  return v5;
}
// 10036100: using guessed type int (__thiscall *off_10036100)(void *, char);
// 100361B8: using guessed type int (__thiscall *off_100361B8)(void *, char);
// 10036278: using guessed type int (__stdcall *off_10036278)(char);
// 1006ACDC: using guessed type int dword_1006ACDC;

//----- (10022620) --------------------------------------------------------
int __thiscall sub_10022620(_DWORD *this)
{
  int v1; // esi
  int v2; // eax
  int result; // eax

  *(_DWORD *)((char *)this + *(_DWORD *)(*(this - 26) + 4) - 104) = &off_10036278;
  v1 = (int)(this - 23);
  std::locale::_Locimp::~_Locimp((std::locale::_Locimp *)(this - 23));
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)(v1 - 12) + 4) + v1 - 12) = &off_10036108;
  if ( v1 == 12 )
    v2 = 0;
  else
    v2 = v1 - 4;
  *(_DWORD *)(*(_DWORD *)(*(_DWORD *)v2 + 4) + v2) = &off_100360FC;
  result = *(_DWORD *)(v1 - 12);
  *(_DWORD *)(*(_DWORD *)(result + 4) + v1 - 12) = off_10036104;
  return result;
}
// 100360FC: using guessed type int (__stdcall *off_100360FC)(char);
// 10036104: using guessed type int (__stdcall *off_10036104[2])(char);
// 10036108: using guessed type int (__stdcall *off_10036108)(char);
// 10036278: using guessed type int (__stdcall *off_10036278)(char);

//----- (100226D0) --------------------------------------------------------
_DWORD *__thiscall sub_100226D0(_DWORD *this, void *a2)
{
  _DWORD *v2; // esi
  int v3; // edx
  unsigned int v4; // ecx
  int v5; // edi
  _DWORD *result; // eax

  v2 = this;
  v3 = this[1];
  if ( v3 )
    v4 = (this[2] - v3) >> 4;
  else
    v4 = 0;
  if ( !v3 || v4 >= (v2[3] - v3) >> 4 )
    return (_DWORD *)sub_100222B0(v2[2], 1, a2);
  v5 = v2[2];
  result = sub_1001ED50((_DWORD *)v2[2], (_DWORD *)1, a2);
  v2[2] = v5 + 16;
  return result;
}

//----- (10022740) --------------------------------------------------------
_DWORD *__thiscall sub_10022740(std::ios_base *this, char a2)
{
  _DWORD *v2; // esi
  std::ios_base *v3; // edi

  v2 = (_DWORD *)((char *)this - 104);
  v3 = this;
  sub_10022620(this);
  sub_1001DD90(v3);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10022790) --------------------------------------------------------
BOOL sub_10022790()
{
  BOOL result; // eax
  struct tagPOINT Point; // [esp+0h] [ebp-18h]
  struct tagRECT Rect; // [esp+8h] [ebp-10h]

  result = 0;
  if ( alt_mouse_input )
  {
    Point.y = 0;
    Point.x = 0;
    ClientToScreen(hWnd, &Point);
    GetClientRect(hWnd, &Rect);
    Rect.left += Point.x;
    Rect.top += Point.y;
    Rect.right += Point.x;
    Rect.bottom += Point.y;
    result = ClipCursor(&Rect);
  }
  return result;
}
// 1006AD56: using guessed type char alt_mouse_input;

//----- (10022880) --------------------------------------------------------
char __cdecl sub_10022880(int a1)
{
  bool v2; // [esp+1h] [ebp-1h]

  if ( alt_mouse_input )
    return 1;
  if ( *(_DWORD *)IDA__lpDirectInputMouse )
    (*(int (__stdcall **)(_DWORD))(**(_DWORD **)IDA__lpDirectInputMouse + 32))(*(_DWORD *)IDA__lpDirectInputMouse);
  v2 = *(_DWORD *)IDA__lpDirectInputMouse
    && !(*(int (__stdcall **)(_DWORD, HWND, int))(**(_DWORD **)IDA__lpDirectInputMouse + 52))(
          *(_DWORD *)IDA__lpDirectInputMouse,
          hWnd,
          a1);
  if ( *(_DWORD *)IDA__lpDirectInputMouse )
    (*(void (__stdcall **)(_DWORD))(**(_DWORD **)IDA__lpDirectInputMouse + 28))(*(_DWORD *)IDA__lpDirectInputMouse);
  return v2;
}
// 1006AD56: using guessed type char alt_mouse_input;
// 1006AD84: using guessed type int IDA__lpDirectInputMouse;

//----- (10022940) --------------------------------------------------------
LRESULT __cdecl sub_10022940(HWND hWnd, int a2)
{
  struct tagRECT Rect; // [esp+8h] [ebp-114h]
  LPARAM lParam; // [esp+18h] [ebp-104h]

  if ( byte_1006AD28 )
  {
    GetClientRect(::hWnd, &Rect);
    if ( Rect.right - Rect.left != scr_width || Rect.bottom - Rect.top != newBytes )
      sprintf(
        (char *)&lParam,
        "%s  @%ix%i >> %ix%i   %s",
        WindowName,
        scr_width,
        newBytes,
        Rect.right - Rect.left,
        Rect.bottom - Rect.top,
        a2);
    else
      sprintf((char *)&lParam, "%s  @%ix%i   %s", WindowName, scr_width, newBytes, a2);
  }
  else
  {
    sprintf((char *)&lParam, "%s  @%ix%ix%i   %s", WindowName, scr_width, newBytes, 1 << scale_2x, a2);
  }
  return SendMessageA(hWnd, 0xCu, 0, (LPARAM)&lParam);
}
// 1006AD14: using guessed type int scale_2x;
// 1006AD28: using guessed type char byte_1006AD28;

//----- (10022A40) --------------------------------------------------------
char sub_10022A40()
{
  UINT v0; // eax
  WINDOWPLACEMENT wndpl; // [esp+0h] [ebp-2Ch]

  LOBYTE(v0) = windowed;
  if ( windowed )
  {
    v0 = F_GetPrivateProfileIntA("MAIN", "WINDOWED_FULLSCREEN", 0);
    if ( !v0 )
    {
      wndpl.length = 44;
      GetWindowPlacement(hWnd, &wndpl);
      LOBYTE(v0) = sub_10001300("MAIN", "WIN_DATA", &wndpl);
    }
  }
  return v0;
}
// 1006AD55: using guessed type char windowed;

//----- (10022AA0) --------------------------------------------------------
void __spoils<ecx> sub_10022AA0()
{
  sub_10022A40();
}

//----- (10022AB0) --------------------------------------------------------
int sub_10022AB0()
{
  UINT v0; // eax
  signed int v1; // eax
  UINT v2; // ST24_4

  graphics_mode = F_GetPrivateProfileIntA("MAIN", "GRAPHICS_MODE", 0);
  if ( F_GetPrivateProfileIntA_3("Graphics", "Mode", 0) || !graphics_mode )
  {
    colour_bits = 8;
    graphics_mode = 0;
    scale_2x = 0;
    byte_1006AD28 = 1;
  }
  else
  {
    v0 = F_GetPrivateProfileIntA("MAIN", "COLOUR_BITS", 8);
    colour_bits = v0;
    if ( v0 != 8 && v0 != 16 && v0 != 24 && v0 != 32 )
      colour_bits = 8;
    scale_2x = F_GetPrivateProfileIntA("MAIN", "SCALE_2X", 0);
    scale_2x = scale_2x != 0;
    if ( graphics_mode && F_GetPrivateProfileIntA("MAIN", "WINDOWED", 0) )
    {
      windowed = 1;
      goto LABEL_15;
    }
  }
  windowed = 0;
  scr_width = F_GetPrivateProfileIntA("MAIN", "SCR_WIDTH", 640) >> scale_2x;
  v1 = F_GetPrivateProfileIntA("MAIN", "SCR_HEIGHT", 480) >> scale_2x;
  newBytes = v1;
  if ( scr_width < 640 || v1 < 480 )
  {
    scr_width = 640;
    newBytes = 480;
    scale_2x = 0;
  }
LABEL_15:
  refresh_rate = F_GetPrivateProfileIntA("MAIN", "REFRESH_RATE", 0);
  is_gray_scale = F_GetPrivateProfileIntA("EFFECTS", "IS_GRAY_SCALE", 0) != 0;
  v2 = F_GetPrivateProfileIntA("OTHER_SETTINGS", "FADE_TIME_MODIFIER", 60);
  return sub_10018290((double)v2);
}
// 1006AD14: using guessed type int scale_2x;
// 1006AD18: using guessed type int refresh_rate;
// 1006AD28: using guessed type char byte_1006AD28;
// 1006AD55: using guessed type char windowed;
// 1006AD58: using guessed type char is_gray_scale;

//----- (10022CB0) --------------------------------------------------------
int sub_10022CB0()
{
  struct tagMSG Msg; // [esp+4h] [ebp-1Ch]

  MsgWaitForMultipleObjectsEx(0, 0, 1u, 0xFFu, 0);
  while ( PeekMessageA(&Msg, 0, 0, 0, 0) )
  {
    if ( GetMessageA(&Msg, 0, 0, 0) )
    {
      TranslateMessage(&Msg);
      DispatchMessageA(&Msg);
    }
  }
  return 0;
}

//----- (10022D40) --------------------------------------------------------
#error "10022D48: positive sp value has been found (funcsize=0)"

//----- (10022D50) --------------------------------------------------------
int __fastcall sub_10022D50(int a1, int a2)
{
  int v2; // ST04_4
  int v3; // ST08_4

  v3 = a1;
  v2 = a2;
  sub_10022CB0();
  return IDA_process_bk_(v3, v2);
}
// 1006AD48: invalid function type has been ignored
// 1006AD48: using guessed type int (__fastcall *IDA_process_bk_)(_DWORD, _DWORD);

//----- (10022D60) --------------------------------------------------------
int __fastcall sub_10022D60(int a1, int a2)
{
  int v2; // ST04_4
  int v3; // ST08_4

  v3 = a1;
  v2 = a2;
  sub_10022CB0();
  return IDA_gmouse_bk_process_(v3, v2);
}
// 1006AD4C: invalid function type has been ignored
// 1006AD4C: using guessed type int (__fastcall *IDA_gmouse_bk_process_)(_DWORD, _DWORD);

//----- (10022D70) --------------------------------------------------------
int sub_10022D70()
{
  struct tagMSG Msg; // [esp+4h] [ebp-1Ch]

  while ( PeekMessageA(&Msg, 0, 0, 0, 0) )
  {
    if ( GetMessageA(&Msg, 0, 0, 0) )
    {
      TranslateMessage(&Msg);
      DispatchMessageA(&Msg);
    }
  }
  return 0;
}

//----- (10022DE0) --------------------------------------------------------
int __fastcall sub_10022DE0(int a1, int a2)
{
  int v2; // ST04_4
  int v3; // ST08_4

  v3 = a1;
  v2 = a2;
  sub_10022D70();
  return IDA_setSystemPalette_(v3, v2);
}
// 1006AD50: invalid function type has been ignored
// 1006AD50: using guessed type int (__fastcall *IDA_setSystemPalette_)(_DWORD, _DWORD);

//----- (10022DF0) --------------------------------------------------------
BOOL __cdecl sub_10022DF0(HWND hwnd, WINDOWPLACEMENT *lpwndpl)
{
  int v2; // eax
  int v3; // edx
  int v4; // edi
  int v5; // eax
  LONG v6; // esi
  struct tagRECT rcDst; // [esp+10h] [ebp-4Ch]
  struct tagWINDOWINFO pwi; // [esp+20h] [ebp-3Ch]

  pwi.cbSize = 60;
  GetWindowInfo(hwnd, &pwi);
  v2 = (pwi.rcClient.right - pwi.rcClient.left) >> scale_2x;
  v3 = pwi.rcClient.bottom - pwi.rcClient.top;
  if ( v2 < 640 )
    goto LABEL_27;
  if ( v3 >> scale_2x >= 480 )
    goto LABEL_12;
  if ( v2 < 640 )
  {
LABEL_27:
    scr_width = 640;
    pwi.rcClient.right = pwi.rcClient.left + (640 << scale_2x);
  }
  if ( v3 >> scale_2x < 480 )
  {
    newBytes = 480;
    pwi.rcClient.bottom = pwi.rcClient.top + (480 << scale_2x);
  }
  CopyRect(&rcDst, &pwi.rcClient);
  AdjustWindowRectEx(&rcDst, pwi.dwStyle, 0, pwi.dwExStyle);
  if ( rcDst.left < 0 )
  {
    rcDst.right -= rcDst.left;
    rcDst.left = 0;
  }
  if ( rcDst.top < 0 )
  {
    rcDst.bottom -= rcDst.top;
    rcDst.top = 0;
  }
  CopyRect(&lpwndpl->rcNormalPosition, &rcDst);
LABEL_12:
  v4 = GetSystemMetrics(78);
  v5 = GetSystemMetrics(79);
  v6 = v5;
  if ( v4 < rcDst.right || v5 < rcDst.bottom )
  {
    if ( (unsigned int)scale_2x > 0 )
    {
      rcDst.right = 640 << scale_2x;
      rcDst.bottom = 480 << scale_2x;
      scr_width = 640;
      newBytes = 480;
      rcDst.left = 0;
      rcDst.top = 0;
      AdjustWindowRectEx(&rcDst, pwi.dwStyle, 0, pwi.dwExStyle);
    }
    if ( v4 < rcDst.right || v6 < rcDst.bottom )
    {
      scr_width = 640;
      rcDst.right = 640;
      scale_2x = 0;
      newBytes = 480;
      rcDst.left = 0;
      rcDst.top = 0;
      rcDst.bottom = 480;
      AdjustWindowRectEx(&rcDst, pwi.dwStyle, 0, pwi.dwExStyle);
    }
    if ( rcDst.left < 0 )
    {
      rcDst.right -= rcDst.left;
      rcDst.left = 0;
    }
    if ( rcDst.top < 0 )
    {
      rcDst.bottom -= rcDst.top;
      rcDst.top = 0;
    }
    CopyRect(&lpwndpl->rcNormalPosition, &rcDst);
  }
  return SetWindowPlacement(hwnd, lpwndpl);
}
// 1006AD14: using guessed type int scale_2x;

//----- (10022FE0) --------------------------------------------------------
signed int sub_10022FE0()
{
  signed int result; // eax
  HINSTANCE v1; // [esp-Ch] [ebp-48h]
  struct tagRECT Rect; // [esp+0h] [ebp-3Ch]
  WINDOWPLACEMENT wndpl; // [esp+10h] [ebp-2Ch]

  if ( hWnd )
    return 0;
  v1 = *(HINSTANCE *)IDA__GNW95_hInstance;
  if ( windowed )
  {
    *(_DWORD *)IDA__GNW95_hwnd = CreateWindowExA(
                                   0,
                                   ClassName,
                                   WindowName,
                                   dwStyle | 0x10000000,
                                   0,
                                   0,
                                   640,
                                   480,
                                   0,
                                   0,
                                   v1,
                                   0);
    if ( sub_10002540("MAIN", "WIN_DATA", &wndpl) )
    {
      if ( wndpl.showCmd == 6 || wndpl.showCmd == 2 || wndpl.showCmd == 7 || !wndpl.showCmd )
        wndpl.showCmd = 1;
      SetWindowPlacement(*(HWND *)IDA__GNW95_hwnd, &wndpl);
    }
    else
    {
      GetWindowPlacement(*(HWND *)IDA__GNW95_hwnd, &wndpl);
    }
    sub_10022DF0(*(HWND *)IDA__GNW95_hwnd, &wndpl);
    if ( F_GetPrivateProfileIntA("MAIN", "WINDOWED_FULLSCREEN", 0) )
    {
      dwStyle = 2147483648;
      SetWindowLongA(*(HWND *)IDA__GNW95_hwnd, -16, -1879048192);
      SetWindowPos(*(HWND *)IDA__GNW95_hwnd, 0, 0, 0, 0, 0, 0);
      ShowWindow(*(HWND *)IDA__GNW95_hwnd, 3);
    }
  }
  else
  {
    *(_DWORD *)IDA__GNW95_hwnd = CreateWindowExA(
                                   8u,
                                   ClassName,
                                   WindowName,
                                   0x90000000,
                                   0,
                                   0,
                                   scr_width << scale_2x,
                                   newBytes << scale_2x,
                                   0,
                                   0,
                                   v1,
                                   0);
    sub_10022790();
  }
  if ( *(_DWORD *)IDA__GNW95_hwnd )
  {
    GetClientRect(hWnd, &Rect);
    scr_width = (Rect.right - Rect.left) >> scale_2x;
    newBytes = (Rect.bottom - Rect.top) >> scale_2x;
    *(_DWORD *)IDA__scr_size = 0;
    *(_DWORD *)(IDA__scr_size + 4) = 0;
    *(_DWORD *)(IDA__scr_size + 8) = scr_width - 1;
    *(_DWORD *)(IDA__scr_size + 12) = newBytes - 1;
    *(_DWORD *)IDA__xres = scr_width;
    *(_DWORD *)IDA__yres = newBytes;
    result = 0;
  }
  else
  {
    MessageBoxA(0, "Window Creation Failed!", "Error!", 0x30u);
    result = -1;
  }
  return result;
}
// 1006AD00: using guessed type int IDA__scr_size;
// 1006AD14: using guessed type int scale_2x;
// 1006AD1C: using guessed type int IDA__xres;
// 1006AD20: using guessed type int IDA__yres;
// 1006AD2C: using guessed type int IDA__GNW95_hwnd;
// 1006AD34: using guessed type int IDA__GNW95_hInstance;
// 1006AD55: using guessed type char windowed;

//----- (10023220) --------------------------------------------------------
signed int sub_10023220()
{
  if ( sub_10022FE0() || dword_1006AD80() )
    return -1;
  UpdateWindow(*(HWND *)IDA__GNW95_hwnd);
  SetFocus(*(HWND *)IDA__GNW95_hwnd);
  return 0;
}
// 1006AD80: invalid function type has been ignored
// 1006AD2C: using guessed type int IDA__GNW95_hwnd;
// 1006AD80: using guessed type int (*dword_1006AD80)(void);

//----- (10023260) --------------------------------------------------------
BOOL sub_10023260()
{
  BOOL result; // eax
  struct tagPOINT v1; // [esp+0h] [ebp-20h]
  struct tagPOINT Point; // [esp+8h] [ebp-18h]
  struct tagRECT Rect; // [esp+10h] [ebp-10h]

  result = 0;
  if ( windowed )
  {
    v1.y = 0;
    v1.x = 0;
    Point.y = 0;
    Point.x = 0;
    GetCursorPos(&Point);
    ClientToScreen(hWnd, &v1);
    GetClientRect(hWnd, &Rect);
    result = Point.x < v1.x + Rect.left
          || Point.x > v1.x + Rect.right
          || Point.y < v1.y + Rect.top
          || Point.y > v1.y + Rect.bottom;
  }
  return result;
}
// 1006AD55: using guessed type char windowed;

//----- (10023310) --------------------------------------------------------
int sub_10023310()
{
  int v0; // eax
  int v1; // edx
  int v2; // ecx
  int result; // eax
  struct tagPOINT Point; // [esp+8h] [ebp-20h]
  struct tagPOINT v5; // [esp+10h] [ebp-18h]
  struct tagRECT Rect; // [esp+18h] [ebp-10h]

  v0 = *(_DWORD *)IDA__mouse_x_ + *(_DWORD *)IDA__mouse_hotx;
  v1 = *(_DWORD *)IDA__mouse_y_ + *(_DWORD *)IDA__mouse_hoty;
  if ( windowed && !alt_mouse_input )
  {
    v5.y = 0;
    v5.x = 0;
    Point.y = 0;
    Point.x = 0;
    GetCursorPos(&Point);
    ClientToScreen(hWnd, &v5);
    GetClientRect(hWnd, &Rect);
    v0 = (Point.x - v5.x) >> scale_2x;
    v1 = (Point.y - v5.y) >> scale_2x;
  }
  v2 = *(_DWORD *)IDA__scr_size;
  if ( v0 < *(_DWORD *)IDA__scr_size || (v2 = *(_DWORD *)(IDA__scr_size + 8), v0 > v2) )
    v0 = v2;
  *(_DWORD *)IDA__mouse_x_ = v0 - *(_DWORD *)IDA__mouse_hotx;
  if ( v1 >= *(_DWORD *)(IDA__scr_size + 4) )
  {
    if ( v1 > *(_DWORD *)(IDA__scr_size + 12) )
      v1 = *(_DWORD *)(IDA__scr_size + 12);
  }
  else
  {
    v1 = *(_DWORD *)(IDA__scr_size + 4);
  }
  result = IDA__mouse_hoty;
  *(_DWORD *)IDA__mouse_y_ = v1 - *(_DWORD *)IDA__mouse_hoty;
  return result;
}
// 1006AD00: using guessed type int IDA__scr_size;
// 1006AD14: using guessed type int scale_2x;
// 1006AD55: using guessed type char windowed;
// 1006AD56: using guessed type char alt_mouse_input;
// 1006AD5C: using guessed type int IDA__mouse_x_;
// 1006AD60: using guessed type int IDA__mouse_y_;
// 1006AD64: using guessed type int IDA__mouse_hotx;
// 1006AD68: using guessed type int IDA__mouse_hoty;

//----- (10023400) --------------------------------------------------------
int sub_10023400()
{
  return sub_10023310();
}
// 10023400: using guessed type int sub_10023400();

//----- (10023410) --------------------------------------------------------
int __cdecl sub_10023410(int a1, int a2)
{
  int v2; // ecx
  _DWORD *v4; // eax

  v2 = *(_DWORD *)IDA__num_windows - 1;
  if ( v2 < 1 )
    return **(_DWORD **)(IDA__window + 4 * v2);
  if ( v2 <= 0 )
    return **(_DWORD **)(IDA__window + 4 * v2);
  while ( 1 )
  {
    v4 = *(_DWORD **)(IDA__window + 4 * v2);
    if ( a1 >= v4[2] && a1 <= v4[4] && a2 >= v4[3] && a2 <= v4[5] )
      break;
    if ( --v2 <= 0 )
      return **(_DWORD **)(IDA__window + 4 * v2);
  }
  return **(_DWORD **)(IDA__window + 4 * v2);
}
// 1006453C: using guessed type int IDA__num_windows;
// 100645A0: using guessed type int IDA__window;

//----- (10023490) --------------------------------------------------------
int __cdecl sub_10023490(_DWORD *a1, _DWORD *a2)
{
  int result; // eax

  *a1 = *(_DWORD *)IDA__mouse_x_ + *(_DWORD *)IDA__mouse_hotx;
  result = IDA__mouse_y_;
  *a2 = *(_DWORD *)IDA__mouse_y_ + *(_DWORD *)IDA__mouse_hoty;
  return result;
}
// 1006AD5C: using guessed type int IDA__mouse_x_;
// 1006AD60: using guessed type int IDA__mouse_y_;
// 1006AD64: using guessed type int IDA__mouse_hotx;
// 1006AD68: using guessed type int IDA__mouse_hoty;

//----- (100234C0) --------------------------------------------------------
int __usercall sub_100234C0@<eax>(_DWORD *a1@<eax>, _DWORD *a2@<edx>)
{
  return sub_10023490(a1, a2);
}

//----- (100234E0) --------------------------------------------------------
int sub_100234E0()
{
  return sub_10023410(
           *(_DWORD *)IDA__mouse_x_ + *(_DWORD *)IDA__mouse_hotx,
           *(_DWORD *)IDA__mouse_y_ + *(_DWORD *)IDA__mouse_hoty);
}
// 1006AD5C: using guessed type int IDA__mouse_x_;
// 1006AD60: using guessed type int IDA__mouse_y_;
// 1006AD64: using guessed type int IDA__mouse_hotx;
// 1006AD68: using guessed type int IDA__mouse_hoty;

//----- (10023510) --------------------------------------------------------
int sub_10023510()
{
  return sub_100234E0();
}
// 10023510: using guessed type int sub_10023510();

//----- (10023520) --------------------------------------------------------
int sub_10023520()
{
  int v0; // ecx
  int v1; // edx
  int v2; // eax
  int result; // eax

  v0 = *(_DWORD *)IDA__mouse_y_ + *(_DWORD *)IDA__mouse_hoty;
  v1 = *(_DWORD *)IDA__scr_size;
  v2 = *(_DWORD *)IDA__mouse_hotx + *(_DWORD *)IDA__mouse_x_;
  if ( v2 < *(_DWORD *)IDA__scr_size || (v1 = *(_DWORD *)(IDA__scr_size + 8), v2 > v1) )
    v2 = v1;
  if ( v0 >= *(_DWORD *)(IDA__scr_size + 4) )
  {
    if ( v0 > *(_DWORD *)(IDA__scr_size + 12) )
      v0 = *(_DWORD *)(IDA__scr_size + 12);
  }
  else
  {
    v0 = *(_DWORD *)(IDA__scr_size + 4);
  }
  *(_DWORD *)IDA__mouse_x_ = v2 - *(_DWORD *)IDA__mouse_hotx;
  result = IDA__mouse_hoty;
  *(_DWORD *)IDA__mouse_y_ = v0 - *(_DWORD *)IDA__mouse_hoty;
  return result;
}
// 1006AD00: using guessed type int IDA__scr_size;
// 1006AD5C: using guessed type int IDA__mouse_x_;
// 1006AD60: using guessed type int IDA__mouse_y_;
// 1006AD64: using guessed type int IDA__mouse_hotx;
// 1006AD68: using guessed type int IDA__mouse_hoty;

//----- (10023590) --------------------------------------------------------
char __cdecl sub_10023590(int a1, int a2)
{
  int v2; // eax
  int v3; // esi
  unsigned __int64 v4; // rax
  char v5; // cl
  struct tagPOINT Point; // [esp+4h] [ebp-8h]

  *(_DWORD *)IDA__mouse_x_ = a1 - *(_DWORD *)IDA__mouse_hotx;
  *(_DWORD *)IDA__mouse_y_ = a2 - *(_DWORD *)IDA__mouse_hoty;
  *(_DWORD *)IDA__raw_x = *(_DWORD *)IDA__mouse_x_;
  *(_DWORD *)IDA__raw_y = *(_DWORD *)IDA__mouse_y_;
  sub_10023520();
  if ( windowed || (LOBYTE(v2) = alt_mouse_input) != 0 )
  {
    Point.y = 0;
    Point.x = 0;
    ClientToScreen(hWnd, &Point);
    if ( byte_1006AD28 && alt_mouse_input )
    {
      v3 = Point.x + ((unsigned int)(unsigned __int64)((double)*(signed int *)IDA__mouse_x_ * flt_1003B208) << scale_2x);
      v4 = (unsigned __int64)((double)*(signed int *)IDA__mouse_y_ * flt_1003B20C);
      v5 = scale_2x;
    }
    else
    {
      v5 = scale_2x;
      LODWORD(v4) = *(_DWORD *)IDA__mouse_y_;
      v3 = Point.x + (*(_DWORD *)IDA__mouse_x_ << scale_2x);
    }
    v2 = Point.y + ((_DWORD)v4 << v5);
    if ( *(_DWORD *)IDA__GNW95_isActive && !byte_1006AD54 )
      LOBYTE(v2) = SetCursorPos(v3, v2);
  }
  return v2;
}
// 1003B208: using guessed type float flt_1003B208;
// 1003B20C: using guessed type float flt_1003B20C;
// 1006AD14: using guessed type int scale_2x;
// 1006AD28: using guessed type char byte_1006AD28;
// 1006AD3C: using guessed type int IDA__GNW95_isActive;
// 1006AD54: using guessed type char byte_1006AD54;
// 1006AD55: using guessed type char windowed;
// 1006AD56: using guessed type char alt_mouse_input;
// 1006AD5C: using guessed type int IDA__mouse_x_;
// 1006AD60: using guessed type int IDA__mouse_y_;
// 1006AD64: using guessed type int IDA__mouse_hotx;
// 1006AD68: using guessed type int IDA__mouse_hoty;
// 1006AD70: using guessed type int IDA__raw_x;
// 1006AD74: using guessed type int IDA__raw_y;

//----- (100236B0) --------------------------------------------------------
char __usercall sub_100236B0@<al>(int a1@<eax>, int a2@<edx>)
{
  return sub_10023590(a1, a2);
}

//----- (100236D0) --------------------------------------------------------
signed int __cdecl sub_100236D0(int a1)
{
  *(_DWORD *)a1 = dword_1006AD04;
  *(_DWORD *)(a1 + 4) = dword_1006AD08;
  *(_WORD *)(a1 + 8) = word_1006AD0C;
  dword_1006AD04 = 0;
  dword_1006AD08 = 0;
  return 1;
}
// 1006AD04: using guessed type int dword_1006AD04;
// 1006AD08: using guessed type int dword_1006AD08;
// 1006AD0C: using guessed type __int16 word_1006AD0C;

//----- (10023710) --------------------------------------------------------
signed int __usercall sub_10023710@<eax>(int a1@<eax>)
{
  return sub_100236D0(a1);
}

//----- (10023730) --------------------------------------------------------
int __cdecl sub_10023730(_DWORD *a1)
{
  int v1; // esi
  unsigned __int64 v2; // rax
  int result; // eax
  struct tagPOINT Point; // [esp+8h] [ebp-10h]
  int v5; // [esp+10h] [ebp-8h]
  int v6; // [esp+14h] [ebp-4h]

  Point.y = 0;
  Point.x = 0;
  ClientToScreen(hWnd, &Point);
  v1 = *a1 - Point.x;
  LODWORD(v2) = a1[1] - Point.y;
  v5 = *a1 - Point.x;
  v6 = v2;
  if ( byte_1006AD28 && alt_mouse_input )
  {
    v1 = (unsigned __int64)((double)v5 / flt_1003B208);
    v2 = (unsigned __int64)((double)v6 / flt_1003B20C);
  }
  dword_1006AD04 = (v1 >> scale_2x) - *(_DWORD *)IDA__mouse_x_ - *(_DWORD *)IDA__mouse_hotx;
  result = ((signed int)v2 >> scale_2x) - *(_DWORD *)IDA__mouse_hoty - *(_DWORD *)IDA__mouse_y_;
  dword_1006AD08 = result;
  return result;
}
// 1003B208: using guessed type float flt_1003B208;
// 1003B20C: using guessed type float flt_1003B20C;
// 1006AD04: using guessed type int dword_1006AD04;
// 1006AD08: using guessed type int dword_1006AD08;
// 1006AD14: using guessed type int scale_2x;
// 1006AD28: using guessed type char byte_1006AD28;
// 1006AD56: using guessed type char alt_mouse_input;
// 1006AD5C: using guessed type int IDA__mouse_x_;
// 1006AD60: using guessed type int IDA__mouse_y_;
// 1006AD64: using guessed type int IDA__mouse_hotx;
// 1006AD68: using guessed type int IDA__mouse_hoty;

//----- (100237F0) --------------------------------------------------------
int __stdcall sub_100237F0(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
{
  UINT v4; // esi
  unsigned int v5; // edi
  int result; // eax
  LPARAM v7; // edx
  int v8; // ecx
  int v9; // esi
  int v10; // edi
  int v11; // ebx
  int v12; // ebx
  int v13; // esi
  int v14; // edi
  HWND v15; // esi
  HCURSOR v16; // eax
  bool v17; // zf
  char v18; // al
  WPARAM v19; // esi
  int v20; // edi
  signed int v21; // eax
  signed int v22; // esi
  int v23; // edx
  LPARAM v24; // ecx
  int v25; // eax
  struct tagRECT Rect; // [esp+Ch] [ebp-10h]

  v4 = Msg;
  v5 = lParam;
  if ( Msg > 0x112 )
  {
    switch ( Msg )
    {
      case 0x200u:
        GetCursorPos((LPPOINT)&Rect.right);
        sub_10023730(&Rect.right);
        return 0;
      case 0x201u:
        LOBYTE(word_1006AD0C) = word_1006AD0C | 1;
        return 0;
      case 0x202u:
        LOBYTE(word_1006AD0C) = word_1006AD0C & 0xFE;
        return 0;
      case 0x204u:
        HIBYTE(word_1006AD0C) |= 1u;
        return 0;
      case 0x205u:
        HIBYTE(word_1006AD0C) &= 0xFEu;
        return 0;
      case 0x207u:
        if ( !alt_mouse_input )
          return DefWindowProcA(hWnd, v4, wParam, v5);
        if ( sub_100131B0(0, 0) )
          return 0;
        if ( dword_1003B218 )
          sub_1000EBA0();
        return 0;
      case 0x20Au:
        if ( !alt_mouse_input )
          return DefWindowProcA(hWnd, v4, wParam, v5);
        v19 = wParam & 0x10;
        v20 = SHIWORD(wParam);
        LOBYTE(hWnd) = 0;
        if ( wParam & 0x10 )
          LOBYTE(hWnd) = 1;
        if ( sub_100131B0(SHIWORD(wParam), (char)hWnd) )
          return 0;
        hWnd = 0;
        v21 = sub_10010A40(v20, (signed int *)&hWnd);
        if ( hWnd != HWND_MESSAGE|0x2 )
        {
          if ( !v19 )
            v21 = 1;
          if ( v21 > 0 )
          {
            v22 = v21;
            do
            {
              sub_1000EBA0();
              --v22;
            }
            while ( v22 );
          }
        }
        return 0;
      case 0x211u:
        *(_DWORD *)IDA__GNW95_isActive = 0;
        lParam = *(_DWORD *)IDA__GNW95_isActive;
        IDA_GNW95_hook_input_();
        return DefWindowProcA(hWnd, v4, wParam, v5);
      case 0x212u:
        *(_DWORD *)IDA__GNW95_isActive = 1;
        lParam = *(_DWORD *)IDA__GNW95_isActive;
        IDA_GNW95_hook_input_();
        return DefWindowProcA(hWnd, v4, wParam, v5);
      case 0x214u:
        if ( !windowed )
          return DefWindowProcA(hWnd, v4, wParam, v5);
        Rect.left = 0;
        Rect.right = 640 << scale_2x;
        Rect.top = 0;
        Rect.bottom = 480 << scale_2x;
        AdjustWindowRectEx(&Rect, dwStyle, 0, 0);
        v23 = Rect.bottom - Rect.top;
        v24 = lParam;
        if ( *(_DWORD *)(lParam + 8) - *(_DWORD *)lParam < Rect.right - Rect.left )
          *(_DWORD *)(lParam + 8) = Rect.right - Rect.left + *(_DWORD *)lParam;
        v25 = *(_DWORD *)(v24 + 4);
        if ( *(_DWORD *)(v24 + 12) - v25 < v23 )
          *(_DWORD *)(v24 + 12) = v23 + v25;
        return 1;
      default:
        return DefWindowProcA(hWnd, v4, wParam, v5);
    }
  }
  else if ( Msg == 274 )
  {
    if ( (wParam & 0xFFF0) == 61760 || (wParam & 0xFFF0) == 61808 )
      return 0;
  }
  else
  {
    switch ( Msg )
    {
      case 1u:
        ::hWnd = hWnd;
        sub_10022940(hWnd, (int)&unk_10036460);
        return 0;
      case 2u:
        IDA_exit_();
        return 1;
      case 5u:
        if ( byte_1006AD28 && alt_mouse_input )
        {
          lParam = (unsigned int)lParam >> 16;
          flt_1003B208 = (double)(unsigned __int16)v5 / (double)scr_width;
          flt_1003B20C = (double)(v5 >> 16) / (double)newBytes;
          sub_10022940(hWnd, (int)&unk_10036462);
          return DefWindowProcA(hWnd, v4, wParam, v5);
        }
        if ( !windowed || IsIconic(hWnd) )
          return DefWindowProcA(hWnd, v4, wParam, v5);
        v12 = (unsigned __int16)scale_2x;
        v13 = scr_width;
        v14 = newBytes;
        scr_width = (unsigned int)(unsigned __int16)lParam >> scale_2x;
        newBytes = (unsigned int)lParam >> 16 >> scale_2x;
        *(_DWORD *)(IDA__scr_size + 8) = scr_width - 1;
        *(_DWORD *)(IDA__scr_size + 12) = newBytes - 1;
        *(_DWORD *)IDA__xres = scr_width;
        *(_DWORD *)IDA__yres = newBytes;
        LOBYTE(v12) = byte_1006AD54;
        byte_1006AD54 = 1;
        sub_10003470();
        sub_10004CC0(v12, v13);
        sub_1000F1C0(v12, v13, v14);
        byte_1006AD54 = v12;
        sub_10022940(hWnd, (int)&unk_10036463);
        return 0;
      case 0xFu:
        if ( !byte_1006AD54 && GetUpdateRect(hWnd, 0, 0) )
          sub_1000ECB0();
        return DefWindowProcA(hWnd, v4, wParam, v5);
      case 0x10u:
        if ( sub_10015100() )
        {
          byte_1006AD57 = 1;
          return 0;
        }
        v15 = hWnd;
        if ( IsIconic(hWnd) && SetForegroundWindow(v15) )
          ShowWindow(v15, 9);
        if ( byte_1006AD88 )
          goto LABEL_28;
        byte_1006AD88 = 1;
        if ( IDA_game_quit_with_confirm_() == 1 )
        {
          byte_1006AD57 = 1;
          result = 0;
        }
        else
        {
          byte_1006AD88 = 0;
LABEL_28:
          result = 0;
        }
        return result;
      case 0x14u:
        return 1;
      case 0x1Cu:
        *(_DWORD *)IDA__GNW95_isActive = wParam;
        hWnd = *(HWND *)IDA__GNW95_isActive;
        IDA_GNW95_hook_input_();
        return 0;
      case 0x20u:
        if ( !((dword_1003B228 | 0x800000) & GetWindowLongA(::hWnd, -16)) )
        {
          sub_10022790();
          return DefWindowProcA(hWnd, v4, wParam, v5);
        }
        if ( !windowed && (!alt_mouse_input || graphics_mode) )
          return DefWindowProcA(hWnd, v4, wParam, v5);
        if ( (_WORD)v5 == 1 )
        {
          ClipCursor(0);
          v16 = LoadCursorA(0, (LPCSTR)0x7F00);
          SetCursor(v16);
          v17 = sub_10023260() == 0;
          v18 = byte_1003B238;
          if ( v17 )
          {
            if ( !byte_1003B238 )
            {
              byte_1003B238 = 1;
              ShowCursor(0);
            }
            return DefWindowProcA(hWnd, v4, wParam, v5);
          }
        }
        else
        {
          v18 = byte_1003B238;
        }
        if ( v18 )
        {
          byte_1003B238 = 0;
          ShowCursor(1);
        }
        break;
      case 0x46u:
        Rect.left = 0;
        Rect.right = 640 << scale_2x;
        Rect.top = 0;
        Rect.bottom = 480 << scale_2x;
        AdjustWindowRectEx(&Rect, dwStyle, 0, 0);
        v7 = lParam;
        v8 = Rect.bottom - Rect.top;
        if ( *(_DWORD *)(lParam + 16) < Rect.right - Rect.left )
          *(_DWORD *)(lParam + 16) = Rect.right - Rect.left;
        if ( *(_DWORD *)(v7 + 20) < v8 )
          *(_DWORD *)(v7 + 20) = v8;
        return 0;
      case 0x47u:
        if ( !windowed || IsIconic(hWnd) )
          return DefWindowProcA(hWnd, v4, wParam, v5);
        v9 = scr_width;
        v10 = newBytes;
        GetClientRect(::hWnd, &Rect);
        v11 = Rect.top;
        scr_width = (Rect.right - Rect.left) >> scale_2x;
        newBytes = (Rect.bottom - Rect.top) >> scale_2x;
        *(_DWORD *)(IDA__scr_size + 8) = scr_width - 1;
        *(_DWORD *)(IDA__scr_size + 12) = newBytes - 1;
        *(_DWORD *)IDA__xres = scr_width;
        *(_DWORD *)IDA__yres = newBytes;
        LOBYTE(v11) = byte_1006AD54;
        byte_1006AD54 = 1;
        sub_10003470();
        sub_10004CC0(v11, v9);
        sub_1000F1C0(v11, v9, v10);
        byte_1006AD54 = v11;
        sub_10022940(hWnd, (int)&unk_10036461);
        return 0;
      case 0x7Eu:
        if ( byte_1006AD28 && alt_mouse_input )
        {
          lParam = (unsigned int)lParam >> 16;
          flt_1003B208 = (double)(unsigned __int16)v5 / (double)scr_width;
          flt_1003B20C = (double)(v5 >> 16) / (double)newBytes;
          sub_10022940(hWnd, (int)&unk_10036464);
        }
        return DefWindowProcA(hWnd, v4, wParam, v5);
      default:
        return DefWindowProcA(hWnd, v4, wParam, v5);
    }
  }
  return DefWindowProcA(hWnd, v4, wParam, v5);
}
// 1006ACFC: invalid function type has been ignored
// 1006AD44: invalid function type has been ignored
// 1006AD40: invalid function type has been ignored
// 1003B208: using guessed type float flt_1003B208;
// 1003B20C: using guessed type float flt_1003B20C;
// 1003B218: using guessed type int dword_1003B218;
// 1003B228: using guessed type int dword_1003B228;
// 1003B238: using guessed type char byte_1003B238;
// 1006ACFC: using guessed type int (*IDA_game_quit_with_confirm_)(void);
// 1006AD00: using guessed type int IDA__scr_size;
// 1006AD08: using guessed type int dword_1006AD08;
// 1006AD0C: using guessed type __int16 word_1006AD0C;
// 1006AD14: using guessed type int scale_2x;
// 1006AD1C: using guessed type int IDA__xres;
// 1006AD20: using guessed type int IDA__yres;
// 1006AD28: using guessed type char byte_1006AD28;
// 1006AD3C: using guessed type int IDA__GNW95_isActive;
// 1006AD40: using guessed type int (*IDA_exit_)(void);
// 1006AD44: using guessed type int (*IDA_GNW95_hook_input_)(void);
// 1006AD54: using guessed type char byte_1006AD54;
// 1006AD55: using guessed type char windowed;
// 1006AD56: using guessed type char alt_mouse_input;
// 1006AD57: using guessed type char byte_1006AD57;
// 1006AD88: using guessed type char byte_1006AD88;

//----- (10023FF0) --------------------------------------------------------
int __stdcall sub_10023FF0(int nCode, WPARAM wParam, LPARAM lParam)
{
  int result; // eax

  if ( nCode < 0 )
    return CallNextHookEx(*(HHOOK *)IDA__screendump_key, nCode, wParam, lParam);
  switch ( wParam )
  {
    case 9u:
      if ( !(lParam & 0x1000) )
        goto LABEL_11;
      return 0;
    case 0x14u:
    case 0x90u:
    case 0x91u:
      goto LABEL_11;
    case 0x1Bu:
      goto LABEL_5;
    case 0x20u:
    case 0x73u:
      if ( !(lParam & 0x1000) || !windowed )
        goto LABEL_11;
      goto LABEL_6;
    case 0x2Eu:
      if ( !(lParam & 0x1000) )
        goto LABEL_11;
LABEL_5:
      if ( GetAsyncKeyState(17) >= 0 )
LABEL_11:
        result = CallNextHookEx(*(HHOOK *)IDA__screendump_key, nCode, wParam, lParam);
      else
LABEL_6:
        result = 0;
      break;
    default:
      result = 1;
      break;
  }
  return result;
}
// 1006AD38: using guessed type int IDA__screendump_key;
// 1006AD55: using guessed type char windowed;

//----- (10024140) --------------------------------------------------------
signed int sub_10024140()
{
  signed int result; // eax
  int v1; // ebx
  int v2; // esi
  int v3; // edi
  BOOL v4; // eax
  unsigned int v5; // esi
  unsigned int v6; // edi
  unsigned int v7; // eax
  int v8; // esi
  struct IDirectDraw *v9; // ecx
  struct IDirectDraw *v10; // ecx
  unsigned int v11; // [esp+4h] [ebp-50h]
  int v12; // [esp+8h] [ebp-4Ch]
  unsigned int v13; // [esp+Ch] [ebp-48h]
  UINT windowed_fullscreen; // [esp+10h] [ebp-44h]
  int v15; // [esp+14h] [ebp-40h]
  struct tagRECT Rect; // [esp+18h] [ebp-3Ch]
  WINDOWPLACEMENT wndpl; // [esp+28h] [ebp-2Ch]

  if ( !hWnd )
    return -1;
  v1 = scr_width;
  byte_1006AD54 = 1;
  v15 = scr_width;
  v12 = newBytes;
  sub_10022AB0();
  v2 = scr_width << scale_2x;
  v3 = newBytes << scale_2x;
  if ( windowed )
  {
    sub_10003480(v2);
    windowed_fullscreen = F_GetPrivateProfileIntA("MAIN", "WINDOWED_FULLSCREEN", 0);
    if ( windowed_fullscreen )
      dwStyle = 2147483648;
    else
      dwStyle = dword_1003B228;
    SetWindowLongA(hWnd, -20, 0);
    SetWindowLongA(hWnd, -16, dwStyle | 0x10000000);
    v4 = sub_10002540("MAIN", "WIN_DATA", &wndpl);
    wndpl.length = 44;
    if ( v4 )
    {
      wndpl.showCmd = 1;
      SetWindowPlacement(hWnd, &wndpl);
    }
    else
    {
      GetWindowPlacement(hWnd, &wndpl);
    }
    GetClientRect(hWnd, &Rect);
    scr_width = (Rect.right - Rect.left) >> scale_2x;
    newBytes = (Rect.bottom - Rect.top) >> scale_2x;
    if ( (Rect.right - Rect.left) >> scale_2x < 640 || (Rect.bottom - Rect.top) >> scale_2x < 480 )
    {
      scr_width = 640;
      newBytes = 480;
      Rect.left = 0;
      Rect.right = 640 << scale_2x;
      Rect.top = 0;
      Rect.bottom = 480 << scale_2x;
    }
    AdjustWindowRectEx(&Rect, dwStyle, 0, 0);
    v5 = Rect.right - Rect.left;
    v6 = Rect.bottom - Rect.top;
    v11 = GetSystemMetrics(78);
    v7 = GetSystemMetrics(79);
    v13 = v7;
    if ( v11 < v5 || v7 < v6 )
    {
      if ( scale_2x )
      {
        Rect.right = 640 << scale_2x;
        scr_width = 640;
        newBytes = 480;
        Rect.left = 0;
        Rect.top = 0;
        Rect.bottom = 480 << scale_2x;
        AdjustWindowRectEx(&Rect, dwStyle, 0, 0);
        v5 = Rect.right - Rect.left;
        v6 = Rect.bottom - Rect.top;
        v7 = v13;
      }
      if ( v11 < v5 || v7 < v6 )
      {
        scr_width = 640;
        Rect.right = 640;
        newBytes = 480;
        Rect.bottom = 480;
        scale_2x = 0;
        Rect.left = 0;
        Rect.top = 0;
        AdjustWindowRectEx(&Rect, dwStyle, 0, 0);
      }
    }
    v8 = Rect.right;
    wndpl.rcNormalPosition.right = Rect.right + wndpl.rcNormalPosition.left - Rect.left;
    wndpl.rcNormalPosition.bottom = Rect.bottom + wndpl.rcNormalPosition.top - Rect.top;
    if ( windowed_fullscreen )
      wndpl.showCmd = 3;
    SetWindowPlacement(hWnd, &wndpl);
    sub_10022880(6);
    sub_100034E0(v9);
    sub_10004CC0(0, v8);
    *(_DWORD *)(IDA__scr_size + 8) = scr_width - 1;
    *(_DWORD *)(IDA__scr_size + 12) = newBytes - 1;
    *(_DWORD *)IDA__xres = scr_width;
    *(_DWORD *)IDA__yres = newBytes;
    sub_1000F1C0(0, v15, v12);
    sub_10022940(hWnd, (int)&unk_100362B9);
    byte_1006AD54 = 0;
    result = 0;
  }
  else
  {
    if ( scr_width < 640 || newBytes < 480 )
    {
      v2 = 640;
      v3 = 480;
      scr_width = 640;
      newBytes = 480;
      scale_2x = 0;
    }
    SetWindowLongA(hWnd, -20, 8);
    SetWindowLongA(hWnd, -16, -1879048192);
    SetWindowPos(hWnd, HWND_MESSAGE|0x2, 0, 0, v2, v3, 0x20u);
    sub_10022880(5);
    sub_100034E0(v10);
    sub_10004CC0(v1, v2);
    sub_10022790();
    *(_DWORD *)(IDA__scr_size + 8) = scr_width - 1;
    *(_DWORD *)(IDA__scr_size + 12) = newBytes - 1;
    *(_DWORD *)IDA__xres = scr_width;
    *(_DWORD *)IDA__yres = newBytes;
    sub_1000F1C0(v1, v1, v12);
    byte_1006AD54 = 0;
    result = 0;
  }
  return result;
}
// 1003B228: using guessed type int dword_1003B228;
// 1006AD00: using guessed type int IDA__scr_size;
// 1006AD14: using guessed type int scale_2x;
// 1006AD1C: using guessed type int IDA__xres;
// 1006AD20: using guessed type int IDA__yres;
// 1006AD54: using guessed type char byte_1006AD54;
// 1006AD55: using guessed type char windowed;

//----- (10024560) --------------------------------------------------------
int __usercall sub_10024560@<eax>(void *a1@<ecx>, int a2@<edi>)
{
  int result; // eax
  int v3; // eax
  char v4; // bl

  if ( byte_1006AD57 )
    return 27;
  result = sub_1000F090(a1);
  if ( result == 111 || result == 79 )
  {
    v3 = sub_1001A940() - 1;
    if ( v3 )
    {
      if ( v3 == 1 )
      {
        sub_10015120();
        sub_10022A40();
        v4 = sub_1001ADE0(a2);
        sub_10015130();
        if ( v4 )
        {
          if ( graphics_mode )
          {
            sub_10024140();
            UpdateWindow(hWnd);
            return -1;
          }
        }
      }
    }
    else
    {
      sub_10015120();
      sub_100171C0();
      sub_10015130();
    }
    result = -1;
  }
  return result;
}
// 1006AD57: using guessed type char byte_1006AD57;

//----- (100245F0) --------------------------------------------------------
int __usercall sub_100245F0@<eax>(void *a1@<ecx>, int a2@<edi>)
{
  return sub_10024560(a1, a2);
}

//----- (10024610) --------------------------------------------------------
int F_initFunc10_gameFixes2()
{
  int v0; // eax
  int v1; // eax
  int v2; // eax
  int v3; // eax
  int v4; // eax
  int v5; // eax
  int v6; // eax
  int result; // eax

  sub_10022AB0();
  IDA__scr_size = F_ptrCorrection_(6758800);
  IDA__GNW95_hwnd = F_ptrCorrection_(5481328);
  IDA__GNW95_hInstance = F_ptrCorrection_(5481332);
  IDA__GNW95_isActive = F_ptrCorrection_(5481344);
  IDA_exit_ = (int (*)(void))F_ptrCorrection_(5045552);
  IDA_GNW95_hook_input_ = (int (*)(void))F_ptrCorrection_(4933932);
  F_writeMemUnk(0x4B5C5Au, 8, colour_bits);
  if ( MEMORY[0x4B5ABA] == 480 )
  {
    F_writeMemUnk(0x4B5ABFu, 640, scr_width);
    F_writeMemUnk(0x4B5ABAu, 480, newBytes);
  }
  else
  {
    F_writeMemUnk(0x4B5B1Bu, 640, scr_width);
    F_writeMemUnk(0x4B5B16u, 480, newBytes);
  }
  v0 = F_ptrCorrection_(5022908);
  F_writeMemUnk(0x4CA2C2u, v0, (int)sub_100237F0);
  if ( F_GetPrivateProfileIntA("OTHER_SETTINGS", "CPU_USAGE_FIX", 1) )
  {
    F_writeMem8(4934433, 0x53u, 233);
    F_writeMem32(0x4B4B22u, -1923919021, (int)sub_10022D40);
  }
  F_writeMem24(0x47389Bu, 262233, (int)sub_100245F0);
  if ( windowed )
    F_writeMem8(5036536, 5u, 6);
  IDA__lpDirectInputMouse = F_ptrCorrection_(5481368);
  IDA__mouse_sensitivity = F_ptrCorrection_(5480128);
  IDA__mouse_x_ = F_ptrCorrection_(6758224);
  IDA__mouse_y_ = F_ptrCorrection_(6758220);
  IDA__mouse_hotx = F_ptrCorrection_(6758260);
  IDA__mouse_hoty = F_ptrCorrection_(6758256);
  F_writeMem24(0x4B5657u, 405, (int)sub_10023400);
  IDA_game_quit_with_confirm_ = (int (*)(void))F_ptrCorrection_(4445732);
  IDA__xres = F_ptrCorrection_(6749636);
  IDA__yres = F_ptrCorrection_(6749664);
  func_writeMem16(4874742, 0x48Bu, 37008);
  F_writeMem8(4874744, 0xDDu, 161);
  v1 = F_ptrCorrection_(5277680);
  F_writeMemUnk(0x4A61F9u, v1, (int)&newBytes);
  F_writeMem8(4874762, 0x8Bu, 144);
  func_writeMem16(4874763, 0xDD0Cu, 3467);
  v2 = F_ptrCorrection_(5277676);
  F_writeMemUnk(0x4A620Du, v2, (int)&scr_width);
  IDA__screendump_key = F_ptrCorrection_(6758140);
  v3 = F_ptrCorrection_(4934084);
  F_writeMemUnk(0x4B4951u, v3, (int)sub_10023FF0);
  F_writeMem8(4996788, 0x53u, 233);
  F_writeMem32(0x4C3EB5u, -1047964079, (int)sub_10023510);
  F_writeMem8(4937624, 0x53u, 233);
  F_writeMem32(0x4B5799u, -1581020842, (int)sub_100234C0);
  F_writeMem8(4937660, 0x53u, 144);
  func_writeMem16(4937661, 0x1D8Bu, 59792);
  v4 = F_ptrCorrection_(6758260);
  F_writeMem32(0x4B57BFu, v4, (int)sub_100236B0);
  IDA__raw_x = F_ptrCorrection_(6758204);
  IDA__raw_y = F_ptrCorrection_(6758212);
  IDA__mouse_width = F_ptrCorrection_(6758248);
  IDA__mouse_length = F_ptrCorrection_(6758208);
  if ( !F_GetPrivateProfileIntA_3("Graphics", "Mode", 0) && F_GetPrivateProfileIntA("INPUT", "ALT_MOUSE_INPUT", 0) )
  {
    alt_mouse_input = 1;
    F_writeMem8(5035775, 0xE8u, 184);
    F_writeMemUnk(0x4CD700u, 724, 1);
    func_writeMem16(5035970, 0x1974u, 4587);
    func_writeMem16(5036014, 0x1474u, 3307);
    F_writeMem8(5036044, 0x53u, 233);
    F_writeMem32(0x4CD80Du, -326938031, (int)sub_10023710);
    v5 = F_ptrCorrection_(5480128);
    F_writeMemUnk(0x4B5372u, v5, (int)&unk_1003B230);
    v6 = F_ptrCorrection_(5480128);
    F_writeMemUnk(0x4B5A26u, v6, (int)&unk_1003B230);
  }
  F_writeMem24(0x43BA36u, 415670, (int)sub_10022AA0);
  if ( alt_mouse_input || F_GetPrivateProfileIntA("INPUT", "EXTRA_WIN_MSG_CHECKS", 1) )
  {
    IDA_process_bk_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4929884);
    IDA_gmouse_bk_process_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4470484);
    IDA_setSystemPalette_ = (int (__fastcall *)(_DWORD, _DWORD))F_ptrCorrection_(4981972);
    F_writeMem24(0x420822u, 602422, (int)sub_10022D50);
    F_writeMem24(0x4555C6u, -73462, (int)sub_10022D60);
    F_writeMem24(0x45571Fu, -73807, (int)sub_10022D60);
    F_writeMem24(0x4568D1u, -78337, (int)sub_10022D60);
    F_writeMem24(0x45691Fu, -78415, (int)sub_10022D60);
    F_writeMem24(0x456975u, -78501, (int)sub_10022D60);
    F_writeMem24(0x4569CEu, -78590, (int)sub_10022D60);
    F_writeMem24(0x456A3Eu, -78702, (int)sub_10022D60);
    F_writeMem24(0x456B1Au, -78922, (int)sub_10022D60);
    F_writeMem24(0x4C04A2u, 46, (int)sub_10022DE0);
  }
  result = F_GetPrivateProfileIntA("MAIN", "GRAPHICS_MODE", 0);
  if ( result )
  {
    result = F_GetPrivateProfileIntA_3("Graphics", "Mode", 0);
    if ( !result )
    {
      F_writeMem8(4938684, 0x51u, 233);
      result = F_writeMem32(0x4B5BBDu, -1990895786, (int)sub_10023220);
    }
  }
  return result;
}
// 10022D40: using guessed type int sub_10022D40();
// 10023400: using guessed type int sub_10023400();
// 10023510: using guessed type int sub_10023510();
// 1006ACFC: using guessed type int (*IDA_game_quit_with_confirm_)(void);
// 1006AD00: using guessed type int IDA__scr_size;
// 1006AD1C: using guessed type int IDA__xres;
// 1006AD20: using guessed type int IDA__yres;
// 1006AD2C: using guessed type int IDA__GNW95_hwnd;
// 1006AD34: using guessed type int IDA__GNW95_hInstance;
// 1006AD38: using guessed type int IDA__screendump_key;
// 1006AD3C: using guessed type int IDA__GNW95_isActive;
// 1006AD40: using guessed type int (*IDA_exit_)(void);
// 1006AD44: using guessed type int (*IDA_GNW95_hook_input_)(void);
// 1006AD48: using guessed type int (__fastcall *IDA_process_bk_)(_DWORD, _DWORD);
// 1006AD4C: using guessed type int (__fastcall *IDA_gmouse_bk_process_)(_DWORD, _DWORD);
// 1006AD50: using guessed type int (__fastcall *IDA_setSystemPalette_)(_DWORD, _DWORD);
// 1006AD55: using guessed type char windowed;
// 1006AD56: using guessed type char alt_mouse_input;
// 1006AD5C: using guessed type int IDA__mouse_x_;
// 1006AD60: using guessed type int IDA__mouse_y_;
// 1006AD64: using guessed type int IDA__mouse_hotx;
// 1006AD68: using guessed type int IDA__mouse_hoty;
// 1006AD6C: using guessed type int IDA__mouse_sensitivity;
// 1006AD70: using guessed type int IDA__raw_x;
// 1006AD74: using guessed type int IDA__raw_y;
// 1006AD78: using guessed type int IDA__mouse_width;
// 1006AD7C: using guessed type int IDA__mouse_length;
// 1006AD84: using guessed type int IDA__lpDirectInputMouse;

//----- (100260C7) --------------------------------------------------------
_DWORD *__thiscall sub_100260C7(_DWORD *this)
{
  _DWORD *result; // eax

  result = this;
  this[1] = 0;
  this[2] = 0;
  *this = &exception::`vftable';
  return result;
}
// 100365A0: using guessed type void *exception::`vftable';

//----- (1002615F) --------------------------------------------------------
void __thiscall sub_1002615F(void *this)
{
  bool v1; // zf

  v1 = *((_DWORD *)this + 2) == 0;
  *(_DWORD *)this = &exception::`vftable';
  if ( !v1 )
    free(*((void **)this + 1));
}
// 100365A0: using guessed type void *exception::`vftable';

//----- (10026182) --------------------------------------------------------
exception *__thiscall sub_10026182(exception *this, char *a2)
{
  exception *v2; // esi

  v2 = this;
  exception::exception(this, (const char *const *)&a2);
  *(_DWORD *)v2 = &bad_cast::`vftable';
  return v2;
}
// 100365C0: using guessed type void *bad_cast::`vftable';

//----- (1002619B) --------------------------------------------------------
exception *__thiscall sub_1002619B(exception *this, struct exception *a2)
{
  exception *v2; // esi

  v2 = this;
  exception::exception(this, a2);
  *(_DWORD *)v2 = &bad_cast::`vftable';
  return v2;
}
// 100365C0: using guessed type void *bad_cast::`vftable';

//----- (100261B3) --------------------------------------------------------
void __thiscall sub_100261B3(void *this)
{
  *(_DWORD *)this = &bad_cast::`vftable';
  sub_1002615F(this);
}
// 100365C0: using guessed type void *bad_cast::`vftable';

//----- (100261BE) --------------------------------------------------------
void *__thiscall sub_100261BE(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_1002615F(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (100261DA) --------------------------------------------------------
void *__thiscall sub_100261DA(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_100261B3(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (1002651E) --------------------------------------------------------
int sub_1002651E()
{
  return flsall(1);
}
// 100263F9: using guessed type _DWORD __cdecl flsall(_DWORD);

//----- (1002672F) --------------------------------------------------------
size_t __cdecl sub_1002672F(void *a1, size_t a2, size_t a3, FILE *a4)
{
  size_t v4; // ST1C_4

  _lock_file(a4);
  v4 = fwrite(a1, a2, a3, a4);
  _unlock_file(a4);
  return v4;
}
// 1002A6FD: using guessed type _DWORD __cdecl _lock_file(_DWORD);
// 1002A74F: using guessed type _DWORD __cdecl _unlock_file(_DWORD);

//----- (1002677B) --------------------------------------------------------
void **sub_1002677B()
{
  return off_1003B2C0;
}
// 1003B2C0: using guessed type void **off_1003B2C0;

//----- (10027153) --------------------------------------------------------
int sub_10027153()
{
  return dword_1006C708;
}
// 1006C708: using guessed type int dword_1006C708;

//----- (10027159) --------------------------------------------------------
void *sub_10027159()
{
  return &unk_1006C70C;
}

//----- (100272F0) --------------------------------------------------------
int sub_100272F0()
{
  return 0;
}

//----- (10029675) --------------------------------------------------------
void __noreturn sub_10029675()
{
  if ( off_1003B4E4 )
    off_1003B4E4();
  terminate();
}
// 1003B4E4: using guessed type int (*off_1003B4E4)(void);

//----- (1002B1A6) --------------------------------------------------------
int sub_1002B1A6()
{
  lpfn = SetUnhandledExceptionFilter(__CxxUnhandledExceptionFilter);
  return 0;
}

//----- (1002B1B9) --------------------------------------------------------
LPTOP_LEVEL_EXCEPTION_FILTER sub_1002B1B9()
{
  return SetUnhandledExceptionFilter(lpfn);
}

//----- (1002C475) --------------------------------------------------------
void sub_1002C475()
{
  void (**i)(void); // [esp+Ch] [ebp-1Ch]

  for ( i = (void (**)(void))&unk_10038CD4; i < (void (**)(void))&unk_10038CD4; ++i )
  {
    if ( *i )
      (*i)();
  }
}

//----- (1002C4B9) --------------------------------------------------------
void __cdecl sub_1002C4B9()
{
  void (**i)(void); // [esp+Ch] [ebp-1Ch]

  for ( i = (void (**)(void))&unk_10038CDC; i < (void (**)(void))&unk_10038CDC; ++i )
  {
    if ( *i )
      (*i)();
  }
}

//----- (1002CD79) --------------------------------------------------------
wchar_t *sub_1002CD79()
{
  return off_1003BC10;
}
// 1003BC10: using guessed type wchar_t *off_1003BC10;

//----- (1002ED9D) --------------------------------------------------------
int __cdecl sub_1002ED9D(int a1, int a2)
{
  return _ld12cvt(a1, a2, &unk_1003BD30);
}
// 1002EC45: using guessed type _DWORD __cdecl _ld12cvt(_DWORD, _DWORD, _DWORD);

//----- (1002EDB3) --------------------------------------------------------
int __cdecl sub_1002EDB3(int a1, int a2)
{
  return _ld12cvt(a1, a2, &unk_1003BD48);
}
// 1002EC45: using guessed type _DWORD __cdecl _ld12cvt(_DWORD, _DWORD, _DWORD);

//----- (1002EDC9) --------------------------------------------------------
int __cdecl sub_1002EDC9(int a1, int a2)
{
  char v3; // [esp+0h] [ebp-14h]
  char v4; // [esp+4h] [ebp-10h]

  __strgtold12(&v4, &v3, a2, 0, 0, 0, 0);
  return sub_1002ED9D((int)&v4, a1);
}
// 100306BB: using guessed type _DWORD __cdecl __strgtold12(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (1002EE06) --------------------------------------------------------
int __cdecl sub_1002EE06(int a1, int a2)
{
  char v3; // [esp+0h] [ebp-14h]
  char v4; // [esp+4h] [ebp-10h]

  __strgtold12(&v4, &v3, a2, 0, 0, 0, 0);
  return sub_1002EDB3((int)&v4, a1);
}
// 100306BB: using guessed type _DWORD __cdecl __strgtold12(_DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD, _DWORD);

//----- (10031A33) --------------------------------------------------------
int __cdecl sub_10031A33(int a1)
{
  int result; // eax

  if ( !byte_1006B2DC )
  {
    byte_1006B2DC = 1;
    sub_100323AB((int)tidy_global);
  }
  result = a1;
  *(_DWORD *)&dword_1006B2B8 = a1;
  return result;
}
// 10031A10: using guessed type int tidy_global();
// 1006B2DC: using guessed type char byte_1006B2DC;

//----- (10031E3D) --------------------------------------------------------
void __thiscall sub_10031E3D(_DWORD *this)
{
  void *v1; // esi

  v1 = this;
  *this = &std::runtime_error::`vftable';
  sub_1001E900(this + 3, 1, 0);
  sub_1002615F(v1);
}
// 1003875C: using guessed type void *std::runtime_error::`vftable';

//----- (10031E68) --------------------------------------------------------
void *__thiscall sub_10031E68(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10031E3D(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10031E84) --------------------------------------------------------
_DWORD *__thiscall sub_10031E84(_DWORD *this, std::_String_base *a2)
{
  _DWORD *v2; // esi

  v2 = this;
  sub_100260C7(this);
  *v2 = &std::runtime_error::`vftable';
  sub_1001FCB0((int)(v2 + 3), a2);
  return v2;
}
// 1003875C: using guessed type void *std::runtime_error::`vftable';

//----- (10031EC0) --------------------------------------------------------
void *__thiscall sub_10031EC0(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10031EDC(this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10031EDC) --------------------------------------------------------
void __thiscall sub_10031EDC(_DWORD *this)
{
  *this = &std::ios_base::failure::`vftable';
  sub_10031E3D(this);
}
// 10038768: using guessed type void *std::ios_base::failure::`vftable';

//----- (10031FAD) --------------------------------------------------------
exception *__thiscall sub_10031FAD(exception *this, struct exception *a2)
{
  exception *v2; // esi

  v2 = this;
  exception::exception(this, a2);
  *(_DWORD *)v2 = &std::runtime_error::`vftable';
  sub_1001FCB0((int)v2 + 12, (struct exception *)((char *)a2 + 12));
  return v2;
}
// 1003875C: using guessed type void *std::runtime_error::`vftable';

//----- (10031FF0) --------------------------------------------------------
exception *__thiscall sub_10031FF0(exception *this, struct exception *a2)
{
  exception *v2; // esi

  v2 = this;
  sub_10031FAD(this, a2);
  *(_DWORD *)v2 = &std::ios_base::failure::`vftable';
  return v2;
}
// 10038768: using guessed type void *std::ios_base::failure::`vftable';

//----- (1003207B) --------------------------------------------------------
void __thiscall sub_1003207B(LPCRITICAL_SECTION *this)
{
  sub_10032395(*this);
}

//----- (10032084) --------------------------------------------------------
void __thiscall sub_10032084(LPCRITICAL_SECTION *this)
{
  sub_100323A0(*this);
}

//----- (10032219) --------------------------------------------------------
void *__thiscall sub_10032219(void *this, char a2)
{
  void *v2; // esi

  v2 = this;
  sub_10032235((void **)this);
  if ( a2 & 1 )
    j__free(v2);
  return v2;
}

//----- (10032235) --------------------------------------------------------
void __thiscall sub_10032235(void **this)
{
  *this = &std::out_of_range::`vftable';
  sub_10020880(this);
}
// 100387E0: using guessed type void *std::out_of_range::`vftable';

//----- (10032280) --------------------------------------------------------
exception *__thiscall sub_10032280(exception *this, struct exception *a2)
{
  exception *v2; // esi

  v2 = this;
  sub_10022080(this, a2);
  *(_DWORD *)v2 = &std::out_of_range::`vftable';
  return v2;
}
// 100387E0: using guessed type void *std::out_of_range::`vftable';

//----- (1003238A) --------------------------------------------------------
void __cdecl sub_1003238A(LPCRITICAL_SECTION lpCriticalSection)
{
  DeleteCriticalSection(lpCriticalSection);
}

//----- (10032395) --------------------------------------------------------
void __cdecl sub_10032395(LPCRITICAL_SECTION lpCriticalSection)
{
  EnterCriticalSection(lpCriticalSection);
}

//----- (100323A0) --------------------------------------------------------
void __cdecl sub_100323A0(LPCRITICAL_SECTION lpCriticalSection)
{
  LeaveCriticalSection(lpCriticalSection);
}

//----- (100323AB) --------------------------------------------------------
int __cdecl __noreturn sub_100323AB(int a1)
{
  int result; // eax

  if ( !dword_1003C260 )
    abort();
  result = dword_1003C260 - 1;
  dword_1003C260 = result;
  dword_1006B340[result] = a1;
  return result;
}
// 1003C260: using guessed type int dword_1003C260;

//----- (1003242B) --------------------------------------------------------
int __cdecl SEH_10004A30(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032463) --------------------------------------------------------
int __cdecl SEH_10005DF0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032478) --------------------------------------------------------
int __cdecl SEH_100069C0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032495) --------------------------------------------------------
int __cdecl SEH_10006FE0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100324AA) --------------------------------------------------------
int __cdecl SEH_10007CF0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100324BC) --------------------------------------------------------
int __cdecl SEH_100080B0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100324C6) --------------------------------------------------------
void __usercall sub_100324C6(int a1@<ebp>)
{
  sub_10009900(*(_DWORD **)(a1 - 144));
}

//----- (100324D1) --------------------------------------------------------
int __cdecl sub_100324D1(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100324E3) --------------------------------------------------------
int __cdecl SEH_10008A20(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100324F8) --------------------------------------------------------
int __cdecl SEH_10008E20(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (1003250D) --------------------------------------------------------
int __cdecl SEH_10009070(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032528) --------------------------------------------------------
int __cdecl SEH_10009580(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100325E8) --------------------------------------------------------
int __cdecl SEH_1001ADE0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (1003260B) --------------------------------------------------------
int __cdecl SEH_1001DEF0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (1003262B) --------------------------------------------------------
int __cdecl SEH_1001ECE0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032648) --------------------------------------------------------
int __cdecl SEH_10020440(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (1003266B) --------------------------------------------------------
int __cdecl SEH_1001E700(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032688) --------------------------------------------------------
int __cdecl SEH_1001EFB0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100326AB) --------------------------------------------------------
int __cdecl SEH_1001EA10(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100326C0) --------------------------------------------------------
int __cdecl SEH_1001EA80(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100326F8) --------------------------------------------------------
int __cdecl SEH_1001F020(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032720) --------------------------------------------------------
int __cdecl SEH_1001F480(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032740) --------------------------------------------------------
int __cdecl SEH_1001F5F0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032758) --------------------------------------------------------
int __cdecl SEH_1001F760(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032778) --------------------------------------------------------
int __cdecl SEH_1001FA90(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100327B7) --------------------------------------------------------
int __cdecl SEH_1001FED0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100327F0) --------------------------------------------------------
int __cdecl SEH_10020100(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032821) --------------------------------------------------------
int __cdecl SEH_10020550(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032838) --------------------------------------------------------
int __cdecl SEH_10020640(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032850) --------------------------------------------------------
int __cdecl SEH_100206C0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032868) --------------------------------------------------------
int __cdecl SEH_1001FFB0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100328B8) --------------------------------------------------------
int __cdecl SEH_10021550(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100328D8) --------------------------------------------------------
int __cdecl SEH_10022010(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100328F8) --------------------------------------------------------
int __cdecl SEH_10020820(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032918) --------------------------------------------------------
int __cdecl SEH_10022200(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032930) --------------------------------------------------------
int __cdecl SEH_100222B0(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032972) --------------------------------------------------------
int __cdecl SEH_10022520(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (1003298B) --------------------------------------------------------
int __cdecl SEH_10022620(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (100329AB) --------------------------------------------------------
int __cdecl SEH_1001D840(struct EHExceptionRecord *a1, struct EHRegistrationNode *a2, struct _CONTEXT *a3, void *a4)
{
  return __CxxFrameHandler(a1, a2, a3, a4);
}

//----- (10032A90) --------------------------------------------------------
_DWORD *sub_10032A90()
{
  _DWORD *result; // eax

  result = operator new(0x18u);
  if ( result )
  {
    *result = 640;
    result[1] = 480;
    result[4] = 0;
    result[5] = 0;
    dword_1006ACB4 = (int)result;
  }
  else
  {
    result = 0;
    dword_1006ACB4 = 0;
  }
  return result;
}
// 1006ACB4: using guessed type int dword_1006ACB4;

//----- (10032AD0) --------------------------------------------------------
int sub_10032AD0()
{
  return atexit(sub_10032B20);
}

//----- (10032ADC) --------------------------------------------------------
int sub_10032ADC()
{
  std::_Init_locks::_Init_locks((std::_Init_locks *)&unk_1006B2B0);
  return atexit(sub_10032B51);
}

//----- (10032AF2) --------------------------------------------------------
int sub_10032AF2()
{
  return atexit(sub_10032B5B);
}

//----- (10032AFE) --------------------------------------------------------
int sub_10032AFE()
{
  std::_Init_locks::_Init_locks((std::_Init_locks *)&unk_1006B368);
  return atexit(sub_10032B65);
}

//----- (10032B14) --------------------------------------------------------
int sub_10032B14()
{
  return atexit(sub_10032B6F);
}

//----- (10032B20) --------------------------------------------------------
void __cdecl sub_10032B20()
{
  if ( dword_1006ACCC )
    j__free(dword_1006ACCC);
  dword_1006ACCC = 0;
  dword_1006ACD0 = 0;
  dword_1006ACD4 = 0;
}
// 1006ACD0: using guessed type int dword_1006ACD0;
// 1006ACD4: using guessed type int dword_1006ACD4;

//----- (10032B51) --------------------------------------------------------
void __cdecl sub_10032B51()
{
  struct _RTL_CRITICAL_SECTION *v0; // esi

  if ( InterlockedDecrement(&Addend) < 0 )
  {
    v0 = &CriticalSection;
    do
    {
      sub_1003238A(v0);
      ++v0;
    }
    while ( (signed int)v0 < (signed int)&unk_1006B2B0 );
  }
}

//----- (10032B5B) --------------------------------------------------------
void __cdecl sub_10032B5B()
{
  std::locale::~locale((std::locale *)&dword_1006B2C4);
}
// 1006B2C4: using guessed type int dword_1006B2C4;

//----- (10032B65) --------------------------------------------------------
void __cdecl sub_10032B65()
{
  struct _RTL_CRITICAL_SECTION *v0; // esi

  if ( InterlockedDecrement(&Addend) < 0 )
  {
    v0 = &CriticalSection;
    do
    {
      sub_1003238A(v0);
      ++v0;
    }
    while ( (signed int)v0 < (signed int)&unk_1006B2B0 );
  }
}

//----- (10032B6F) --------------------------------------------------------
void __cdecl sub_10032B6F()
{
  _Init_atexit::~_Init_atexit((_Init_atexit *)&unk_1006B369);
}

#error "There were 9 decompilation failure(s) on 807 function(s)"
